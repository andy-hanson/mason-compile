if (typeof define !== 'function') var define = require('amdefine')(module);define(['exports', 'esast/dist/ast', 'esast/dist/mangle-identifier', '../util', './ms-call', './transpile'], function (exports, _esastDistAst, _esastDistMangleIdentifier, _util, _msCall, _transpile) {
	'use strict';

	Object.defineProperty(exports, '__esModule', {
		value: true
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _mangleIdentifier = _interopRequireDefault(_esastDistMangleIdentifier);

	// Define this here to avoid circular dependency with ast-constants.
	const _IdError = new _esastDistAst.Identifier('Error');

	exports._IdError = _IdError;
	const accessLocalDeclare = localDeclare => localDeclare.isLazy() ? (0, _msCall.msUnlazy)(idForDeclareCached(localDeclare)) : new _esastDistAst.Identifier(idForDeclareCached(localDeclare).name),
	      declare = (localDeclare, val) => new _esastDistAst.VariableDeclaration('const', [new _esastDistAst.VariableDeclarator(idForDeclareCached(localDeclare), val)]),
	      forStatementInfinite = body => new _esastDistAst.ForStatement(null, null, null, body),
	      idForDeclareCached = localDeclare => {
		let _ = declareToId.get(localDeclare);
		if (_ === undefined) {
			_ = new _esastDistAst.Identifier((0, _mangleIdentifier.default)(localDeclare.name));
			declareToId.set(localDeclare, _);
		}
		return _;
	},
	      opTypeCheckForLocalDeclare = localDeclare =>
	// TODO: Way to typecheck lazies
	(0, _util.opIf)(!localDeclare.isLazy(), () => (0, _util.opMap)(localDeclare.opType, type => new _esastDistAst.ExpressionStatement((0, _msCall.msCheckContains)((0, _transpile.t0)(type), accessLocalDeclare(localDeclare), new _esastDistAst.Literal(localDeclare.name))))),
	      throwErrorFromString = msg => new _esastDistAst.ThrowStatement(new _esastDistAst.NewExpression(_IdError, [new _esastDistAst.Literal(msg)]));

	exports.accessLocalDeclare = accessLocalDeclare;
	exports.declare = declare;
	exports.forStatementInfinite = forStatementInfinite;
	exports.idForDeclareCached = idForDeclareCached;
	exports.opTypeCheckForLocalDeclare = opTypeCheckForLocalDeclare;
	exports.throwErrorFromString = throwErrorFromString;
	const declareToId = new WeakMap();
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInV0aWwuanMiLCJwcml2YXRlL3RyYW5zcGlsZS91dGlsLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7QUNRTyxPQUFNLFFBQVEsR0FBRyxrQkFSb0IsVUFBVSxDQVFmLE9BQU8sQ0FBQyxDQUFBOzs7QUFFeEMsT0FDTixrQkFBa0IsR0FBRyxZQUFZLElBQ2hDLFlBQVksQ0FBQyxNQUFNLEVBQUUsR0FDcEIsWUFUdUIsUUFBUSxFQVN0QixrQkFBa0IsQ0FBQyxZQUFZLENBQUMsQ0FBQyxHQUMxQyxrQkFkeUMsVUFBVSxDQWNwQyxrQkFBa0IsQ0FBQyxZQUFZLENBQUMsQ0FBQyxJQUFJLENBQUM7T0FFdkQsT0FBTyxHQUFHLENBQUMsWUFBWSxFQUFFLEdBQUcsS0FDM0Isa0JBaEJtQixtQkFBbUIsQ0FnQmQsT0FBTyxFQUM5QixDQUFFLGtCQWpCSixrQkFBa0IsQ0FpQlMsa0JBQWtCLENBQUMsWUFBWSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUUsQ0FBQztPQUVwRSxvQkFBb0IsR0FBRyxJQUFJLElBQzFCLGtCQXJCNEIsWUFBWSxDQXFCdkIsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDO09BRXpDLGtCQUFrQixHQUFHLFlBQVksSUFBSTtBQUNwQyxNQUFJLENBQUMsR0FBRyxXQUFXLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFBO0FBQ3JDLE1BQUksQ0FBQyxLQUFLLFNBQVMsRUFBRTtBQUNwQixJQUFDLEdBQUcsa0JBMUJxQyxVQUFVLENBMEJoQywrQkFBaUIsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUE7QUFDdkQsY0FBVyxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUUsQ0FBQyxDQUFDLENBQUE7R0FDaEM7QUFDRCxTQUFPLENBQUMsQ0FBQTtFQUNSO09BRUQsMEJBQTBCLEdBQUcsWUFBWTs7QUFFeEMsV0EvQk8sSUFBSSxFQStCTixDQUFDLFlBQVksQ0FBQyxNQUFNLEVBQUUsRUFBRSxNQUM1QixVQWhDWSxLQUFLLEVBZ0NYLFlBQVksQ0FBQyxNQUFNLEVBQUUsSUFBSSxJQUM5QixrQkFwQ0ssbUJBQW1CLENBb0NBLFlBaENuQixlQUFlLEVBaUNuQixlQWhDSSxFQUFFLEVBZ0NILElBQUksQ0FBQyxFQUNSLGtCQUFrQixDQUFDLFlBQVksQ0FBQyxFQUNoQyxrQkF2Q21ELE9BQU8sQ0F1QzlDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztPQUV0QyxvQkFBb0IsR0FBRyxHQUFHLElBQ3pCLGtCQTFDOEUsY0FBYyxDQTBDekUsa0JBMUM0QyxhQUFhLENBMEN2QyxRQUFRLEVBQUUsQ0FBRSxrQkExQ0ssT0FBTyxDQTBDQSxHQUFHLENBQUMsQ0FBRSxDQUFDLENBQUMsQ0FBQTs7Ozs7Ozs7QUFFdkUsT0FDQyxXQUFXLEdBQUcsSUFBSSxPQUFPLEVBQUUsQ0FBQSIsImZpbGUiOiJwcml2YXRlL3RyYW5zcGlsZS91dGlsLmpzIiwic291cmNlc0NvbnRlbnQiOltudWxsLCJpbXBvcnQgeyBFeHByZXNzaW9uU3RhdGVtZW50LCBGb3JTdGF0ZW1lbnQsIElkZW50aWZpZXIsIExpdGVyYWwsIE5ld0V4cHJlc3Npb24sIFRocm93U3RhdGVtZW50LFxuXHRWYXJpYWJsZURlY2xhcmF0b3IsIFZhcmlhYmxlRGVjbGFyYXRpb24gfSBmcm9tICdlc2FzdC9kaXN0L2FzdCdcbmltcG9ydCBtYW5nbGVJZGVudGlmaWVyIGZyb20gJ2VzYXN0L2Rpc3QvbWFuZ2xlLWlkZW50aWZpZXInXG5pbXBvcnQgeyBvcElmLCBvcE1hcCB9IGZyb20gJy4uL3V0aWwnXG5pbXBvcnQgeyBtc0NoZWNrQ29udGFpbnMsIG1zVW5sYXp5IH0gZnJvbSAnLi9tcy1jYWxsJ1xuaW1wb3J0IHsgdDAgfSBmcm9tICcuL3RyYW5zcGlsZSdcblxuLy8gRGVmaW5lIHRoaXMgaGVyZSB0byBhdm9pZCBjaXJjdWxhciBkZXBlbmRlbmN5IHdpdGggYXN0LWNvbnN0YW50cy5cbmV4cG9ydCBjb25zdCBfSWRFcnJvciA9IG5ldyBJZGVudGlmaWVyKCdFcnJvcicpXG5cbmV4cG9ydCBjb25zdFxuXHRhY2Nlc3NMb2NhbERlY2xhcmUgPSBsb2NhbERlY2xhcmUgPT5cblx0XHRsb2NhbERlY2xhcmUuaXNMYXp5KCkgP1xuXHRcdFx0bXNVbmxhenkoaWRGb3JEZWNsYXJlQ2FjaGVkKGxvY2FsRGVjbGFyZSkpIDpcblx0XHRcdG5ldyBJZGVudGlmaWVyKGlkRm9yRGVjbGFyZUNhY2hlZChsb2NhbERlY2xhcmUpLm5hbWUpLFxuXG5cdGRlY2xhcmUgPSAobG9jYWxEZWNsYXJlLCB2YWwpID0+XG5cdFx0bmV3IFZhcmlhYmxlRGVjbGFyYXRpb24oJ2NvbnN0Jyxcblx0XHRcdFsgbmV3IFZhcmlhYmxlRGVjbGFyYXRvcihpZEZvckRlY2xhcmVDYWNoZWQobG9jYWxEZWNsYXJlKSwgdmFsKSBdKSxcblxuXHRmb3JTdGF0ZW1lbnRJbmZpbml0ZSA9IGJvZHkgPT5cblx0XHRuZXcgRm9yU3RhdGVtZW50KG51bGwsIG51bGwsIG51bGwsIGJvZHkpLFxuXG5cdGlkRm9yRGVjbGFyZUNhY2hlZCA9IGxvY2FsRGVjbGFyZSA9PiB7XG5cdFx0bGV0IF8gPSBkZWNsYXJlVG9JZC5nZXQobG9jYWxEZWNsYXJlKVxuXHRcdGlmIChfID09PSB1bmRlZmluZWQpIHtcblx0XHRcdF8gPSBuZXcgSWRlbnRpZmllcihtYW5nbGVJZGVudGlmaWVyKGxvY2FsRGVjbGFyZS5uYW1lKSlcblx0XHRcdGRlY2xhcmVUb0lkLnNldChsb2NhbERlY2xhcmUsIF8pXG5cdFx0fVxuXHRcdHJldHVybiBfXG5cdH0sXG5cblx0b3BUeXBlQ2hlY2tGb3JMb2NhbERlY2xhcmUgPSBsb2NhbERlY2xhcmUgPT5cblx0XHQvLyBUT0RPOiBXYXkgdG8gdHlwZWNoZWNrIGxhemllc1xuXHRcdG9wSWYoIWxvY2FsRGVjbGFyZS5pc0xhenkoKSwgKCkgPT5cblx0XHRcdG9wTWFwKGxvY2FsRGVjbGFyZS5vcFR5cGUsIHR5cGUgPT5cblx0XHRcdFx0bmV3IEV4cHJlc3Npb25TdGF0ZW1lbnQobXNDaGVja0NvbnRhaW5zKFxuXHRcdFx0XHRcdHQwKHR5cGUpLFxuXHRcdFx0XHRcdGFjY2Vzc0xvY2FsRGVjbGFyZShsb2NhbERlY2xhcmUpLFxuXHRcdFx0XHRcdG5ldyBMaXRlcmFsKGxvY2FsRGVjbGFyZS5uYW1lKSkpKSksXG5cblx0dGhyb3dFcnJvckZyb21TdHJpbmcgPSBtc2cgPT5cblx0XHRuZXcgVGhyb3dTdGF0ZW1lbnQobmV3IE5ld0V4cHJlc3Npb24oX0lkRXJyb3IsIFsgbmV3IExpdGVyYWwobXNnKSBdKSlcblxuY29uc3Rcblx0ZGVjbGFyZVRvSWQgPSBuZXcgV2Vha01hcCgpXG4iXSwic291cmNlUm9vdCI6Ii9zcmMifQ==