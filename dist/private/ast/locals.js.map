{"version":3,"sources":["private/ast/locals.js","private/ast/locals.ts"],"names":[],"mappings":"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","file":"private/ast/locals.js","sourcesContent":["(function (factory) {\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === 'function' && define.amd) {\n        define([\"require\", \"exports\", './LineContent', './MsAst'], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    var LineContent_1 = require('./LineContent');\n    var MsAst_1 = require('./MsAst');\n    class LocalDeclare extends MsAst_1.default {\n        constructor(loc, name, opType, kind) {\n            super(loc);\n            this.name = name;\n            this.opType = opType;\n            this.kind = kind;\n        }\n        static untyped(loc, name, kind) {\n            return new LocalDeclare(loc, name, null, kind);\n        }\n        static plain(loc, name) {\n            return new LocalDeclare(loc, name, null, 0);\n        }\n        static built(loc) {\n            return this.plain(loc, 'built');\n        }\n        static focus(loc) {\n            return this.plain(loc, '_');\n        }\n        static typedFocus(loc, type) {\n            return new LocalDeclare(loc, '_', type, 0);\n        }\n        static this(loc) {\n            return this.plain(loc, 'this');\n        }\n        get isLazy() {\n            return this.kind === 1;\n        }\n    }\n    exports.LocalDeclare = LocalDeclare;\n    class LocalAccess extends LineContent_1.ValOnly {\n        constructor(loc, name) {\n            super(loc);\n            this.name = name;\n        }\n        static focus(loc) {\n            return new LocalAccess(loc, '_');\n        }\n        static this(loc) {\n            return new LocalAccess(loc, 'this');\n        }\n    }\n    exports.LocalAccess = LocalAccess;\n    class LocalMutate extends LineContent_1.DoOnly {\n        constructor(loc, name, value) {\n            super(loc);\n            this.name = name;\n            this.value = value;\n        }\n    }\n    exports.LocalMutate = LocalMutate;\n    class Assign extends LineContent_1.DoOnly {\n    }\n    exports.Assign = Assign;\n    class AssignSingle extends Assign {\n        constructor(loc, assignee, value) {\n            super(loc);\n            this.assignee = assignee;\n            this.value = value;\n        }\n        static focus(loc, value) {\n            return new AssignSingle(loc, LocalDeclare.focus(loc), value);\n        }\n        allAssignees() {\n            return [this.assignee];\n        }\n    }\n    exports.AssignSingle = AssignSingle;\n    class AssignDestructure extends Assign {\n        constructor(loc, assignees, value) {\n            super(loc);\n            this.assignees = assignees;\n            this.value = value;\n        }\n        get kind() {\n            return this.assignees[0].kind;\n        }\n        allAssignees() {\n            return this.assignees;\n        }\n    }\n    exports.AssignDestructure = AssignDestructure;\n});\n","import Loc from 'esast/lib/Loc'\nimport Op from 'op/Op'\nimport {DoOnly, Val, ValOnly} from './LineContent'\nimport MsAst from './MsAst'\n\n/**\nAll [[LocalAccess]]es must have some LocalDeclare to access.\nAll accessible identifiers are therefore LocalDeclares.\nThis includes imports, `this`, the focus, etc.\n*/\nexport class LocalDeclare extends MsAst {\n\t/** LocalDeclare with no type. */\n\tstatic untyped(loc: Loc, name: string, kind: LocalDeclares): LocalDeclare {\n\t\treturn new LocalDeclare(loc, name, null, kind)\n\t}\n\n\t/** LocalDeclare of just a name. */\n\tstatic plain(loc: Loc, name: string): LocalDeclare {\n\t\treturn new LocalDeclare(loc, name, null, LocalDeclares.Eager)\n\t}\n\n\tstatic built(loc: Loc): LocalDeclare {\n\t\treturn this.plain(loc, 'built')\n\t}\n\tstatic focus(loc: Loc): LocalDeclare {\n\t\treturn this.plain(loc, '_')\n\t}\n\tstatic typedFocus(loc: Loc, type: Val): LocalDeclare {\n\t\treturn new LocalDeclare(loc, '_', type, LocalDeclares.Eager)\n\t}\n\tstatic this(loc: Loc): LocalDeclare {\n\t\treturn this.plain(loc, 'this')\n\t}\n\n\tconstructor(\n\t\tloc: Loc,\n\t\tpublic name: string,\n\t\tpublic opType: Op<Val>,\n\t\tpublic kind: LocalDeclares) {\n\t\tsuper(loc)\n\t}\n\n\tget isLazy(): boolean {\n\t\treturn this.kind === LocalDeclares.Lazy\n\t}\n}\n/** Kind of [[NocalDeclare]]. */\nexport const enum LocalDeclares {\n\t/** Declared normally. */\n\tEager,\n\t/** Declared with `~a`. */\n\tLazy\n}\n\n/** Access the local `name`. */\nexport class LocalAccess extends ValOnly {\n\tstatic focus(loc: Loc): LocalAccess {\n\t\treturn new LocalAccess(loc, '_')\n\t}\n\n\tstatic this(loc: Loc): LocalAccess {\n\t\treturn new LocalAccess(loc, 'this')\n\t}\n\n\tconstructor(loc: Loc, public name: string) {\n\t\tsuper(loc)\n\t}\n}\n\n/** `{name} := {value}` */\nexport class LocalMutate extends DoOnly {\n\tconstructor(loc: Loc, public name: string, public value: Val) {\n\t\tsuper(loc)\n\t}\n}\n\n/** Any expression creating new locals. */\nexport abstract class Assign extends DoOnly {\n\t/**\n\tAll locals created by the assign.\n\t@abstract\n\t*/\n\t// todo: abstract getter\n\tabstract allAssignees(): Array<LocalDeclare>\n}\n\n/** `{assignee} =/:=/::= {value}` */\nexport class AssignSingle extends Assign {\n\t/** Assign to `_`. */\n\tstatic focus(loc: Loc, value: Val): AssignSingle {\n\t\treturn new AssignSingle(loc, LocalDeclare.focus(loc), value)\n\t}\n\n\tconstructor(loc: Loc, public assignee: LocalDeclare, public value: Val) {\n\t\tsuper(loc)\n\t}\n\n\t/** @override */\n\tallAssignees(): Array<LocalDeclare> {\n\t\treturn [this.assignee]\n\t}\n}\n\n/** `{assignees} =/:=/::= {value}` */\nexport class AssignDestructure extends Assign {\n\tconstructor(loc: Loc, public assignees: Array<LocalDeclare>, public value: Val) {\n\t\tsuper(loc)\n\t}\n\n\t/** Kind of locals this assigns to. */\n\tget kind(): LocalDeclares {\n\t\treturn this.assignees[0].kind\n\t}\n\n\t/** @override */\n\tallAssignees(): Array<LocalDeclare> {\n\t\treturn this.assignees\n\t}\n}\n"],"sourceRoot":"/source/"}