'use strict';

(function (global, factory) {
	if (typeof define === "function" && define.amd) {
		define(['exports', './context'], factory);
	} else if (typeof exports !== "undefined") {
		factory(exports, require('./context'));
	} else {
		var mod = {
			exports: {}
		};
		factory(mod.exports, global.context);
		global.VerifyResults = mod.exports;
	}
})(this, function (exports, _context) {
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.Modules = exports.Blocks = undefined;

	class VerifyResults {
		constructor() {
			this.localAccessToDeclare = new Map();
			this.localDeclareToAccesses = new Map();
			this.names = new Map();
			this.builtinPathToNames = new Map();
			this.superCallToMethod = new Map();
			this.constructorToSuper = new Map();
			this.blockToKind = new Map();
			this.statements = new Set();
			this.objEntryExports = new Set();
			this.moduleKind = null;
		}

		localDeclareForAccess(localAccess) {
			return this.localAccessToDeclare.get(localAccess);
		}

		name(expr) {
			const name = this.names.get(expr);
			(0, _context.check)(name !== undefined, expr.loc, 'Expression must be placed in a position where name can be determined.');
			return name;
		}

		opName(expr) {
			const x = this.names.get(expr);
			return x === undefined ? null : x;
		}

		isStatement(expr) {
			return this.statements.has(expr);
		}

		blockKind(block) {
			return this.blockToKind.get(block);
		}

		isObjEntryExport(objEntry) {
			return this.objEntryExports.has(objEntry);
		}

	}

	exports.default = VerifyResults;
	const Blocks = exports.Blocks = {
		Do: 0,
		Throw: 1,
		Return: 2,
		Bag: 3,
		Map: 4,
		Obj: 5
	};
	const Modules = exports.Modules = {
		Do: 0,
		Val: 1,
		Exports: 2,
		Bag: 3,
		Map: 4
	};
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcml2YXRlL1ZlcmlmeVJlc3VsdHMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7T0FNcUIsYUFBYTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzttQkFBYixhQUFhO09BaUZyQixNQUFNLFdBQU4sTUFBTSxHQUFHO0FBQ3JCLElBQUUsRUFBRSxDQUFDO0FBQ0wsT0FBSyxFQUFFLENBQUM7QUFDUixRQUFNLEVBQUUsQ0FBQztBQUNULEtBQUcsRUFBRSxDQUFDO0FBQ04sS0FBRyxFQUFFLENBQUM7QUFDTixLQUFHLEVBQUUsQ0FBQztFQUNOO09BR1ksT0FBTyxXQUFQLE9BQU8sR0FBRztBQUN0QixJQUFFLEVBQUUsQ0FBQztBQUNMLEtBQUcsRUFBRSxDQUFDO0FBQ04sU0FBTyxFQUFFLENBQUM7QUFDVixLQUFHLEVBQUUsQ0FBQztBQUNOLEtBQUcsRUFBRSxDQUFDO0VBQ04iLCJmaWxlIjoiVmVyaWZ5UmVzdWx0cy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Y2hlY2t9IGZyb20gJy4vY29udGV4dCdcblxuLyoqXG5SZXN1bHRzIG9mIHtAbGluayB2ZXJpZnl9LlxuVGhpcyBpcyBvbmx5IHRoZSBkYXRhIG5lZWRlZCBieSB7QGxpbmsgdHJhbnNwaWxlfS5cbiovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBWZXJpZnlSZXN1bHRzIHtcblx0Y29uc3RydWN0b3IoKSB7XG5cdFx0LyoqXG5cdFx0TG9jYWxBY2Nlc3MgLT4gTG9jYWxEZWNsYXJlLlxuXHRcdE5lZWRlZCBiZWNhdXNlIGxhenkgYWNjZXNzZXMgbXVzdCBiZSBjb21waWxlZCBkaWZmZXJlbnRseS5cblx0XHQqL1xuXHRcdHRoaXMubG9jYWxBY2Nlc3NUb0RlY2xhcmUgPSBuZXcgTWFwKClcblx0XHQvKipcblx0XHRMb2NhbERlY2xhcmUgLT4gQXJyYXlbTG9jYWxBY2Nlc3NdLlxuXHRcdERlYnVnIGxvY2FscyB3aWxsIG5vdCBiZSBvdXRwdXQgaWYgbm90IGluIGRlYnVnIG1vZGUuXG5cdFx0Ki9cblx0XHR0aGlzLmxvY2FsRGVjbGFyZVRvQWNjZXNzZXMgPSBuZXcgTWFwKClcblx0XHQvKipcblx0XHRNYXBzIENsYXNzL0Z1biB0byBuYW1lIGlmIG9uZSBpcyBhcHByb3ByaWF0ZS5cblx0XHRNYXBzICpldmVyeSoge0BsaW5rIFNwZWNpYWxWYWxzLk5hbWV9IHRvIHRoZSBuZWFyZXN0IG5hbWUuXG5cdFx0Ki9cblx0XHR0aGlzLm5hbWVzID0gbmV3IE1hcCgpXG5cdFx0LyoqXG5cdFx0U3RyaW5nIC0+IFNldC5cblx0XHRGb3IgZWFjaCBwYXRoLCB0aGUgbmFtZXMgb2YgZWFjaCBidWlsdGluIGltcG9ydGVkLlxuXHRcdExpa2UgdGhlIGludmVyc2Ugb2YgY29udGV4dC5vcHRzLmJ1aWx0aW5OYW1lVG9QYXRoLFxuXHRcdGJ1dCBvbmx5IGluY2x1ZGVzIG5hbWVzIGFjdHVhbGx5IHVzZWQuXG5cdFx0Ki9cblx0XHR0aGlzLmJ1aWx0aW5QYXRoVG9OYW1lcyA9IG5ldyBNYXAoKVxuXHRcdC8qKiBWYWx1ZXMgYXJlIGVpdGhlciBNZXRob2RJbXBsIG9yIHRoZSBzdHJpbmcgJ2NvbnN0cnVjdG9yJyAqL1xuXHRcdHRoaXMuc3VwZXJDYWxsVG9NZXRob2QgPSBuZXcgTWFwKClcblx0XHQvKiogTGlua3MgYSBjb25zdHJ1Y3RvciB0byBpdHMgc3VwZXIhIGNhbGwuICovXG5cdFx0dGhpcy5jb25zdHJ1Y3RvclRvU3VwZXIgPSBuZXcgTWFwKClcblx0XHQvKiogU3RvcmVzIHZlcmlmaWVkIGJsb2NrIGtpbmQgKHNlZSB2ZXJpZnlCbG9jay5qcykgKi9cblx0XHR0aGlzLmJsb2NrVG9LaW5kID0gbmV3IE1hcCgpXG5cdFx0LyoqXG5cdFx0U2V0IG9mIE1zQXN0cyB0aGF0IGhhdmUgYmVlbiBtYXJrZWQgYXMgYmVpbmcgc3RhdGVtZW50cy5cblx0XHRUaG9zZSB3aGljaCBhcmUgYWx3YXlzIHN0YXRlbWVudHMgKGxpa2UgVGhyb3cpIGFyZSBub3QgbWFya2VkLlxuXHRcdFVzZSBhIHNldCBvZiBzdGF0ZW1lbnRzIGJlY2F1c2UgdGhlcmUgYXJlIHVzdWFsbHkgbWFueSBtb3JlIHZhbHMgdGhhbiBzdGF0ZW1lbnRzLlxuXHRcdCovXG5cdFx0dGhpcy5zdGF0ZW1lbnRzID0gbmV3IFNldCgpXG5cdFx0LyoqIE9iakVudHJ5X3MgdGhhdCBhcmUgbW9kdWxlIGV4cG9ydHMgKi9cblx0XHR0aGlzLm9iakVudHJ5RXhwb3J0cyA9IG5ldyBTZXQoKVxuXHRcdC8qKiBAdHlwZSB7TW9kdWxlc30gKi9cblx0XHR0aGlzLm1vZHVsZUtpbmQgPSBudWxsXG5cdH1cblxuXHQvKiogR2V0cyB0aGUgTG9jYWxEZWNsYXJlIHRoYXQgd2FzIHZlcmlmaWVkIHRvIGJlIHRoZSBvbmUgYWNjZXNzZWQuICovXG5cdGxvY2FsRGVjbGFyZUZvckFjY2Vzcyhsb2NhbEFjY2Vzcykge1xuXHRcdHJldHVybiB0aGlzLmxvY2FsQWNjZXNzVG9EZWNsYXJlLmdldChsb2NhbEFjY2Vzcylcblx0fVxuXG5cdC8qKiBHZXQgY2xvc2VzdCBhc3NpZ25tZW50IG5hbWUgdG8gYW4gZXhwcmVzc2lvbi4gKi9cblx0bmFtZShleHByKSB7XG5cdFx0Y29uc3QgbmFtZSA9IHRoaXMubmFtZXMuZ2V0KGV4cHIpXG5cdFx0Y2hlY2sobmFtZSAhPT0gdW5kZWZpbmVkLCBleHByLmxvYyxcblx0XHRcdCdFeHByZXNzaW9uIG11c3QgYmUgcGxhY2VkIGluIGEgcG9zaXRpb24gd2hlcmUgbmFtZSBjYW4gYmUgZGV0ZXJtaW5lZC4nKVxuXHRcdHJldHVybiBuYW1lXG5cdH1cblxuXHQvKipcblx0R2V0IGNsb3Nlc3QgYXNzaWdubWVudCBuYW1lIHRvIGFuIGV4cHJlc3Npb24sXG5cdG9yIGBudWxsYCBpZiBub25lIGlzIGF2YWlsYWJsZS5cblx0Ki9cblx0b3BOYW1lKGV4cHIpIHtcblx0XHRjb25zdCB4ID0gdGhpcy5uYW1lcy5nZXQoZXhwcilcblx0XHRyZXR1cm4geCA9PT0gdW5kZWZpbmVkID8gbnVsbCA6IHhcblx0fVxuXG5cdC8qKiBDZXJ0YWluIGV4cHJlc3Npb25zIChzdWNoIGFzIGBpZmApIGFyZSBtYXJrZWQgaWYgdGhleSBhcmUgc3RhdGVtZW50cy4gKi9cblx0aXNTdGF0ZW1lbnQoZXhwcikge1xuXHRcdHJldHVybiB0aGlzLnN0YXRlbWVudHMuaGFzKGV4cHIpXG5cdH1cblxuXHQvKiogV2hhdCBraW5kIG9mIGJsb2NrIHRoZSB2ZXJpZmllciBkZXRlcm1pbmVkIHRoaXMgdG8gYmUuICovXG5cdGJsb2NrS2luZChibG9jaykge1xuXHRcdHJldHVybiB0aGlzLmJsb2NrVG9LaW5kLmdldChibG9jaylcblx0fVxuXG5cdC8qKiBXaGV0aGVyIGFuIE9iakVudHJ5IGlzIGEgbW9kdWxlIGV4cG9ydC4gKi9cblx0aXNPYmpFbnRyeUV4cG9ydChvYmpFbnRyeSkge1xuXHRcdHJldHVybiB0aGlzLm9iakVudHJ5RXhwb3J0cy5oYXMob2JqRW50cnkpXG5cdH1cbn1cblxuLyoqIEtpbmRzIG9mIHtAbGluayBCbG9ja30uICovXG5leHBvcnQgY29uc3QgQmxvY2tzID0ge1xuXHREbzogMCxcblx0VGhyb3c6IDEsXG5cdFJldHVybjogMixcblx0QmFnOiAzLFxuXHRNYXA6IDQsXG5cdE9iajogNVxufVxuXG4vKiogS2luZHMgb2Yge0BsaW5rIE1vZHVsZX0uICovXG5leHBvcnQgY29uc3QgTW9kdWxlcyA9IHtcblx0RG86IDAsXG5cdFZhbDogMSxcblx0RXhwb3J0czogMixcblx0QmFnOiAzLFxuXHRNYXA6IDQsXG59XG4iXX0=