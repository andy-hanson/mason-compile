if (typeof define !== 'function') var define = require('amdefine')(module);define(['exports'], function (exports) {
	'use strict';

	Object.defineProperty(exports, '__esModule', {
		value: true
	});
	const assert = cond => {
		if (!cond) throw new Error('Assertion failed.');
	},
	      cat = function () {
		// TODO:ES6 Splat
		const parts = Array.prototype.slice.call(arguments);
		const out = [];
		for (const _ of parts) if (_ instanceof Array) out.push(..._);else if (_ !== null) out.push(_);
		return out;
	},
	      eachReverse = (array, action) => {
		for (let i = array.length - 1; i >= 0; i = i - 1) action(array[i]);
	},
	      flatMap = (mapped, mapper) => {
		const out = [];
		for (let i = 0; i < mapped.length; i = i + 1) out.push(...mapper(mapped[i], i));
		return out;
	},
	     

	// flatMap where opMapper returns optionals instead of arrays.
	flatOpMap = (arr, opMapper) => {
		const out = [];
		for (const em of arr) opEach(opMapper(em), _ => out.push(_));
		return out;
	},
	      head = arr => {
		assert(!isEmpty(arr));
		return arr[0];
	},
	      ifElse = (op, ifSome, ifNone) => op === null ? ifNone() : ifSome(op),
	      implementMany = (holder, methodName, nameToImpl) => {
		for (const name in nameToImpl) holder[name].prototype[methodName] = nameToImpl[name];
	},
	      isEmpty = arr => arr.length === 0,
	     

	// -0 is negative
	isPositive = n => n >= 0 && 1 / n !== -Infinity,
	      iteratorToArray = iter => {
		const out = [];
		for (let em of iter) out.push(em);
		return out;
	},
	      last = arr => {
		assert(!isEmpty(arr));
		return arr[arr.length - 1];
	},
	      opEach = (op, mapper) => op === null ? null : mapper(op),
	      opIf = (cond, makeOp) => cond ? makeOp() : null,
	      opMap = opEach,
	      push = (mutArr, em) => {
		mutArr.push(em);
		return mutArr;
	},
	      repeat = (em, n) => {
		assert(n >= 0);
		const out = [];
		for (let i = n; i > 0; i = i - 1) out.push(em);
		return out;
	},
	      rtail = arr => {
		assert(!isEmpty(arr));
		return arr.slice(0, arr.length - 1);
	},
	      tail = arr => {
		assert(!isEmpty(arr));
		return arr.slice(1);
	},
	      type = (instance, itsType) => {
		if (!(Object(instance) instanceof itsType)) throw new Error(`${ instance } is not a ${ itsType.name }`);
	},
	      unshift = (em, mutArr) => {
		mutArr.unshift(em);
		return mutArr;
	};
	exports.assert = assert;
	exports.cat = cat;
	exports.eachReverse = eachReverse;
	exports.flatMap = flatMap;
	exports.flatOpMap = flatOpMap;
	exports.head = head;
	exports.ifElse = ifElse;
	exports.implementMany = implementMany;
	exports.isEmpty = isEmpty;
	exports.isPositive = isPositive;
	exports.iteratorToArray = iteratorToArray;
	exports.last = last;
	exports.opEach = opEach;
	exports.opIf = opIf;
	exports.opMap = opMap;
	exports.push = push;
	exports.repeat = repeat;
	exports.rtail = rtail;
	exports.tail = tail;
	exports.type = type;
	exports.unshift = unshift;
});
//# sourceMappingURL=data:application/json;base64,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QUksR0FBRyxHQUFHLElBQUk7QUFDYixRQUFNLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQTtBQUNyQixTQUFPLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7RUFDbkI7T0FFRCxJQUFJLEdBQUcsQ0FBQyxRQUFRLEVBQUUsT0FBTyxLQUFLO0FBQzdCLE1BQUksRUFBRSxNQUFNLENBQUMsUUFBUSxDQUFDLFlBQVksT0FBTyxDQUFBLEFBQUMsRUFDekMsTUFBTSxJQUFJLEtBQUssQ0FBQyxDQUFDLEdBQUUsUUFBUSxFQUFDLFVBQVUsR0FBRSxPQUFPLENBQUMsSUFBSSxFQUFDLENBQUMsQ0FBQyxDQUFBO0VBQ3hEO09BRUQsT0FBTyxHQUFHLENBQUMsRUFBRSxFQUFFLE1BQU0sS0FBSztBQUN6QixRQUFNLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFBO0FBQ2xCLFNBQU8sTUFBTSxDQUFBO0VBQ2IsQ0FBQSIsImZpbGUiOiJwcml2YXRlL3V0aWwuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3Rcblx0YXNzZXJ0ID0gY29uZCA9PiB7XG5cdFx0aWYgKCFjb25kKVxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCdBc3NlcnRpb24gZmFpbGVkLicpXG5cdH0sXG5cblx0Y2F0ID0gZnVuY3Rpb24oKSB7XG5cdFx0Ly8gVE9ETzpFUzYgU3BsYXRcblx0XHRjb25zdCBwYXJ0cyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cylcblx0XHRjb25zdCBvdXQgPSBbIF1cblx0XHRmb3IgKGNvbnN0IF8gb2YgcGFydHMpXG5cdFx0XHRpZiAoXyBpbnN0YW5jZW9mIEFycmF5KVxuXHRcdFx0XHRvdXQucHVzaCguLi5fKVxuXHRcdFx0ZWxzZSBpZiAoXyAhPT0gbnVsbClcblx0XHRcdFx0b3V0LnB1c2goXylcblx0XHRyZXR1cm4gb3V0XG5cdH0sXG5cblx0ZWFjaFJldmVyc2UgPSAoYXJyYXksIGFjdGlvbikgPT4ge1xuXHRcdGZvciAobGV0IGkgPSBhcnJheS5sZW5ndGggLSAxOyBpID49IDA7IGkgPSBpIC0gMSlcblx0XHRcdGFjdGlvbihhcnJheVtpXSlcblx0fSxcblxuXHRmbGF0TWFwID0gKG1hcHBlZCwgbWFwcGVyKSA9PiB7XG5cdFx0Y29uc3Qgb3V0ID0gW11cblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IG1hcHBlZC5sZW5ndGg7IGkgPSBpICsgMSlcblx0XHRcdG91dC5wdXNoKC4uLm1hcHBlcihtYXBwZWRbaV0sIGkpKVxuXHRcdHJldHVybiBvdXRcblx0fSxcblxuXHQvLyBmbGF0TWFwIHdoZXJlIG9wTWFwcGVyIHJldHVybnMgb3B0aW9uYWxzIGluc3RlYWQgb2YgYXJyYXlzLlxuXHRmbGF0T3BNYXAgPSAoYXJyLCBvcE1hcHBlcikgPT4ge1xuXHRcdGNvbnN0IG91dCA9IFsgXVxuXHRcdGZvciAoY29uc3QgZW0gb2YgYXJyKVxuXHRcdFx0b3BFYWNoKG9wTWFwcGVyKGVtKSwgXyA9PiBvdXQucHVzaChfKSlcblx0XHRyZXR1cm4gb3V0XG5cdH0sXG5cblx0aGVhZCA9IGFyciA9PiB7XG5cdFx0YXNzZXJ0KCFpc0VtcHR5KGFycikpXG5cdFx0cmV0dXJuIGFyclswXVxuXHR9LFxuXG5cdGlmRWxzZSA9IChvcCwgaWZTb21lLCBpZk5vbmUpID0+XG5cdFx0b3AgPT09IG51bGwgPyBpZk5vbmUoKSA6IGlmU29tZShvcCksXG5cblx0aW1wbGVtZW50TWFueSA9IChob2xkZXIsIG1ldGhvZE5hbWUsIG5hbWVUb0ltcGwpID0+IHtcblx0XHRmb3IgKGNvbnN0IG5hbWUgaW4gbmFtZVRvSW1wbClcblx0XHRcdGhvbGRlcltuYW1lXS5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBuYW1lVG9JbXBsW25hbWVdXG5cdH0sXG5cblx0aXNFbXB0eSA9IGFyciA9PiBhcnIubGVuZ3RoID09PSAwLFxuXG5cdC8vIC0wIGlzIG5lZ2F0aXZlXG5cdGlzUG9zaXRpdmUgPSBuID0+IG4gPj0gMCAmJiAxIC8gbiAhPT0gLUluZmluaXR5LFxuXG5cdGl0ZXJhdG9yVG9BcnJheSA9IGl0ZXIgPT4ge1xuXHRcdGNvbnN0IG91dCA9IFtdXG5cdFx0Zm9yIChsZXQgZW0gb2YgaXRlcilcblx0XHRcdG91dC5wdXNoKGVtKVxuXHRcdHJldHVybiBvdXRcblx0fSxcblxuXHRsYXN0ID0gYXJyID0+IHtcblx0XHRhc3NlcnQoIWlzRW1wdHkoYXJyKSlcblx0XHRyZXR1cm4gYXJyW2Fyci5sZW5ndGggLSAxXVxuXHR9LFxuXG5cdG9wRWFjaCA9IChvcCwgbWFwcGVyKSA9PlxuXHRcdG9wID09PSBudWxsID8gbnVsbCA6IG1hcHBlcihvcCksXG5cblx0b3BJZiA9IChjb25kLCBtYWtlT3ApID0+XG5cdFx0Y29uZCA/IG1ha2VPcCgpIDogbnVsbCxcblxuXHRvcE1hcCA9IG9wRWFjaCxcblxuXHRwdXNoID0gKG11dEFyciwgZW0pID0+IHtcblx0XHRtdXRBcnIucHVzaChlbSlcblx0XHRyZXR1cm4gbXV0QXJyXG5cdH0sXG5cblx0cmVwZWF0ID0gKGVtLCBuKSA9PiB7XG5cdFx0YXNzZXJ0KG4gPj0gMClcblx0XHRjb25zdCBvdXQgPSBbXVxuXHRcdGZvciAobGV0IGkgPSBuOyBpID4gMDsgaSA9IGkgLSAxKVxuXHRcdFx0b3V0LnB1c2goZW0pXG5cdFx0cmV0dXJuIG91dFxuXHR9LFxuXG5cdHJ0YWlsID0gYXJyID0+IHtcblx0XHRhc3NlcnQoIWlzRW1wdHkoYXJyKSlcblx0XHRyZXR1cm4gYXJyLnNsaWNlKDAsIGFyci5sZW5ndGggLSAxKVxuXHR9LFxuXG5cdHRhaWwgPSBhcnIgPT4ge1xuXHRcdGFzc2VydCghaXNFbXB0eShhcnIpKVxuXHRcdHJldHVybiBhcnIuc2xpY2UoMSlcblx0fSxcblxuXHR0eXBlID0gKGluc3RhbmNlLCBpdHNUeXBlKSA9PiB7XG5cdFx0aWYgKCEoT2JqZWN0KGluc3RhbmNlKSBpbnN0YW5jZW9mIGl0c1R5cGUpKVxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKGAke2luc3RhbmNlfSBpcyBub3QgYSAke2l0c1R5cGUubmFtZX1gKVxuXHR9LFxuXG5cdHVuc2hpZnQgPSAoZW0sIG11dEFycikgPT4ge1xuXHRcdG11dEFyci51bnNoaWZ0KGVtKVxuXHRcdHJldHVybiBtdXRBcnJcblx0fVxuIl0sInNvdXJjZVJvb3QiOiIvc3JjIn0=