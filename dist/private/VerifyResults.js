if (typeof define !== 'function') var define = require('amdefine')(module);define(['exports', './util'], function (exports, _util) {
	'use strict';

	Object.defineProperty(exports, '__esModule', {
		value: true
	});

	class VerifyResults {
		constructor() {
			// LocalAccess -> LocalDeclare.
			// Needed because lazy accesses must be compiled differently.
			this.localAccessToDeclare = new Map();
			// LocalDeclare -> VrLocalInfo.
			// Debug locals will not be output if not in debug mode.
			this.localDeclareToInfo = new Map();
			// Maps Class/Fun to name if one is appropriate.
			// Maps *every* SV_Name to the nearest name.
			this.names = new Map();
			// String -> Set.
			// For each path, the names of each builtin used.
			// Like the inverse of context.opts.builtinNameToPath,
			// but only includes names actually used.
			this.builtinPathToNames = new Map();
			// Values are either MethodImpl or the string 'constructor'
			this.superCallToMethod = new Map();
			// Links a constructor to its super! call.
			this.constructorToSuper = new Map();
		}

		isDebugLocal(localDeclare) {
			return this.localDeclareToInfo.get(localDeclare).isInDebug;
		}

		isAccessed(localDeclare) {
			const info = this.localDeclareToInfo.get(localDeclare);
			return !((0, _util.isEmpty)(info.debugAccesses) && (0, _util.isEmpty)(info.nonDebugAccesses));
		}

		localDeclareForAccess(localAccess) {
			return this.localAccessToDeclare.get(localAccess);
		}

		name(expr) {
			return this.names.get(expr);
		}

		opName(expr) {
			const x = this.names.get(expr);
			return x === undefined ? null : x;
		}
	}

	exports.default = VerifyResults;

	class LocalInfo {
		static empty(isInDebug) {
			return new LocalInfo(isInDebug, [], []);
		}

		constructor(isInDebug, /* Boolean */
		debugAccesses, /* LocalAccess */
		nonDebugAccesses /* Array[LocalAccess] */) {
			this.isInDebug = isInDebug;
			this.debugAccesses = debugAccesses;
			this.nonDebugAccesses = nonDebugAccesses;
		}
	}

	exports.LocalInfo = LocalInfo;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlZlcmlmeVJlc3VsdHMuanMiLCJwcml2YXRlL1ZlcmlmeVJlc3VsdHMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7QUNFZSxPQUFNLGFBQWEsQ0FBQztBQUNsQyxhQUFXLEdBQUc7OztBQUdiLE9BQUksQ0FBQyxvQkFBb0IsR0FBRyxJQUFJLEdBQUcsRUFBRSxDQUFBOzs7QUFHckMsT0FBSSxDQUFDLGtCQUFrQixHQUFHLElBQUksR0FBRyxFQUFFLENBQUE7OztBQUduQyxPQUFJLENBQUMsS0FBSyxHQUFHLElBQUksR0FBRyxFQUFFLENBQUE7Ozs7O0FBS3RCLE9BQUksQ0FBQyxrQkFBa0IsR0FBRyxJQUFJLEdBQUcsRUFBRSxDQUFBOztBQUVuQyxPQUFJLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxHQUFHLEVBQUUsQ0FBQTs7QUFFbEMsT0FBSSxDQUFDLGtCQUFrQixHQUFHLElBQUksR0FBRyxFQUFFLENBQUE7R0FDbkM7O0FBRUQsY0FBWSxDQUFDLFlBQVksRUFBRTtBQUMxQixVQUFPLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLENBQUMsU0FBUyxDQUFBO0dBQzFEOztBQUVELFlBQVUsQ0FBQyxZQUFZLEVBQUU7QUFDeEIsU0FBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQTtBQUN0RCxVQUFPLEVBQUUsVUE5QkYsT0FBTyxFQThCRyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksVUE5QmpDLE9BQU8sRUE4QmtDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFBLEFBQUMsQ0FBQTtHQUN2RTs7QUFFRCx1QkFBcUIsQ0FBQyxXQUFXLEVBQUU7QUFDbEMsVUFBTyxJQUFJLENBQUMsb0JBQW9CLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFBO0dBQ2pEOztBQUVELE1BQUksQ0FBQyxJQUFJLEVBQUU7QUFDVixVQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFBO0dBQzNCOztBQUVELFFBQU0sQ0FBQyxJQUFJLEVBQUU7QUFDWixTQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUM5QixVQUFPLENBQUMsS0FBSyxTQUFTLEdBQUcsSUFBSSxHQUFHLENBQUMsQ0FBQTtHQUNqQztFQUNEOzttQkEzQ29CLGFBQWE7O0FBNkMzQixPQUFNLFNBQVMsQ0FBQztBQUN0QixTQUFPLEtBQUssQ0FBQyxTQUFTLEVBQUU7QUFDdkIsVUFBTyxJQUFJLFNBQVMsQ0FBQyxTQUFTLEVBQUUsRUFBRyxFQUFFLEVBQUcsQ0FBQyxDQUFBO0dBQ3pDOztBQUVELGFBQVcsQ0FDVixTQUFTO0FBQ1QsZUFBYTtBQUNiLGtCQUFnQiwyQkFBMkI7QUFDM0MsT0FBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUE7QUFDMUIsT0FBSSxDQUFDLGFBQWEsR0FBRyxhQUFhLENBQUE7QUFDbEMsT0FBSSxDQUFDLGdCQUFnQixHQUFHLGdCQUFnQixDQUFBO0dBQ3hDO0VBQ0QiLCJmaWxlIjoicHJpdmF0ZS9WZXJpZnlSZXN1bHRzLmpzIiwic291cmNlc0NvbnRlbnQiOltudWxsLCJpbXBvcnQgeyBpc0VtcHR5IH0gZnJvbSAnLi91dGlsJ1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBWZXJpZnlSZXN1bHRzIHtcblx0Y29uc3RydWN0b3IoKSB7XG5cdFx0Ly8gTG9jYWxBY2Nlc3MgLT4gTG9jYWxEZWNsYXJlLlxuXHRcdC8vIE5lZWRlZCBiZWNhdXNlIGxhenkgYWNjZXNzZXMgbXVzdCBiZSBjb21waWxlZCBkaWZmZXJlbnRseS5cblx0XHR0aGlzLmxvY2FsQWNjZXNzVG9EZWNsYXJlID0gbmV3IE1hcCgpXG5cdFx0Ly8gTG9jYWxEZWNsYXJlIC0+IFZyTG9jYWxJbmZvLlxuXHRcdC8vIERlYnVnIGxvY2FscyB3aWxsIG5vdCBiZSBvdXRwdXQgaWYgbm90IGluIGRlYnVnIG1vZGUuXG5cdFx0dGhpcy5sb2NhbERlY2xhcmVUb0luZm8gPSBuZXcgTWFwKClcblx0XHQvLyBNYXBzIENsYXNzL0Z1biB0byBuYW1lIGlmIG9uZSBpcyBhcHByb3ByaWF0ZS5cblx0XHQvLyBNYXBzICpldmVyeSogU1ZfTmFtZSB0byB0aGUgbmVhcmVzdCBuYW1lLlxuXHRcdHRoaXMubmFtZXMgPSBuZXcgTWFwKClcblx0XHQvLyBTdHJpbmcgLT4gU2V0LlxuXHRcdC8vIEZvciBlYWNoIHBhdGgsIHRoZSBuYW1lcyBvZiBlYWNoIGJ1aWx0aW4gdXNlZC5cblx0XHQvLyBMaWtlIHRoZSBpbnZlcnNlIG9mIGNvbnRleHQub3B0cy5idWlsdGluTmFtZVRvUGF0aCxcblx0XHQvLyBidXQgb25seSBpbmNsdWRlcyBuYW1lcyBhY3R1YWxseSB1c2VkLlxuXHRcdHRoaXMuYnVpbHRpblBhdGhUb05hbWVzID0gbmV3IE1hcCgpXG5cdFx0Ly8gVmFsdWVzIGFyZSBlaXRoZXIgTWV0aG9kSW1wbCBvciB0aGUgc3RyaW5nICdjb25zdHJ1Y3Rvcidcblx0XHR0aGlzLnN1cGVyQ2FsbFRvTWV0aG9kID0gbmV3IE1hcCgpXG5cdFx0Ly8gTGlua3MgYSBjb25zdHJ1Y3RvciB0byBpdHMgc3VwZXIhIGNhbGwuXG5cdFx0dGhpcy5jb25zdHJ1Y3RvclRvU3VwZXIgPSBuZXcgTWFwKClcblx0fVxuXG5cdGlzRGVidWdMb2NhbChsb2NhbERlY2xhcmUpIHtcblx0XHRyZXR1cm4gdGhpcy5sb2NhbERlY2xhcmVUb0luZm8uZ2V0KGxvY2FsRGVjbGFyZSkuaXNJbkRlYnVnXG5cdH1cblxuXHRpc0FjY2Vzc2VkKGxvY2FsRGVjbGFyZSkge1xuXHRcdGNvbnN0IGluZm8gPSB0aGlzLmxvY2FsRGVjbGFyZVRvSW5mby5nZXQobG9jYWxEZWNsYXJlKVxuXHRcdHJldHVybiAhKGlzRW1wdHkoaW5mby5kZWJ1Z0FjY2Vzc2VzKSAmJiBpc0VtcHR5KGluZm8ubm9uRGVidWdBY2Nlc3NlcykpXG5cdH1cblxuXHRsb2NhbERlY2xhcmVGb3JBY2Nlc3MobG9jYWxBY2Nlc3MpIHtcblx0XHRyZXR1cm4gdGhpcy5sb2NhbEFjY2Vzc1RvRGVjbGFyZS5nZXQobG9jYWxBY2Nlc3MpXG5cdH1cblxuXHRuYW1lKGV4cHIpIHtcblx0XHRyZXR1cm4gdGhpcy5uYW1lcy5nZXQoZXhwcilcblx0fVxuXG5cdG9wTmFtZShleHByKSB7XG5cdFx0Y29uc3QgeCA9IHRoaXMubmFtZXMuZ2V0KGV4cHIpXG5cdFx0cmV0dXJuIHggPT09IHVuZGVmaW5lZCA/IG51bGwgOiB4XG5cdH1cbn1cblxuZXhwb3J0IGNsYXNzIExvY2FsSW5mbyB7XG5cdHN0YXRpYyBlbXB0eShpc0luRGVidWcpIHtcblx0XHRyZXR1cm4gbmV3IExvY2FsSW5mbyhpc0luRGVidWcsIFsgXSwgWyBdKVxuXHR9XG5cblx0Y29uc3RydWN0b3IoXG5cdFx0aXNJbkRlYnVnIC8qIEJvb2xlYW4gKi8sXG5cdFx0ZGVidWdBY2Nlc3NlcyAvKiBMb2NhbEFjY2VzcyAqLyxcblx0XHRub25EZWJ1Z0FjY2Vzc2VzIC8qIEFycmF5W0xvY2FsQWNjZXNzXSAqLykge1xuXHRcdHRoaXMuaXNJbkRlYnVnID0gaXNJbkRlYnVnXG5cdFx0dGhpcy5kZWJ1Z0FjY2Vzc2VzID0gZGVidWdBY2Nlc3Nlc1xuXHRcdHRoaXMubm9uRGVidWdBY2Nlc3NlcyA9IG5vbkRlYnVnQWNjZXNzZXNcblx0fVxufVxuIl0sInNvdXJjZVJvb3QiOiIvc3JjIn0=