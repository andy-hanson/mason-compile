if (typeof define !== 'function') var define = require('amdefine')(module);define(['exports', 'esast/dist/ast', 'esast/dist/util', './util'], function (exports, _esastDistAst, _esastDistUtil, _util) {
	'use strict';

	Object.defineProperty(exports, '__esModule', {
		value: true
	});
	const GlobalError = new _esastDistAst.Identifier('Error'),
	      IdArguments = new _esastDistAst.Identifier('arguments'),
	      IdBuilt = new _esastDistAst.Identifier('built'),
	      IdDefine = new _esastDistAst.Identifier('define'),
	      IdError = _util._IdError,
	      IdExports = new _esastDistAst.Identifier('exports'),
	      IdExtract = new _esastDistAst.Identifier('_$'),
	      IdFocus = new _esastDistAst.Identifier('_'),
	     
	// TODO:ES6 Shouldn't need, just use arrow functions.
	IdLexicalThis = new _esastDistAst.Identifier('_this'),
	      IdSuper = new _esastDistAst.Identifier('super'),
	      LitEmptyArray = new _esastDistAst.ArrayExpression([]),
	      LitEmptyString = new _esastDistAst.Literal(''),
	      LitNull = new _esastDistAst.Literal(null),
	      LitStrExports = new _esastDistAst.Literal('exports'),
	      LitStrThrow = new _esastDistAst.Literal('An error occurred.'),
	      LitTrue = new _esastDistAst.Literal(true),
	      LitZero = new _esastDistAst.Literal(0),
	      ReturnBuilt = new _esastDistAst.ReturnStatement(IdBuilt),
	      ReturnExports = new _esastDistAst.ReturnStatement(IdExports),
	      ReturnRes = new _esastDistAst.ReturnStatement(new _esastDistAst.Identifier('res')),
	      SwitchCaseNoMatch = new _esastDistAst.SwitchCase(undefined, [(0, _util.throwErrorFromString)('No branch of `switch` matches.')]),
	      SymbolIterator = (0, _esastDistUtil.member)(new _esastDistAst.Identifier('Symbol'), 'iterator'),
	      ThrowAssertFail = (0, _util.throwErrorFromString)('Assertion failed.'),
	      ThrowNoCaseMatch = (0, _util.throwErrorFromString)('No branch of `case` matches.'),
	      UseStrict = new _esastDistAst.ExpressionStatement(new _esastDistAst.Literal('use strict')),
	      ArraySliceCall = (0, _esastDistUtil.member)((0, _esastDistUtil.member)(LitEmptyArray, 'slice'), 'call'),
	     
	// if (typeof define !== 'function') var define = require('amdefine')(module)
	AmdefineHeader = new _esastDistAst.IfStatement(new _esastDistAst.BinaryExpression('!==', new _esastDistAst.UnaryExpression('typeof', IdDefine), new _esastDistAst.Literal('function')), new _esastDistAst.VariableDeclaration('var', [new _esastDistAst.VariableDeclarator(IdDefine, new _esastDistAst.CallExpression(new _esastDistAst.CallExpression(new _esastDistAst.Identifier('require'), [new _esastDistAst.Literal('amdefine')]), [new _esastDistAst.Identifier('module')]))])),
	      DeclareBuiltBag = new _esastDistAst.VariableDeclaration('const', [new _esastDistAst.VariableDeclarator(IdBuilt, LitEmptyArray)]),
	      DeclareBuiltMap = new _esastDistAst.VariableDeclaration('const', [new _esastDistAst.VariableDeclarator(IdBuilt, new _esastDistAst.NewExpression((0, _esastDistUtil.member)(new _esastDistAst.Identifier('global'), 'Map'), []))]),
	      DeclareBuiltObj = new _esastDistAst.VariableDeclaration('const', [new _esastDistAst.VariableDeclarator(IdBuilt, new _esastDistAst.ObjectExpression([]))]),
	      DeclareLexicalThis = new _esastDistAst.VariableDeclaration('const', [new _esastDistAst.VariableDeclarator(IdLexicalThis, new _esastDistAst.ThisExpression())]),
	      ExportsDefault = (0, _esastDistUtil.member)(IdExports, 'default'),
	      ExportsGet = (0, _esastDistUtil.member)(IdExports, '_get');
	exports.GlobalError = GlobalError;
	exports.IdArguments = IdArguments;
	exports.IdBuilt = IdBuilt;
	exports.IdDefine = IdDefine;
	exports.IdError = IdError;
	exports.IdExports = IdExports;
	exports.IdExtract = IdExtract;
	exports.IdFocus = IdFocus;
	exports.IdLexicalThis = IdLexicalThis;
	exports.IdSuper = IdSuper;
	exports.LitEmptyArray = LitEmptyArray;
	exports.LitEmptyString = LitEmptyString;
	exports.LitNull = LitNull;
	exports.LitStrExports = LitStrExports;
	exports.LitStrThrow = LitStrThrow;
	exports.LitTrue = LitTrue;
	exports.LitZero = LitZero;
	exports.ReturnBuilt = ReturnBuilt;
	exports.ReturnExports = ReturnExports;
	exports.ReturnRes = ReturnRes;
	exports.SwitchCaseNoMatch = SwitchCaseNoMatch;
	exports.SymbolIterator = SymbolIterator;
	exports.ThrowAssertFail = ThrowAssertFail;
	exports.ThrowNoCaseMatch = ThrowNoCaseMatch;
	exports.UseStrict = UseStrict;
	exports.ArraySliceCall = ArraySliceCall;
	exports.AmdefineHeader = AmdefineHeader;
	exports.DeclareBuiltBag = DeclareBuiltBag;
	exports.DeclareBuiltMap = DeclareBuiltMap;
	exports.DeclareBuiltObj = DeclareBuiltObj;
	exports.DeclareLexicalThis = DeclareLexicalThis;
	exports.ExportsDefault = ExportsDefault;
	exports.ExportsGet = ExportsGet;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzdC1jb25zdGFudHMuanMiLCJwcml2YXRlL3RyYW5zcGlsZS9hc3QtY29uc3RhbnRzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7QUNNTyxPQUNOLFdBQVcsR0FBRyxrQkFQaUUsVUFBVSxDQU81RCxPQUFPLENBQUM7T0FDckMsV0FBVyxHQUFHLGtCQVJpRSxVQUFVLENBUTVELFdBQVcsQ0FBQztPQUN6QyxPQUFPLEdBQUcsa0JBVHFFLFVBQVUsQ0FTaEUsT0FBTyxDQUFDO09BQ2pDLFFBQVEsR0FBRyxrQkFWb0UsVUFBVSxDQVUvRCxRQUFRLENBQUM7T0FDbkMsT0FBTyxTQVBBLFFBQVEsQUFPRztPQUNsQixTQUFTLEdBQUcsa0JBWm1FLFVBQVUsQ0FZOUQsU0FBUyxDQUFDO09BQ3JDLFNBQVMsR0FBRyxrQkFibUUsVUFBVSxDQWE5RCxJQUFJLENBQUM7T0FDaEMsT0FBTyxHQUFHLGtCQWRxRSxVQUFVLENBY2hFLEdBQUcsQ0FBQzs7O0FBRTdCLGNBQWEsR0FBRyxrQkFoQitELFVBQVUsQ0FnQjFELE9BQU8sQ0FBQztPQUN2QyxPQUFPLEdBQUcsa0JBakJxRSxVQUFVLENBaUJoRSxPQUFPLENBQUM7T0FDakMsYUFBYSxHQUFHLGtCQWxCVCxlQUFlLENBa0JjLEVBQUUsQ0FBQztPQUN2QyxjQUFjLEdBQUcsa0JBbEJKLE9BQU8sQ0FrQlMsRUFBRSxDQUFDO09BQ2hDLE9BQU8sR0FBRyxrQkFuQkcsT0FBTyxDQW1CRSxJQUFJLENBQUM7T0FDM0IsYUFBYSxHQUFHLGtCQXBCSCxPQUFPLENBb0JRLFNBQVMsQ0FBQztPQUN0QyxXQUFXLEdBQUcsa0JBckJELE9BQU8sQ0FxQk0sb0JBQW9CLENBQUM7T0FDL0MsT0FBTyxHQUFHLGtCQXRCRyxPQUFPLENBc0JFLElBQUksQ0FBQztPQUMzQixPQUFPLEdBQUcsa0JBdkJHLE9BQU8sQ0F1QkUsQ0FBQyxDQUFDO09BQ3hCLFdBQVcsR0FBRyxrQkF4QnlDLGVBQWUsQ0F3QnBDLE9BQU8sQ0FBQztPQUMxQyxhQUFhLEdBQUcsa0JBekJ1QyxlQUFlLENBeUJsQyxTQUFTLENBQUM7T0FDOUMsU0FBUyxHQUFHLGtCQTFCMkMsZUFBZSxDQTBCdEMsa0JBM0IrQyxVQUFVLENBMkIxQyxLQUFLLENBQUMsQ0FBQztPQUN0RCxpQkFBaUIsR0FBRyxrQkEzQm9ELFVBQVUsQ0EyQi9DLFNBQVMsRUFBRSxDQUM3QyxVQXpCZ0Isb0JBQW9CLEVBeUJmLGdDQUFnQyxDQUFDLENBQUMsQ0FBQztPQUN6RCxjQUFjLEdBQUcsbUJBM0JWLE1BQU0sRUEyQlcsa0JBOUJ1RCxVQUFVLENBOEJsRCxRQUFRLENBQUMsRUFBRSxVQUFVLENBQUM7T0FDN0QsZUFBZSxHQUFHLFVBM0JELG9CQUFvQixFQTJCRSxtQkFBbUIsQ0FBQztPQUMzRCxnQkFBZ0IsR0FBRyxVQTVCRixvQkFBb0IsRUE0QkcsOEJBQThCLENBQUM7T0FDdkUsU0FBUyxHQUFHLGtCQWpDOEMsbUJBQW1CLENBaUN6QyxrQkFoQ3ZCLE9BQU8sQ0FnQzRCLFlBQVksQ0FBQyxDQUFDO09BRTlELGNBQWMsR0FBRyxtQkFoQ1YsTUFBTSxFQWdDVyxtQkFoQ2pCLE1BQU0sRUFnQ2tCLGFBQWEsRUFBRSxPQUFPLENBQUMsRUFBRSxNQUFNLENBQUM7OztBQUUvRCxlQUFjLEdBQUcsa0JBcENqQixXQUFXLENBcUNWLGtCQXRDdUIsZ0JBQWdCLENBc0NsQixLQUFLLEVBQ3pCLGtCQXJDYyxlQUFlLENBcUNULFFBQVEsRUFBRSxRQUFRLENBQUMsRUFDdkMsa0JBdkNXLE9BQU8sQ0F1Q04sVUFBVSxDQUFDLENBQUMsRUFDekIsa0JBdkNnQyxtQkFBbUIsQ0F1QzNCLEtBQUssRUFBRSxDQUM5QixrQkF4Q29ELGtCQUFrQixDQXdDL0MsUUFBUSxFQUFFLGtCQTFDTyxjQUFjLENBMkNyRCxrQkEzQ3VDLGNBQWMsQ0EyQ2xDLGtCQTNDeUQsVUFBVSxDQTJDcEQsU0FBUyxDQUFDLEVBQUUsQ0FBQyxrQkExQ3JDLE9BQU8sQ0EwQzBDLFVBQVUsQ0FBQyxDQUFDLENBQUMsRUFDeEUsQ0FBQyxrQkE1QzJFLFVBQVUsQ0E0Q3RFLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztPQUNsQyxlQUFlLEdBQUcsa0JBM0NlLG1CQUFtQixDQTJDVixPQUFPLEVBQ2hELENBQUMsa0JBNUNvRCxrQkFBa0IsQ0E0Qy9DLE9BQU8sRUFBRSxhQUFhLENBQUMsQ0FBQyxDQUFDO09BQ2xELGVBQWUsR0FBRyxrQkE3Q2UsbUJBQW1CLENBNkNWLE9BQU8sRUFBRSxDQUNsRCxrQkE5Q3FELGtCQUFrQixDQThDaEQsT0FBTyxFQUM3QixrQkFoRG9CLGFBQWEsQ0FnRGYsbUJBOUNiLE1BQU0sRUE4Q2Msa0JBakRvRCxVQUFVLENBaUQvQyxRQUFRLENBQUMsRUFBRSxLQUFLLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7T0FDbkUsZUFBZSxHQUFHLGtCQWhEZSxtQkFBbUIsQ0FnRFYsT0FBTyxFQUFFLENBQ2xELGtCQWpEcUQsa0JBQWtCLENBaURoRCxPQUFPLEVBQUUsa0JBbERJLGdCQUFnQixDQWtEQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7T0FDNUQsa0JBQWtCLEdBQUcsa0JBbERZLG1CQUFtQixDQWtEUCxPQUFPLEVBQ25ELENBQUMsa0JBbkRvRCxrQkFBa0IsQ0FtRC9DLGFBQWEsRUFBRSxrQkFuRHhDLGNBQWMsRUFtRDhDLENBQUMsQ0FBQyxDQUFDO09BQy9ELGNBQWMsR0FBRyxtQkFuRFYsTUFBTSxFQW1EVyxTQUFTLEVBQUUsU0FBUyxDQUFDO09BQzdDLFVBQVUsR0FBRyxtQkFwRE4sTUFBTSxFQW9ETyxTQUFTLEVBQUUsTUFBTSxDQUFDLENBQUEiLCJmaWxlIjoicHJpdmF0ZS90cmFuc3BpbGUvYXN0LWNvbnN0YW50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbbnVsbCwiaW1wb3J0IHtBcnJheUV4cHJlc3Npb24sIEJpbmFyeUV4cHJlc3Npb24sIENhbGxFeHByZXNzaW9uLCBFeHByZXNzaW9uU3RhdGVtZW50LCBJZGVudGlmaWVyLFxuXHRJZlN0YXRlbWVudCwgTGl0ZXJhbCwgTmV3RXhwcmVzc2lvbiwgT2JqZWN0RXhwcmVzc2lvbiwgUmV0dXJuU3RhdGVtZW50LCBTd2l0Y2hDYXNlLFxuXHRUaGlzRXhwcmVzc2lvbiwgVW5hcnlFeHByZXNzaW9uLCBWYXJpYWJsZURlY2xhcmF0aW9uLCBWYXJpYWJsZURlY2xhcmF0b3J9IGZyb20gJ2VzYXN0L2Rpc3QvYXN0J1xuaW1wb3J0IHttZW1iZXJ9IGZyb20gJ2VzYXN0L2Rpc3QvdXRpbCdcbmltcG9ydCB7X0lkRXJyb3IsIHRocm93RXJyb3JGcm9tU3RyaW5nfSBmcm9tICcuL3V0aWwnXG5cbmV4cG9ydCBjb25zdFxuXHRHbG9iYWxFcnJvciA9IG5ldyBJZGVudGlmaWVyKCdFcnJvcicpLFxuXHRJZEFyZ3VtZW50cyA9IG5ldyBJZGVudGlmaWVyKCdhcmd1bWVudHMnKSxcblx0SWRCdWlsdCA9IG5ldyBJZGVudGlmaWVyKCdidWlsdCcpLFxuXHRJZERlZmluZSA9IG5ldyBJZGVudGlmaWVyKCdkZWZpbmUnKSxcblx0SWRFcnJvciA9IF9JZEVycm9yLFxuXHRJZEV4cG9ydHMgPSBuZXcgSWRlbnRpZmllcignZXhwb3J0cycpLFxuXHRJZEV4dHJhY3QgPSBuZXcgSWRlbnRpZmllcignXyQnKSxcblx0SWRGb2N1cyA9IG5ldyBJZGVudGlmaWVyKCdfJyksXG5cdC8vIFRPRE86RVM2IFNob3VsZG4ndCBuZWVkLCBqdXN0IHVzZSBhcnJvdyBmdW5jdGlvbnMuXG5cdElkTGV4aWNhbFRoaXMgPSBuZXcgSWRlbnRpZmllcignX3RoaXMnKSxcblx0SWRTdXBlciA9IG5ldyBJZGVudGlmaWVyKCdzdXBlcicpLFxuXHRMaXRFbXB0eUFycmF5ID0gbmV3IEFycmF5RXhwcmVzc2lvbihbXSksXG5cdExpdEVtcHR5U3RyaW5nID0gbmV3IExpdGVyYWwoJycpLFxuXHRMaXROdWxsID0gbmV3IExpdGVyYWwobnVsbCksXG5cdExpdFN0ckV4cG9ydHMgPSBuZXcgTGl0ZXJhbCgnZXhwb3J0cycpLFxuXHRMaXRTdHJUaHJvdyA9IG5ldyBMaXRlcmFsKCdBbiBlcnJvciBvY2N1cnJlZC4nKSxcblx0TGl0VHJ1ZSA9IG5ldyBMaXRlcmFsKHRydWUpLFxuXHRMaXRaZXJvID0gbmV3IExpdGVyYWwoMCksXG5cdFJldHVybkJ1aWx0ID0gbmV3IFJldHVyblN0YXRlbWVudChJZEJ1aWx0KSxcblx0UmV0dXJuRXhwb3J0cyA9IG5ldyBSZXR1cm5TdGF0ZW1lbnQoSWRFeHBvcnRzKSxcblx0UmV0dXJuUmVzID0gbmV3IFJldHVyblN0YXRlbWVudChuZXcgSWRlbnRpZmllcigncmVzJykpLFxuXHRTd2l0Y2hDYXNlTm9NYXRjaCA9IG5ldyBTd2l0Y2hDYXNlKHVuZGVmaW5lZCwgW1xuXHRcdHRocm93RXJyb3JGcm9tU3RyaW5nKCdObyBicmFuY2ggb2YgYHN3aXRjaGAgbWF0Y2hlcy4nKV0pLFxuXHRTeW1ib2xJdGVyYXRvciA9IG1lbWJlcihuZXcgSWRlbnRpZmllcignU3ltYm9sJyksICdpdGVyYXRvcicpLFxuXHRUaHJvd0Fzc2VydEZhaWwgPSB0aHJvd0Vycm9yRnJvbVN0cmluZygnQXNzZXJ0aW9uIGZhaWxlZC4nKSxcblx0VGhyb3dOb0Nhc2VNYXRjaCA9IHRocm93RXJyb3JGcm9tU3RyaW5nKCdObyBicmFuY2ggb2YgYGNhc2VgIG1hdGNoZXMuJyksXG5cdFVzZVN0cmljdCA9IG5ldyBFeHByZXNzaW9uU3RhdGVtZW50KG5ldyBMaXRlcmFsKCd1c2Ugc3RyaWN0JykpLFxuXG5cdEFycmF5U2xpY2VDYWxsID0gbWVtYmVyKG1lbWJlcihMaXRFbXB0eUFycmF5LCAnc2xpY2UnKSwgJ2NhbGwnKSxcblx0Ly8gaWYgKHR5cGVvZiBkZWZpbmUgIT09ICdmdW5jdGlvbicpIHZhciBkZWZpbmUgPSByZXF1aXJlKCdhbWRlZmluZScpKG1vZHVsZSlcblx0QW1kZWZpbmVIZWFkZXIgPSBuZXcgSWZTdGF0ZW1lbnQoXG5cdFx0bmV3IEJpbmFyeUV4cHJlc3Npb24oJyE9PScsXG5cdFx0XHRuZXcgVW5hcnlFeHByZXNzaW9uKCd0eXBlb2YnLCBJZERlZmluZSksXG5cdFx0XHRuZXcgTGl0ZXJhbCgnZnVuY3Rpb24nKSksXG5cdFx0bmV3IFZhcmlhYmxlRGVjbGFyYXRpb24oJ3ZhcicsIFtcblx0XHRcdG5ldyBWYXJpYWJsZURlY2xhcmF0b3IoSWREZWZpbmUsIG5ldyBDYWxsRXhwcmVzc2lvbihcblx0XHRcdFx0bmV3IENhbGxFeHByZXNzaW9uKG5ldyBJZGVudGlmaWVyKCdyZXF1aXJlJyksIFtuZXcgTGl0ZXJhbCgnYW1kZWZpbmUnKV0pLFxuXHRcdFx0XHRbbmV3IElkZW50aWZpZXIoJ21vZHVsZScpXSkpXSkpLFxuXHREZWNsYXJlQnVpbHRCYWcgPSBuZXcgVmFyaWFibGVEZWNsYXJhdGlvbignY29uc3QnLFxuXHRcdFtuZXcgVmFyaWFibGVEZWNsYXJhdG9yKElkQnVpbHQsIExpdEVtcHR5QXJyYXkpXSksXG5cdERlY2xhcmVCdWlsdE1hcCA9IG5ldyBWYXJpYWJsZURlY2xhcmF0aW9uKCdjb25zdCcsIFtcblx0XHRuZXcgVmFyaWFibGVEZWNsYXJhdG9yKElkQnVpbHQsXG5cdFx0XHRuZXcgTmV3RXhwcmVzc2lvbihtZW1iZXIobmV3IElkZW50aWZpZXIoJ2dsb2JhbCcpLCAnTWFwJyksIFtdKSldKSxcblx0RGVjbGFyZUJ1aWx0T2JqID0gbmV3IFZhcmlhYmxlRGVjbGFyYXRpb24oJ2NvbnN0JywgW1xuXHRcdG5ldyBWYXJpYWJsZURlY2xhcmF0b3IoSWRCdWlsdCwgbmV3IE9iamVjdEV4cHJlc3Npb24oW10pKV0pLFxuXHREZWNsYXJlTGV4aWNhbFRoaXMgPSBuZXcgVmFyaWFibGVEZWNsYXJhdGlvbignY29uc3QnLFxuXHRcdFtuZXcgVmFyaWFibGVEZWNsYXJhdG9yKElkTGV4aWNhbFRoaXMsIG5ldyBUaGlzRXhwcmVzc2lvbigpKV0pLFxuXHRFeHBvcnRzRGVmYXVsdCA9IG1lbWJlcihJZEV4cG9ydHMsICdkZWZhdWx0JyksXG5cdEV4cG9ydHNHZXQgPSBtZW1iZXIoSWRFeHBvcnRzLCAnX2dldCcpXG4iXSwic291cmNlUm9vdCI6Ii9zcmMifQ==
