if (typeof define !== 'function') var define = require('amdefine')(module);define(['exports', './util'], function (exports, _util) {
	'use strict';

	Object.defineProperty(exports, '__esModule', {
		value: true
	});

	class VerifyResults {
		constructor() {
			// LocalAccess -> LocalDeclare.
			// Needed because lazy accesses must be compiled differently.
			this.localAccessToDeclare = new Map();
			// LocalDeclare -> VrLocalInfo.
			// Debug locals will not be output if not in debug mode.
			this.localDeclareToInfo = new Map();
			// TODO:ES6 Can use do `export { a, b, ... }` at the end, so shouldn't need this.
			// Includes both Assigns and AssignDestructures.
			this.exportAssigns = new Set();
		}

		isDebugLocal(localDeclare) {
			return this.localDeclareToInfo.get(localDeclare).isInDebug;
		}

		isAccessed(localDeclare) {
			const info = this.localDeclareToInfo.get(localDeclare);
			return !((0, _util.isEmpty)(info.debugAccesses) && (0, _util.isEmpty)(info.nonDebugAccesses));
		}

		isExportAssign(assign) {
			return this.exportAssigns.has(assign);
		}

		localDeclareForAccess(localAccess) {
			return this.localAccessToDeclare.get(localAccess);
		}
	}

	exports.default = VerifyResults;

	class LocalInfo {
		static empty(isInDebug) {
			return new LocalInfo(isInDebug, [], []);
		}

		constructor(isInDebug, /* Boolean */
		debugAccesses, /* LocalAccess */
		nonDebugAccesses /* Array[LocalAccess] */) {
			this.isInDebug = isInDebug;
			this.debugAccesses = debugAccesses;
			this.nonDebugAccesses = nonDebugAccesses;
		}
	}

	exports.LocalInfo = LocalInfo;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlZlcmlmeVJlc3VsdHMuanMiLCJwcml2YXRlL1ZlcmlmeVJlc3VsdHMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7QUNFZSxPQUFNLGFBQWEsQ0FBQztBQUNsQyxhQUFXLEdBQUc7OztBQUdiLE9BQUksQ0FBQyxvQkFBb0IsR0FBRyxJQUFJLEdBQUcsRUFBRSxDQUFBOzs7QUFHckMsT0FBSSxDQUFDLGtCQUFrQixHQUFHLElBQUksR0FBRyxFQUFFLENBQUE7OztBQUduQyxPQUFJLENBQUMsYUFBYSxHQUFHLElBQUksR0FBRyxFQUFFLENBQUE7R0FDOUI7O0FBRUQsY0FBWSxDQUFDLFlBQVksRUFBRTtBQUMxQixVQUFPLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLENBQUMsU0FBUyxDQUFBO0dBQzFEOztBQUVELFlBQVUsQ0FBQyxZQUFZLEVBQUU7QUFDeEIsU0FBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQTtBQUN0RCxVQUFPLEVBQUUsVUFyQkYsT0FBTyxFQXFCRyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksVUFyQmpDLE9BQU8sRUFxQmtDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFBLEFBQUMsQ0FBQTtHQUN2RTs7QUFFRCxnQkFBYyxDQUFDLE1BQU0sRUFBRTtBQUN0QixVQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFBO0dBQ3JDOztBQUVELHVCQUFxQixDQUFDLFdBQVcsRUFBRTtBQUNsQyxVQUFPLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUE7R0FDakQ7RUFDRDs7bUJBN0JvQixhQUFhOztBQStCM0IsT0FBTSxTQUFTLENBQUM7QUFDdEIsU0FBTyxLQUFLLENBQUMsU0FBUyxFQUFFO0FBQ3ZCLFVBQU8sSUFBSSxTQUFTLENBQUMsU0FBUyxFQUFFLEVBQUcsRUFBRSxFQUFHLENBQUMsQ0FBQTtHQUN6Qzs7QUFFRCxhQUFXLENBQ1YsU0FBUztBQUNULGVBQWE7QUFDYixrQkFBZ0IsMkJBQTJCO0FBQzNDLE9BQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFBO0FBQzFCLE9BQUksQ0FBQyxhQUFhLEdBQUcsYUFBYSxDQUFBO0FBQ2xDLE9BQUksQ0FBQyxnQkFBZ0IsR0FBRyxnQkFBZ0IsQ0FBQTtHQUN4QztFQUNEIiwiZmlsZSI6InByaXZhdGUvVmVyaWZ5UmVzdWx0cy5qcyIsInNvdXJjZXNDb250ZW50IjpbbnVsbCwiaW1wb3J0IHsgaXNFbXB0eSB9IGZyb20gJy4vdXRpbCdcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVmVyaWZ5UmVzdWx0cyB7XG5cdGNvbnN0cnVjdG9yKCkge1xuXHRcdC8vIExvY2FsQWNjZXNzIC0+IExvY2FsRGVjbGFyZS5cblx0XHQvLyBOZWVkZWQgYmVjYXVzZSBsYXp5IGFjY2Vzc2VzIG11c3QgYmUgY29tcGlsZWQgZGlmZmVyZW50bHkuXG5cdFx0dGhpcy5sb2NhbEFjY2Vzc1RvRGVjbGFyZSA9IG5ldyBNYXAoKVxuXHRcdC8vIExvY2FsRGVjbGFyZSAtPiBWckxvY2FsSW5mby5cblx0XHQvLyBEZWJ1ZyBsb2NhbHMgd2lsbCBub3QgYmUgb3V0cHV0IGlmIG5vdCBpbiBkZWJ1ZyBtb2RlLlxuXHRcdHRoaXMubG9jYWxEZWNsYXJlVG9JbmZvID0gbmV3IE1hcCgpXG5cdFx0Ly8gVE9ETzpFUzYgQ2FuIHVzZSBkbyBgZXhwb3J0IHsgYSwgYiwgLi4uIH1gIGF0IHRoZSBlbmQsIHNvIHNob3VsZG4ndCBuZWVkIHRoaXMuXG5cdFx0Ly8gSW5jbHVkZXMgYm90aCBBc3NpZ25zIGFuZCBBc3NpZ25EZXN0cnVjdHVyZXMuXG5cdFx0dGhpcy5leHBvcnRBc3NpZ25zID0gbmV3IFNldCgpXG5cdH1cblxuXHRpc0RlYnVnTG9jYWwobG9jYWxEZWNsYXJlKSB7XG5cdFx0cmV0dXJuIHRoaXMubG9jYWxEZWNsYXJlVG9JbmZvLmdldChsb2NhbERlY2xhcmUpLmlzSW5EZWJ1Z1xuXHR9XG5cblx0aXNBY2Nlc3NlZChsb2NhbERlY2xhcmUpIHtcblx0XHRjb25zdCBpbmZvID0gdGhpcy5sb2NhbERlY2xhcmVUb0luZm8uZ2V0KGxvY2FsRGVjbGFyZSlcblx0XHRyZXR1cm4gIShpc0VtcHR5KGluZm8uZGVidWdBY2Nlc3NlcykgJiYgaXNFbXB0eShpbmZvLm5vbkRlYnVnQWNjZXNzZXMpKVxuXHR9XG5cblx0aXNFeHBvcnRBc3NpZ24oYXNzaWduKSB7XG5cdFx0cmV0dXJuIHRoaXMuZXhwb3J0QXNzaWducy5oYXMoYXNzaWduKVxuXHR9XG5cblx0bG9jYWxEZWNsYXJlRm9yQWNjZXNzKGxvY2FsQWNjZXNzKSB7XG5cdFx0cmV0dXJuIHRoaXMubG9jYWxBY2Nlc3NUb0RlY2xhcmUuZ2V0KGxvY2FsQWNjZXNzKVxuXHR9XG59XG5cbmV4cG9ydCBjbGFzcyBMb2NhbEluZm8ge1xuXHRzdGF0aWMgZW1wdHkoaXNJbkRlYnVnKSB7XG5cdFx0cmV0dXJuIG5ldyBMb2NhbEluZm8oaXNJbkRlYnVnLCBbIF0sIFsgXSlcblx0fVxuXG5cdGNvbnN0cnVjdG9yKFxuXHRcdGlzSW5EZWJ1ZyAvKiBCb29sZWFuICovLFxuXHRcdGRlYnVnQWNjZXNzZXMgLyogTG9jYWxBY2Nlc3MgKi8sXG5cdFx0bm9uRGVidWdBY2Nlc3NlcyAvKiBBcnJheVtMb2NhbEFjY2Vzc10gKi8pIHtcblx0XHR0aGlzLmlzSW5EZWJ1ZyA9IGlzSW5EZWJ1Z1xuXHRcdHRoaXMuZGVidWdBY2Nlc3NlcyA9IGRlYnVnQWNjZXNzZXNcblx0XHR0aGlzLm5vbkRlYnVnQWNjZXNzZXMgPSBub25EZWJ1Z0FjY2Vzc2VzXG5cdH1cbn1cbiJdLCJzb3VyY2VSb290IjoiL3NyYyJ9