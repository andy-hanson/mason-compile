{"version":3,"sources":["private/parse/parse.js","private/parse/parse.ts"],"names":[],"mappings":"AAAA,CAAC,UAAU,OAAV,EAAmB;AAChB,QAAI,OAAO,MAAP,KAAkB,QAAlB,IAA8B,OAAO,OAAO,OAAP,KAAmB,QAA1B,EAAoC;AAClE,YAAI,IAAI,QAAQ,OAAR,EAAiB,OAAjB,CAAJ,CAD8D,IAC3B,MAAM,SAAN,EAAiB,OAAO,OAAP,GAAiB,CAAjB,CAArB;KADvC,MAGK,IAAI,OAAO,MAAP,KAAkB,UAAlB,IAAgC,OAAO,GAAP,EAAY;AACjD,eAAO,CAAC,SAAD,EAAY,SAAZ,EAAuB,eAAvB,EAAwC,SAAxC,CAAP,EAA2D,OAA3D,EADiD;KAAhD;CAJR,CAAD,CAOG,UAAU,OAAV,EAAmB,OAAnB,EAA4B;AAC3B,iBAD2B;;ACL/B,UAAA,gBAAA,QAAwB,eAAxB,CAAA,CDK+B;ACJ/B,UAAA,UAAA,QAAoB,SAApB,CAAA,CDI+B;ACW/B,aAAA,KAAA,CAA8B,SAA9B,EAAmD;AAClD,eAAO,cAAA,OAAA,CAAY,QAAA,KAAA,CAAM,EAAN,CAAS,SAAT,CAAZ,CAAP,CADkD;KAAnD;AAAA,WAAA,cAAA,CAAA,OAAA,EAAA,YAAA,EAAA,EAAA,OAAA,IAAA,EAAA,EDX+B;AAQ3B,YAAQ,OAAR,GAAkB,KAAlB,CAR2B;CAA5B,CAPH","file":"private/parse/parse.js","sourcesContent":["(function (factory) {\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === 'function' && define.amd) {\n        define([\"require\", \"exports\", './parseModule', './Slice'], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    const parseModule_1 = require('./parseModule');\n    const Slice_1 = require('./Slice');\n    function parse(rootToken) {\n        return parseModule_1.default(Slice_1.Lines.of(rootToken));\n    }\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = parse;\n});\n","import Module from '../ast/Module'\nimport {GroupBlock} from '../token/Group'\nimport parseModule from './parseModule'\nimport {Lines} from './Slice'\n\n/**\nThis converts a Token tree to a MsAst.\nThis is a simple and very efficient recursive-descent parser, thanks to two facts:\n\t* We have already grouped tokens.\n\t\tThe parser need not worry about looking for a `]`; the grouping has already been handled.\n\t\tThe only state the parser needs to track (aside from the callstack)\n\t\tis the current [[Slice]] of tokens being handled.\n\t* Most of the time, an AST's type is determined by the first token. (Prefix notation)\n\nThere are exceptions such as assignment statements (indicated by a `=` somewhere in the middle).\nFor those we must iterate through tokens and split.\n(See [[Slice#opSplitOnce]] and [[Slice#opSplitMany]].)\n*/\nexport default function parse(rootToken: GroupBlock): Module {\n\treturn parseModule(Lines.of(rootToken))\n}\n"],"sourceRoot":"/source/"}