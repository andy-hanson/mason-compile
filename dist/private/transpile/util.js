if (typeof define !== 'function') var define = require('amdefine')(module);define(['exports', 'esast/dist/ast', 'esast/dist/mangle-identifier', '../util', './ms-call', './transpile'], function (exports, _esastDistAst, _esastDistMangleIdentifier, _util, _msCall, _transpile) {
	'use strict';

	Object.defineProperty(exports, '__esModule', {
		value: true
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _mangleIdentifier = _interopRequireDefault(_esastDistMangleIdentifier);

	// Define this here to avoid circular dependency with ast-constants.
	const _IdError = new _esastDistAst.Identifier('Error');

	exports._IdError = _IdError;
	const accessLocalDeclare = localDeclare => {
		const id = idForDeclareCached(localDeclare);
		return localDeclare.isLazy() ? (0, _msCall.msUnlazy)(id) : new _esastDistAst.Identifier(id.name);
	},
	      declare = (localDeclare, val) => new _esastDistAst.VariableDeclaration('const', [new _esastDistAst.VariableDeclarator(idForDeclareCached(localDeclare), val)]),
	      forStatementInfinite = body => new _esastDistAst.ForStatement(null, null, null, body),
	      idForDeclareCached = localDeclare => {
		let _ = declareToId.get(localDeclare);
		if (_ === undefined) {
			_ = new _esastDistAst.Identifier((0, _mangleIdentifier.default)(localDeclare.name));
			declareToId.set(localDeclare, _);
		}
		return _;
	},
	      opTypeCheckForLocalDeclare = localDeclare =>
	// TODO: Way to typecheck lazies
	(0, _util.opIf)(!localDeclare.isLazy(), () => (0, _util.opMap)(localDeclare.opType, type => new _esastDistAst.ExpressionStatement((0, _msCall.msCheckContains)((0, _transpile.t0)(type), accessLocalDeclare(localDeclare), new _esastDistAst.Literal(localDeclare.name))))),
	      throwErrorFromString = msg => new _esastDistAst.ThrowStatement(new _esastDistAst.NewExpression(_IdError, [new _esastDistAst.Literal(msg)]));

	exports.accessLocalDeclare = accessLocalDeclare;
	exports.declare = declare;
	exports.forStatementInfinite = forStatementInfinite;
	exports.idForDeclareCached = idForDeclareCached;
	exports.opTypeCheckForLocalDeclare = opTypeCheckForLocalDeclare;
	exports.throwErrorFromString = throwErrorFromString;
	const declareToId = new WeakMap();
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInV0aWwuanMiLCJwcml2YXRlL3RyYW5zcGlsZS91dGlsLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7QUNRTyxPQUFNLFFBQVEsR0FBRyxrQkFSbUIsVUFBVSxDQVFkLE9BQU8sQ0FBQyxDQUFBOzs7QUFFeEMsT0FDTixrQkFBa0IsR0FBRyxZQUFZLElBQUk7QUFDcEMsUUFBTSxFQUFFLEdBQUcsa0JBQWtCLENBQUMsWUFBWSxDQUFDLENBQUE7QUFDM0MsU0FBTyxZQUFZLENBQUMsTUFBTSxFQUFFLEdBQUcsWUFUUixRQUFRLEVBU1MsRUFBRSxDQUFDLEdBQUcsa0JBYkwsVUFBVSxDQWFVLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQTtFQUNyRTtPQUVELE9BQU8sR0FBRyxDQUFDLFlBQVksRUFBRSxHQUFHLEtBQzNCLGtCQWhCbUIsbUJBQW1CLENBZ0JkLE9BQU8sRUFDOUIsQ0FBQyxrQkFqQkgsa0JBQWtCLENBaUJRLGtCQUFrQixDQUFDLFlBQVksQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7T0FFbEUsb0JBQW9CLEdBQUcsSUFBSSxJQUMxQixrQkFyQjJCLFlBQVksQ0FxQnRCLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQztPQUV6QyxrQkFBa0IsR0FBRyxZQUFZLElBQUk7QUFDcEMsTUFBSSxDQUFDLEdBQUcsV0FBVyxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQTtBQUNyQyxNQUFJLENBQUMsS0FBSyxTQUFTLEVBQUU7QUFDcEIsSUFBQyxHQUFHLGtCQTFCb0MsVUFBVSxDQTBCL0IsK0JBQWlCLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFBO0FBQ3ZELGNBQVcsQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQyxDQUFBO0dBQ2hDO0FBQ0QsU0FBTyxDQUFDLENBQUE7RUFDUjtPQUVELDBCQUEwQixHQUFHLFlBQVk7O0FBRXhDLFdBL0JNLElBQUksRUErQkwsQ0FBQyxZQUFZLENBQUMsTUFBTSxFQUFFLEVBQUUsTUFDNUIsVUFoQ1csS0FBSyxFQWdDVixZQUFZLENBQUMsTUFBTSxFQUFFLElBQUksSUFDOUIsa0JBcENJLG1CQUFtQixDQW9DQyxZQWhDcEIsZUFBZSxFQWlDbEIsZUFoQ0csRUFBRSxFQWdDRixJQUFJLENBQUMsRUFDUixrQkFBa0IsQ0FBQyxZQUFZLENBQUMsRUFDaEMsa0JBdkNrRCxPQUFPLENBdUM3QyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7T0FFdEMsb0JBQW9CLEdBQUcsR0FBRyxJQUN6QixrQkExQzZFLGNBQWMsQ0EwQ3hFLGtCQTFDMkMsYUFBYSxDQTBDdEMsUUFBUSxFQUFFLENBQUMsa0JBMUNLLE9BQU8sQ0EwQ0EsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7Ozs7Ozs7O0FBRXJFLE9BQ0MsV0FBVyxHQUFHLElBQUksT0FBTyxFQUFFLENBQUEiLCJmaWxlIjoicHJpdmF0ZS90cmFuc3BpbGUvdXRpbC5qcyIsInNvdXJjZXNDb250ZW50IjpbbnVsbCwiaW1wb3J0IHtFeHByZXNzaW9uU3RhdGVtZW50LCBGb3JTdGF0ZW1lbnQsIElkZW50aWZpZXIsIExpdGVyYWwsIE5ld0V4cHJlc3Npb24sIFRocm93U3RhdGVtZW50LFxuXHRWYXJpYWJsZURlY2xhcmF0b3IsIFZhcmlhYmxlRGVjbGFyYXRpb259IGZyb20gJ2VzYXN0L2Rpc3QvYXN0J1xuaW1wb3J0IG1hbmdsZUlkZW50aWZpZXIgZnJvbSAnZXNhc3QvZGlzdC9tYW5nbGUtaWRlbnRpZmllcidcbmltcG9ydCB7b3BJZiwgb3BNYXB9IGZyb20gJy4uL3V0aWwnXG5pbXBvcnQge21zQ2hlY2tDb250YWlucywgbXNVbmxhenl9IGZyb20gJy4vbXMtY2FsbCdcbmltcG9ydCB7dDB9IGZyb20gJy4vdHJhbnNwaWxlJ1xuXG4vLyBEZWZpbmUgdGhpcyBoZXJlIHRvIGF2b2lkIGNpcmN1bGFyIGRlcGVuZGVuY3kgd2l0aCBhc3QtY29uc3RhbnRzLlxuZXhwb3J0IGNvbnN0IF9JZEVycm9yID0gbmV3IElkZW50aWZpZXIoJ0Vycm9yJylcblxuZXhwb3J0IGNvbnN0XG5cdGFjY2Vzc0xvY2FsRGVjbGFyZSA9IGxvY2FsRGVjbGFyZSA9PiB7XG5cdFx0Y29uc3QgaWQgPSBpZEZvckRlY2xhcmVDYWNoZWQobG9jYWxEZWNsYXJlKVxuXHRcdHJldHVybiBsb2NhbERlY2xhcmUuaXNMYXp5KCkgPyBtc1VubGF6eShpZCkgOiBuZXcgSWRlbnRpZmllcihpZC5uYW1lKVxuXHR9LFxuXG5cdGRlY2xhcmUgPSAobG9jYWxEZWNsYXJlLCB2YWwpID0+XG5cdFx0bmV3IFZhcmlhYmxlRGVjbGFyYXRpb24oJ2NvbnN0Jyxcblx0XHRcdFtuZXcgVmFyaWFibGVEZWNsYXJhdG9yKGlkRm9yRGVjbGFyZUNhY2hlZChsb2NhbERlY2xhcmUpLCB2YWwpXSksXG5cblx0Zm9yU3RhdGVtZW50SW5maW5pdGUgPSBib2R5ID0+XG5cdFx0bmV3IEZvclN0YXRlbWVudChudWxsLCBudWxsLCBudWxsLCBib2R5KSxcblxuXHRpZEZvckRlY2xhcmVDYWNoZWQgPSBsb2NhbERlY2xhcmUgPT4ge1xuXHRcdGxldCBfID0gZGVjbGFyZVRvSWQuZ2V0KGxvY2FsRGVjbGFyZSlcblx0XHRpZiAoXyA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRfID0gbmV3IElkZW50aWZpZXIobWFuZ2xlSWRlbnRpZmllcihsb2NhbERlY2xhcmUubmFtZSkpXG5cdFx0XHRkZWNsYXJlVG9JZC5zZXQobG9jYWxEZWNsYXJlLCBfKVxuXHRcdH1cblx0XHRyZXR1cm4gX1xuXHR9LFxuXG5cdG9wVHlwZUNoZWNrRm9yTG9jYWxEZWNsYXJlID0gbG9jYWxEZWNsYXJlID0+XG5cdFx0Ly8gVE9ETzogV2F5IHRvIHR5cGVjaGVjayBsYXppZXNcblx0XHRvcElmKCFsb2NhbERlY2xhcmUuaXNMYXp5KCksICgpID0+XG5cdFx0XHRvcE1hcChsb2NhbERlY2xhcmUub3BUeXBlLCB0eXBlID0+XG5cdFx0XHRcdG5ldyBFeHByZXNzaW9uU3RhdGVtZW50KG1zQ2hlY2tDb250YWlucyhcblx0XHRcdFx0XHR0MCh0eXBlKSxcblx0XHRcdFx0XHRhY2Nlc3NMb2NhbERlY2xhcmUobG9jYWxEZWNsYXJlKSxcblx0XHRcdFx0XHRuZXcgTGl0ZXJhbChsb2NhbERlY2xhcmUubmFtZSkpKSkpLFxuXG5cdHRocm93RXJyb3JGcm9tU3RyaW5nID0gbXNnID0+XG5cdFx0bmV3IFRocm93U3RhdGVtZW50KG5ldyBOZXdFeHByZXNzaW9uKF9JZEVycm9yLCBbbmV3IExpdGVyYWwobXNnKV0pKVxuXG5jb25zdFxuXHRkZWNsYXJlVG9JZCA9IG5ldyBXZWFrTWFwKClcbiJdLCJzb3VyY2VSb290IjoiL3NyYyJ9
