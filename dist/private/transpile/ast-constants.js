if (typeof define !== 'function') var define = require('amdefine')(module);define(['exports', 'esast/dist/ast', 'esast/dist/util', './util'], function (exports, _esastDistAst, _esastDistUtil, _util) {
	'use strict';

	Object.defineProperty(exports, '__esModule', {
		value: true
	});
	const GlobalError = new _esastDistAst.Identifier('Error'),
	      IdArguments = new _esastDistAst.Identifier('arguments'),
	      IdBuilt = new _esastDistAst.Identifier('built'),
	      IdDefine = new _esastDistAst.Identifier('define'),
	      IdError = _util._IdError,
	      IdExports = new _esastDistAst.Identifier('exports'),
	      IdExtract = new _esastDistAst.Identifier('_$'),
	      IdFocus = new _esastDistAst.Identifier('_'),
	     
	// TODO:ES6 Shouldn't need, just use arrow functions.
	IdLexicalThis = new _esastDistAst.Identifier('_this'),
	      IdSuper = new _esastDistAst.Identifier('super'),
	      LitEmptyArray = new _esastDistAst.ArrayExpression([]),
	      LitEmptyString = new _esastDistAst.Literal(''),
	      LitNull = new _esastDistAst.Literal(null),
	      LitStrExports = new _esastDistAst.Literal('exports'),
	      LitStrThrow = new _esastDistAst.Literal('An error occurred.'),
	      LitTrue = new _esastDistAst.Literal(true),
	      LitZero = new _esastDistAst.Literal(0),
	      ReturnBuilt = new _esastDistAst.ReturnStatement(IdBuilt),
	      ReturnExports = new _esastDistAst.ReturnStatement(IdExports),
	      SwitchCaseNoMatch = new _esastDistAst.SwitchCase(undefined, [(0, _util.throwErrorFromString)('No branch of `switch` matches.')]),
	      SymbolIterator = (0, _esastDistUtil.member)(new _esastDistAst.Identifier('Symbol'), 'iterator'),
	      ThrowAssertFail = (0, _util.throwErrorFromString)('Assertion failed.'),
	      ThrowNoCaseMatch = (0, _util.throwErrorFromString)('No branch of `case` matches.'),
	      UseStrict = new _esastDistAst.ExpressionStatement(new _esastDistAst.Literal('use strict')),
	      ArraySliceCall = (0, _esastDistUtil.member)((0, _esastDistUtil.member)(LitEmptyArray, 'slice'), 'call'),
	     
	// if (typeof define !== 'function') var define = require('amdefine')(module)
	AmdefineHeader = new _esastDistAst.IfStatement(new _esastDistAst.BinaryExpression('!==', new _esastDistAst.UnaryExpression('typeof', IdDefine), new _esastDistAst.Literal('function')), new _esastDistAst.VariableDeclaration('var', [new _esastDistAst.VariableDeclarator(IdDefine, new _esastDistAst.CallExpression(new _esastDistAst.CallExpression(new _esastDistAst.Identifier('require'), [new _esastDistAst.Literal('amdefine')]), [new _esastDistAst.Identifier('module')]))])),
	      DeclareBuiltBag = new _esastDistAst.VariableDeclaration('const', [new _esastDistAst.VariableDeclarator(IdBuilt, LitEmptyArray)]),
	      DeclareBuiltMap = new _esastDistAst.VariableDeclaration('const', [new _esastDistAst.VariableDeclarator(IdBuilt, new _esastDistAst.NewExpression((0, _esastDistUtil.member)(new _esastDistAst.Identifier('global'), 'Map'), []))]),
	      DeclareBuiltObj = new _esastDistAst.VariableDeclaration('const', [new _esastDistAst.VariableDeclarator(IdBuilt, new _esastDistAst.ObjectExpression([]))]),
	      DeclareLexicalThis = new _esastDistAst.VariableDeclaration('const', [new _esastDistAst.VariableDeclarator(IdLexicalThis, new _esastDistAst.ThisExpression())]),
	      ExportsDefault = (0, _esastDistUtil.member)(IdExports, 'default'),
	      ExportsGet = (0, _esastDistUtil.member)(IdExports, '_get');
	exports.GlobalError = GlobalError;
	exports.IdArguments = IdArguments;
	exports.IdBuilt = IdBuilt;
	exports.IdDefine = IdDefine;
	exports.IdError = IdError;
	exports.IdExports = IdExports;
	exports.IdExtract = IdExtract;
	exports.IdFocus = IdFocus;
	exports.IdLexicalThis = IdLexicalThis;
	exports.IdSuper = IdSuper;
	exports.LitEmptyArray = LitEmptyArray;
	exports.LitEmptyString = LitEmptyString;
	exports.LitNull = LitNull;
	exports.LitStrExports = LitStrExports;
	exports.LitStrThrow = LitStrThrow;
	exports.LitTrue = LitTrue;
	exports.LitZero = LitZero;
	exports.ReturnBuilt = ReturnBuilt;
	exports.ReturnExports = ReturnExports;
	exports.SwitchCaseNoMatch = SwitchCaseNoMatch;
	exports.SymbolIterator = SymbolIterator;
	exports.ThrowAssertFail = ThrowAssertFail;
	exports.ThrowNoCaseMatch = ThrowNoCaseMatch;
	exports.UseStrict = UseStrict;
	exports.ArraySliceCall = ArraySliceCall;
	exports.AmdefineHeader = AmdefineHeader;
	exports.DeclareBuiltBag = DeclareBuiltBag;
	exports.DeclareBuiltMap = DeclareBuiltMap;
	exports.DeclareBuiltObj = DeclareBuiltObj;
	exports.DeclareLexicalThis = DeclareLexicalThis;
	exports.ExportsDefault = ExportsDefault;
	exports.ExportsGet = ExportsGet;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzdC1jb25zdGFudHMuanMiLCJwcml2YXRlL3RyYW5zcGlsZS9hc3QtY29uc3RhbnRzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7QUNNTyxPQUNOLFdBQVcsR0FBRyxrQkFQaUUsVUFBVSxDQU81RCxPQUFPLENBQUM7T0FDckMsV0FBVyxHQUFHLGtCQVJpRSxVQUFVLENBUTVELFdBQVcsQ0FBQztPQUN6QyxPQUFPLEdBQUcsa0JBVHFFLFVBQVUsQ0FTaEUsT0FBTyxDQUFDO09BQ2pDLFFBQVEsR0FBRyxrQkFWb0UsVUFBVSxDQVUvRCxRQUFRLENBQUM7T0FDbkMsT0FBTyxTQVBBLFFBQVEsQUFPRztPQUNsQixTQUFTLEdBQUcsa0JBWm1FLFVBQVUsQ0FZOUQsU0FBUyxDQUFDO09BQ3JDLFNBQVMsR0FBRyxrQkFibUUsVUFBVSxDQWE5RCxJQUFJLENBQUM7T0FDaEMsT0FBTyxHQUFHLGtCQWRxRSxVQUFVLENBY2hFLEdBQUcsQ0FBQzs7O0FBRTdCLGNBQWEsR0FBRyxrQkFoQitELFVBQVUsQ0FnQjFELE9BQU8sQ0FBQztPQUN2QyxPQUFPLEdBQUcsa0JBakJxRSxVQUFVLENBaUJoRSxPQUFPLENBQUM7T0FDakMsYUFBYSxHQUFHLGtCQWxCVCxlQUFlLENBa0JjLEVBQUUsQ0FBQztPQUN2QyxjQUFjLEdBQUcsa0JBbEJKLE9BQU8sQ0FrQlMsRUFBRSxDQUFDO09BQ2hDLE9BQU8sR0FBRyxrQkFuQkcsT0FBTyxDQW1CRSxJQUFJLENBQUM7T0FDM0IsYUFBYSxHQUFHLGtCQXBCSCxPQUFPLENBb0JRLFNBQVMsQ0FBQztPQUN0QyxXQUFXLEdBQUcsa0JBckJELE9BQU8sQ0FxQk0sb0JBQW9CLENBQUM7T0FDL0MsT0FBTyxHQUFHLGtCQXRCRyxPQUFPLENBc0JFLElBQUksQ0FBQztPQUMzQixPQUFPLEdBQUcsa0JBdkJHLE9BQU8sQ0F1QkUsQ0FBQyxDQUFDO09BQ3hCLFdBQVcsR0FBRyxrQkF4QnlDLGVBQWUsQ0F3QnBDLE9BQU8sQ0FBQztPQUMxQyxhQUFhLEdBQUcsa0JBekJ1QyxlQUFlLENBeUJsQyxTQUFTLENBQUM7T0FDOUMsaUJBQWlCLEdBQUcsa0JBMUJvRCxVQUFVLENBMEIvQyxTQUFTLEVBQUUsQ0FDN0MsVUF4QmdCLG9CQUFvQixFQXdCZixnQ0FBZ0MsQ0FBQyxDQUFDLENBQUM7T0FDekQsY0FBYyxHQUFHLG1CQTFCVixNQUFNLEVBMEJXLGtCQTdCdUQsVUFBVSxDQTZCbEQsUUFBUSxDQUFDLEVBQUUsVUFBVSxDQUFDO09BQzdELGVBQWUsR0FBRyxVQTFCRCxvQkFBb0IsRUEwQkUsbUJBQW1CLENBQUM7T0FDM0QsZ0JBQWdCLEdBQUcsVUEzQkYsb0JBQW9CLEVBMkJHLDhCQUE4QixDQUFDO09BQ3ZFLFNBQVMsR0FBRyxrQkFoQzhDLG1CQUFtQixDQWdDekMsa0JBL0J2QixPQUFPLENBK0I0QixZQUFZLENBQUMsQ0FBQztPQUU5RCxjQUFjLEdBQUcsbUJBL0JWLE1BQU0sRUErQlcsbUJBL0JqQixNQUFNLEVBK0JrQixhQUFhLEVBQUUsT0FBTyxDQUFDLEVBQUUsTUFBTSxDQUFDOzs7QUFFL0QsZUFBYyxHQUFHLGtCQW5DakIsV0FBVyxDQW9DVixrQkFyQ3VCLGdCQUFnQixDQXFDbEIsS0FBSyxFQUN6QixrQkFwQ2MsZUFBZSxDQW9DVCxRQUFRLEVBQUUsUUFBUSxDQUFDLEVBQ3ZDLGtCQXRDVyxPQUFPLENBc0NOLFVBQVUsQ0FBQyxDQUFDLEVBQ3pCLGtCQXRDZ0MsbUJBQW1CLENBc0MzQixLQUFLLEVBQUUsQ0FDOUIsa0JBdkNvRCxrQkFBa0IsQ0F1Qy9DLFFBQVEsRUFBRSxrQkF6Q08sY0FBYyxDQTBDckQsa0JBMUN1QyxjQUFjLENBMENsQyxrQkExQ3lELFVBQVUsQ0EwQ3BELFNBQVMsQ0FBQyxFQUFFLENBQUMsa0JBekNyQyxPQUFPLENBeUMwQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEVBQ3hFLENBQUMsa0JBM0MyRSxVQUFVLENBMkN0RSxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7T0FDbEMsZUFBZSxHQUFHLGtCQTFDZSxtQkFBbUIsQ0EwQ1YsT0FBTyxFQUNoRCxDQUFDLGtCQTNDb0Qsa0JBQWtCLENBMkMvQyxPQUFPLEVBQUUsYUFBYSxDQUFDLENBQUMsQ0FBQztPQUNsRCxlQUFlLEdBQUcsa0JBNUNlLG1CQUFtQixDQTRDVixPQUFPLEVBQUUsQ0FDbEQsa0JBN0NxRCxrQkFBa0IsQ0E2Q2hELE9BQU8sRUFDN0Isa0JBL0NvQixhQUFhLENBK0NmLG1CQTdDYixNQUFNLEVBNkNjLGtCQWhEb0QsVUFBVSxDQWdEL0MsUUFBUSxDQUFDLEVBQUUsS0FBSyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO09BQ25FLGVBQWUsR0FBRyxrQkEvQ2UsbUJBQW1CLENBK0NWLE9BQU8sRUFBRSxDQUNsRCxrQkFoRHFELGtCQUFrQixDQWdEaEQsT0FBTyxFQUFFLGtCQWpESSxnQkFBZ0IsQ0FpREMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO09BQzVELGtCQUFrQixHQUFHLGtCQWpEWSxtQkFBbUIsQ0FpRFAsT0FBTyxFQUNuRCxDQUFDLGtCQWxEb0Qsa0JBQWtCLENBa0QvQyxhQUFhLEVBQUUsa0JBbER4QyxjQUFjLEVBa0Q4QyxDQUFDLENBQUMsQ0FBQztPQUMvRCxjQUFjLEdBQUcsbUJBbERWLE1BQU0sRUFrRFcsU0FBUyxFQUFFLFNBQVMsQ0FBQztPQUM3QyxVQUFVLEdBQUcsbUJBbkROLE1BQU0sRUFtRE8sU0FBUyxFQUFFLE1BQU0sQ0FBQyxDQUFBIiwiZmlsZSI6InByaXZhdGUvdHJhbnNwaWxlL2FzdC1jb25zdGFudHMuanMiLCJzb3VyY2VzQ29udGVudCI6W251bGwsImltcG9ydCB7QXJyYXlFeHByZXNzaW9uLCBCaW5hcnlFeHByZXNzaW9uLCBDYWxsRXhwcmVzc2lvbiwgRXhwcmVzc2lvblN0YXRlbWVudCwgSWRlbnRpZmllcixcblx0SWZTdGF0ZW1lbnQsIExpdGVyYWwsIE5ld0V4cHJlc3Npb24sIE9iamVjdEV4cHJlc3Npb24sIFJldHVyblN0YXRlbWVudCwgU3dpdGNoQ2FzZSxcblx0VGhpc0V4cHJlc3Npb24sIFVuYXJ5RXhwcmVzc2lvbiwgVmFyaWFibGVEZWNsYXJhdGlvbiwgVmFyaWFibGVEZWNsYXJhdG9yfSBmcm9tICdlc2FzdC9kaXN0L2FzdCdcbmltcG9ydCB7bWVtYmVyfSBmcm9tICdlc2FzdC9kaXN0L3V0aWwnXG5pbXBvcnQge19JZEVycm9yLCB0aHJvd0Vycm9yRnJvbVN0cmluZ30gZnJvbSAnLi91dGlsJ1xuXG5leHBvcnQgY29uc3Rcblx0R2xvYmFsRXJyb3IgPSBuZXcgSWRlbnRpZmllcignRXJyb3InKSxcblx0SWRBcmd1bWVudHMgPSBuZXcgSWRlbnRpZmllcignYXJndW1lbnRzJyksXG5cdElkQnVpbHQgPSBuZXcgSWRlbnRpZmllcignYnVpbHQnKSxcblx0SWREZWZpbmUgPSBuZXcgSWRlbnRpZmllcignZGVmaW5lJyksXG5cdElkRXJyb3IgPSBfSWRFcnJvcixcblx0SWRFeHBvcnRzID0gbmV3IElkZW50aWZpZXIoJ2V4cG9ydHMnKSxcblx0SWRFeHRyYWN0ID0gbmV3IElkZW50aWZpZXIoJ18kJyksXG5cdElkRm9jdXMgPSBuZXcgSWRlbnRpZmllcignXycpLFxuXHQvLyBUT0RPOkVTNiBTaG91bGRuJ3QgbmVlZCwganVzdCB1c2UgYXJyb3cgZnVuY3Rpb25zLlxuXHRJZExleGljYWxUaGlzID0gbmV3IElkZW50aWZpZXIoJ190aGlzJyksXG5cdElkU3VwZXIgPSBuZXcgSWRlbnRpZmllcignc3VwZXInKSxcblx0TGl0RW1wdHlBcnJheSA9IG5ldyBBcnJheUV4cHJlc3Npb24oW10pLFxuXHRMaXRFbXB0eVN0cmluZyA9IG5ldyBMaXRlcmFsKCcnKSxcblx0TGl0TnVsbCA9IG5ldyBMaXRlcmFsKG51bGwpLFxuXHRMaXRTdHJFeHBvcnRzID0gbmV3IExpdGVyYWwoJ2V4cG9ydHMnKSxcblx0TGl0U3RyVGhyb3cgPSBuZXcgTGl0ZXJhbCgnQW4gZXJyb3Igb2NjdXJyZWQuJyksXG5cdExpdFRydWUgPSBuZXcgTGl0ZXJhbCh0cnVlKSxcblx0TGl0WmVybyA9IG5ldyBMaXRlcmFsKDApLFxuXHRSZXR1cm5CdWlsdCA9IG5ldyBSZXR1cm5TdGF0ZW1lbnQoSWRCdWlsdCksXG5cdFJldHVybkV4cG9ydHMgPSBuZXcgUmV0dXJuU3RhdGVtZW50KElkRXhwb3J0cyksXG5cdFN3aXRjaENhc2VOb01hdGNoID0gbmV3IFN3aXRjaENhc2UodW5kZWZpbmVkLCBbXG5cdFx0dGhyb3dFcnJvckZyb21TdHJpbmcoJ05vIGJyYW5jaCBvZiBgc3dpdGNoYCBtYXRjaGVzLicpXSksXG5cdFN5bWJvbEl0ZXJhdG9yID0gbWVtYmVyKG5ldyBJZGVudGlmaWVyKCdTeW1ib2wnKSwgJ2l0ZXJhdG9yJyksXG5cdFRocm93QXNzZXJ0RmFpbCA9IHRocm93RXJyb3JGcm9tU3RyaW5nKCdBc3NlcnRpb24gZmFpbGVkLicpLFxuXHRUaHJvd05vQ2FzZU1hdGNoID0gdGhyb3dFcnJvckZyb21TdHJpbmcoJ05vIGJyYW5jaCBvZiBgY2FzZWAgbWF0Y2hlcy4nKSxcblx0VXNlU3RyaWN0ID0gbmV3IEV4cHJlc3Npb25TdGF0ZW1lbnQobmV3IExpdGVyYWwoJ3VzZSBzdHJpY3QnKSksXG5cblx0QXJyYXlTbGljZUNhbGwgPSBtZW1iZXIobWVtYmVyKExpdEVtcHR5QXJyYXksICdzbGljZScpLCAnY2FsbCcpLFxuXHQvLyBpZiAodHlwZW9mIGRlZmluZSAhPT0gJ2Z1bmN0aW9uJykgdmFyIGRlZmluZSA9IHJlcXVpcmUoJ2FtZGVmaW5lJykobW9kdWxlKVxuXHRBbWRlZmluZUhlYWRlciA9IG5ldyBJZlN0YXRlbWVudChcblx0XHRuZXcgQmluYXJ5RXhwcmVzc2lvbignIT09Jyxcblx0XHRcdG5ldyBVbmFyeUV4cHJlc3Npb24oJ3R5cGVvZicsIElkRGVmaW5lKSxcblx0XHRcdG5ldyBMaXRlcmFsKCdmdW5jdGlvbicpKSxcblx0XHRuZXcgVmFyaWFibGVEZWNsYXJhdGlvbigndmFyJywgW1xuXHRcdFx0bmV3IFZhcmlhYmxlRGVjbGFyYXRvcihJZERlZmluZSwgbmV3IENhbGxFeHByZXNzaW9uKFxuXHRcdFx0XHRuZXcgQ2FsbEV4cHJlc3Npb24obmV3IElkZW50aWZpZXIoJ3JlcXVpcmUnKSwgW25ldyBMaXRlcmFsKCdhbWRlZmluZScpXSksXG5cdFx0XHRcdFtuZXcgSWRlbnRpZmllcignbW9kdWxlJyldKSldKSksXG5cdERlY2xhcmVCdWlsdEJhZyA9IG5ldyBWYXJpYWJsZURlY2xhcmF0aW9uKCdjb25zdCcsXG5cdFx0W25ldyBWYXJpYWJsZURlY2xhcmF0b3IoSWRCdWlsdCwgTGl0RW1wdHlBcnJheSldKSxcblx0RGVjbGFyZUJ1aWx0TWFwID0gbmV3IFZhcmlhYmxlRGVjbGFyYXRpb24oJ2NvbnN0JywgW1xuXHRcdG5ldyBWYXJpYWJsZURlY2xhcmF0b3IoSWRCdWlsdCxcblx0XHRcdG5ldyBOZXdFeHByZXNzaW9uKG1lbWJlcihuZXcgSWRlbnRpZmllcignZ2xvYmFsJyksICdNYXAnKSwgW10pKV0pLFxuXHREZWNsYXJlQnVpbHRPYmogPSBuZXcgVmFyaWFibGVEZWNsYXJhdGlvbignY29uc3QnLCBbXG5cdFx0bmV3IFZhcmlhYmxlRGVjbGFyYXRvcihJZEJ1aWx0LCBuZXcgT2JqZWN0RXhwcmVzc2lvbihbXSkpXSksXG5cdERlY2xhcmVMZXhpY2FsVGhpcyA9IG5ldyBWYXJpYWJsZURlY2xhcmF0aW9uKCdjb25zdCcsXG5cdFx0W25ldyBWYXJpYWJsZURlY2xhcmF0b3IoSWRMZXhpY2FsVGhpcywgbmV3IFRoaXNFeHByZXNzaW9uKCkpXSksXG5cdEV4cG9ydHNEZWZhdWx0ID0gbWVtYmVyKElkRXhwb3J0cywgJ2RlZmF1bHQnKSxcblx0RXhwb3J0c0dldCA9IG1lbWJlcihJZEV4cG9ydHMsICdfZ2V0JylcbiJdLCJzb3VyY2VSb290IjoiL3NyYyJ9
