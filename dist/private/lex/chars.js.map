{"version":3,"sources":["private/lex/chars.js","private/lex/chars.ts"],"names":[],"mappings":"AAAA,CAAC,UAAU,OAAO,EAAE;AAChB,QAAI,OAAO,MAAM,KAAK,QAAQ,IAAI,OAAO,MAAM,CAAC,OAAO,KAAK,QAAQ,EAAE;AAClE,YAAI,CAAC,GAAG,OAAO,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC,AAAC,IAAI,CAAC,KAAK,SAAS,EAAE,MAAM,CAAC,OAAO,GAAG,CAAC,CAAC;KAC9E,MACI,IAAI,OAAO,MAAM,KAAK,UAAU,IAAI,MAAM,CAAC,GAAG,EAAE;AACjD,cAAM,CAAC,CAAC,SAAS,EAAE,SAAS,EAAE,oBAAoB,CAAC,EAAE,OAAO,CAAC,CAAC;KACjE;CACJ,CAAA,CAAE,UAAU,OAAO,EAAE,OAAO,EAAE;AAC3B,gBAAY,CAAC;;ACPjB,QAAA,cAAA,GAAA,OAAA,CAAmB,oBAEnB,CAAC,CAFsC;AAEvC,aAAA,QAAA,CAAyB,IAAU,EAAA;AAClC,eAAO,cAAA,CAAA,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAA;KACtC;AAFe,WAAA,CAAA,QAAQ,GAAA,QAEvB,CAAA;AAED,aAAA,QAAA,CAAkB,KAAa,EAAyB;YAAvB,MAAM,yDAAY,KAAK;;AACvD,YAAI,GAAG,GAAG,gBAAgB,CAAA;AAC1B,aAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,EAC1C,GAAG,GAAG,CAAA,GAAG,GAAG,EAAA,KAAA,GAAQ,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC,EAAA,EAAA,CAAI,CAAA;AAC5C,WAAG,GAAG,CAAA,GAAG,GAAG,EAAA,QAAA,GAAW,CAAC,MAAM,EAAA,kBAAA,GAAqB,MAAM,EAAA,GAAA,CAAK,CAAA;AAC9D,eAAa,QAAQ,CAAC,IAAI,EAAE,GAAG,CAAC,CAAA;KAChC;AAGA,WAAA,CAAA,OAAO,GAAG,QAAQ,CAAC,YAAY,CAAC,EAChC,OAAA,CAAA,aAAa,GAAG,QAAQ,CAAC,IAAI,CAAC,EAC9B,OAAA,CAAA,YAAY,GAAG,QAAQ,CAAC,UAAU,CAAC,EACnC,OAAA,CAAA,UAAU,GAAG,QAAQ,CAAC,kBAAkB,CAAC,CAAA;AAG1C,UAAM,kBAAkB,GAAG,SAAS,CAAA;AACvB,WAAA,CAAA,eAAe,GAAG,QAAQ,CAAC,CAAA,mBAAA,GAAsB,kBAAkB,EAAA,CAAE,EAAE,IAAI,CAAC,CAAA;CDCxF,CAAC,CAAC","file":"private/lex/chars.js","sourcesContent":["(function (factory) {\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === 'function' && define.amd) {\n        define([\"require\", \"exports\", '../../CompileError'], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    var CompileError_1 = require('../../CompileError');\n    function showChar(char) {\n        return CompileError_1.code(String.fromCharCode(char));\n    }\n    exports.showChar = showChar;\n    function charPred(chars, negate = false) {\n        let src = 'switch(ch) {\\n';\n        for (let i = 0; i < chars.length; i = i + 1)\n            src = `${src}case ${chars.charCodeAt(i)}: `;\n        src = `${src} return ${!negate}\\ndefault: return ${negate}\\n}`;\n        return Function('ch', src);\n    }\n    exports.isDigit = charPred('0123456789'), exports.isDigitBinary = charPred('01'), exports.isDigitOctal = charPred('01234567'), exports.isDigitHex = charPred('0123456789abcdef');\n    const reservedCharacters = '#%^\\\\;,';\n    exports.isNameCharacter = charPred(`\\`&()[]{}|:'\". \\n\\t${reservedCharacters}`, true);\n});\n","import Char from 'typescript-char/Char'\nimport {code} from '../../CompileError'\n\nexport function showChar(char: Char) {\n\treturn code(String.fromCharCode(char))\n}\n\nfunction charPred(chars: string, negate: boolean = false): (_: Char) => boolean {\n\tlet src = 'switch(ch) {\\n'\n\tfor (let i = 0; i < chars.length; i = i + 1)\n\t\tsrc = `${src}case ${chars.charCodeAt(i)}: `\n\tsrc = `${src} return ${!negate}\\ndefault: return ${negate}\\n}`\n\treturn <any> Function('ch', src)\n}\n\nexport const\n\tisDigit = charPred('0123456789'),\n\tisDigitBinary = charPred('01'),\n\tisDigitOctal = charPred('01234567'),\n\tisDigitHex = charPred('0123456789abcdef')\n\n// Anything not explicitly reserved is a valid name character.\nconst reservedCharacters = '#%^\\\\;,'\nexport const isNameCharacter = charPred(`\\`&()[]{}|:'\". \\n\\t${reservedCharacters}`, true)\n"],"sourceRoot":"/source/"}