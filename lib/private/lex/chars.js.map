{"version":3,"sources":["private/lex/chars.js","private/lex/chars.ts"],"names":[],"mappings":"AAAA,CAAC,UAAU,OAAV,EAAmB;AAChB,QAAI,OAAO,MAAP,KAAkB,QAAlB,IAA8B,OAAO,OAAO,OAAP,KAAmB,QAA1B,EAAoC;AAClE,YAAI,IAAI,QAAQ,OAAR,EAAiB,OAAjB,CAAJ,CAD8D,IAC3B,MAAM,SAAN,EAAiB,OAAO,OAAP,GAAiB,CAAjB,CAArB;KADvC,MAGK,IAAI,OAAO,MAAP,KAAkB,UAAlB,IAAgC,OAAO,GAAP,EAAY;AACjD,eAAO,CAAC,SAAD,EAAY,SAAZ,CAAP,EAA+B,OAA/B,EADiD;KAAhD;CAJR,CAAD,CAOG,UAAU,OAAV,EAAmB,OAAnB,EAA4B;AAC3B,iBAD2B;;ACL/B,aAAA,aAAA,CAA8B,CAA9B,EAAqC;AACpC,eAAO,MAAM,EAAN,IAAiB,MAAM,EAAN,CADY;KAArC;AAAgB,YAAA,aAAA,GAAa,aAAb,CDKe;ACD/B,aAAA,YAAA,CAA6B,CAA7B,EAAoC;AACnC,eAAO,QAAQ,CAAR,EAAW,EAAX,EAAoB,EAApB,CAAP,CADmC;KAApC;AAAgB,YAAA,YAAA,GAAY,YAAZ,CDCe;ACG/B,aAAA,cAAA,CAA+B,CAA/B,EAAsC;AACrC,eAAO,QAAQ,CAAR,EAAW,EAAX,EAAoB,EAApB,CAAP,CADqC;KAAtC;AAAgB,YAAA,cAAA,GAAc,cAAd,CDHe;ACO/B,aAAA,UAAA,CAA2B,CAA3B,EAAkC;AACjC,eAAO,eAAe,CAAf,KAAqB,QAAQ,CAAR,EAAW,EAAX,EAAmB,GAAnB,CAArB,CAD0B;KAAlC;AAAgB,YAAA,UAAA,GAAU,UAAV,CDPe;ACW/B,aAAA,OAAA,CAAiB,CAAjB,EAA0B,GAA1B,EAAqC,GAArC,EAA8C;AAC7C,eAAO,OAAO,CAAP,IAAY,KAAK,GAAL,CAD0B;KAA9C;AAIA,aAAA,eAAA,CAAgC,CAAhC,EAAuC;AACtC,gBAAQ,CAAR;AAEC,iBAAK,EAAL,CAFD;AAEqB,iBAAK,EAAL,CAFrB;AAE0C,iBAAK,EAAL,CAF1C;AAGC,iBAAK,EAAL,CAHD;AAG6B,iBAAK,EAAL,CAH7B;AAGoD,iBAAK,EAAL,CAHpD;AAIC,iBAAK,GAAL,CAJD;AAIsB,iBAAK,GAAL,CAJtB;AAI4C,iBAAK,GAAL,CAJ5C;AAI2D,iBAAK,EAAL,CAJ3D;AAKC,iBAAK,EAAL,CALD;AAKwB,iBAAK,EAAL,CALxB;AAK+C,iBAAK,EAAL,CAL/C;AAKiE,iBAAK,EAAL,CALjE;AAMC,iBAAK,EAAL,CAND;AAMqB,iBAAK,CAAL,CANrB;AAQC,iBAAK,EAAL,CARD;AAQiB,iBAAK,EAAL,CARjB;AAQkC,iBAAK,EAAL,CARlC;AAQuD,iBAAK,EAAL,CARvD;AAQ4E,iBAAK,EAAL;AAC1E,uBAAO,KAAP,CAD0E;AAR5E;AAWE,uBAAO,IAAP,CADD;AAVD,SADsC;KAAvC;AAAgB,YAAA,eAAA,GAAe,eAAf,CDfe;CAA5B,CAPH","file":"private/lex/chars.js","sourcesContent":["(function (factory) {\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === 'function' && define.amd) {\n        define([\"require\", \"exports\"], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    function isDigitBinary(_) {\n        return _ === 48 || _ === 49;\n    }\n    exports.isDigitBinary = isDigitBinary;\n    function isDigitOctal(_) {\n        return inRange(_, 48, 55);\n    }\n    exports.isDigitOctal = isDigitOctal;\n    function isDigitDecimal(_) {\n        return inRange(_, 48, 57);\n    }\n    exports.isDigitDecimal = isDigitDecimal;\n    function isDigitHex(_) {\n        return isDigitDecimal(_) || inRange(_, 97, 102);\n    }\n    exports.isDigitHex = isDigitHex;\n    function inRange(_, min, max) {\n        return min <= _ && _ <= max;\n    }\n    function isNameCharacter(_) {\n        switch (_) {\n            case 96:\n            case 38:\n            case 40:\n            case 41:\n            case 91:\n            case 93:\n            case 123:\n            case 125:\n            case 124:\n            case 58:\n            case 39:\n            case 34:\n            case 46:\n            case 32:\n            case 10:\n            case 9:\n            case 35:\n            case 94:\n            case 92:\n            case 59:\n            case 44:\n                return false;\n            default:\n                return true;\n        }\n    }\n    exports.isNameCharacter = isNameCharacter;\n});\n","import Char from 'typescript-char/Char'\n\nexport function isDigitBinary(_: Char): boolean {\n\treturn _ === Char._0 || _ === Char._1\n}\n\nexport function isDigitOctal(_: Char): boolean {\n\treturn inRange(_, Char._0, Char._7)\n}\n\nexport function isDigitDecimal(_: Char): boolean {\n\treturn inRange(_, Char._0, Char._9)\n}\n\nexport function isDigitHex(_: Char): boolean {\n\treturn isDigitDecimal(_) || inRange(_, Char.a, Char.f)\n}\n\nfunction inRange(_: Char, min: Char, max: Char): boolean {\n\treturn min <= _ && _ <= max\n}\n\nexport function isNameCharacter(_: Char): boolean {\n\tswitch (_) {\n\t\t// special characters\n\t\tcase Char.Backtick: case Char.Ampersand: case Char.OpenParenthesis:\n\t\tcase Char.CloseParenthesis: case Char.OpenBracket: case Char.CloseBracket:\n\t\tcase Char.OpenBrace: case Char.CloseBrace: case Char.Bar: case Char.Colon:\n\t\tcase Char.SingleQuote: case Char.DoubleQuote: case Char.Period: case Char.Space:\n\t\tcase Char.LineFeed: case Char.Tab:\n\t\t// reserved characters\n\t\tcase Char.Hash: case Char.Caret: case Char.Backslash: case Char.Semicolon: case Char.Comma:\n\t\t\treturn false\n\t\tdefault:\n\t\t\treturn true\n\t}\n}\n"],"sourceRoot":"/source/"}