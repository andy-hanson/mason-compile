(function (global, factory) {
	if (typeof define === 'function' && define.amd) {
		define(['exports', '../../CompileError'], factory);
	} else if (typeof exports !== 'undefined') {
		factory(exports, require('../../CompileError'));
	} else {
		var mod = {
			exports: {}
		};
		factory(mod.exports, global.CompileError);
		global.chars = mod.exports;
	}
})(this, function (exports, _CompileError) {
	'use strict';

	Object.defineProperty(exports, '__esModule', {
		value: true
	});
	exports.showChar = showChar;

	function cc(_) {
		return _.charCodeAt(0);
	}

	const Chars = {
		Ampersand: cc('&'),
		Backslash: cc('\\'),
		Backtick: cc('`'),
		Bang: cc('!'),
		Bar: cc('|'),
		Caret: cc('^'),
		Cash: cc('$'),
		CloseBrace: cc('}'),
		CloseBracket: cc(']'),
		CloseParenthesis: cc(')'),
		Colon: cc(':'),
		Comma: cc(','),
		Dot: cc('.'),
		Equal: cc('='),
		Hyphen: cc('-'),
		LetterB: cc('b'),
		LetterO: cc('o'),
		LetterX: cc('x'),
		N0: cc('0'),
		N1: cc('1'),
		N2: cc('2'),
		N3: cc('3'),
		N4: cc('4'),
		N5: cc('5'),
		N6: cc('6'),
		N7: cc('7'),
		N8: cc('8'),
		N9: cc('9'),
		Newline: cc('\n'),
		Null: cc('\0'),
		OpenBrace: cc('{'),
		OpenBracket: cc('['),
		OpenParenthesis: cc('('),
		Percent: cc('%'),
		Quote: cc('"'),
		Semicolon: cc(';'),
		Space: cc(' '),
		Tab: cc('\t'),
		Tilde: cc('~')
	};

	exports.Chars = Chars;

	function showChar(char) {
		return (0, _CompileError.code)(String.fromCharCode(char));
	}

	function charPred(chars) {
		let negate = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];

		let src = 'switch(ch) {\n';
		for (let i = 0; i < chars.length; i = i + 1) src = `${ src }case ${ chars.charCodeAt(i) }: `;
		src = `${ src } return ${ !negate }\ndefault: return ${ negate }\n}`;
		return Function('ch', src);
	}

	const isDigit = charPred('0123456789'),
	      isDigitBinary = charPred('01'),
	      isDigitOctal = charPred('01234567'),
	      isDigitHex = charPred('0123456789abcdef');

	exports.isDigit = isDigit;
	exports.isDigitBinary = isDigitBinary;
	exports.isDigitOctal = isDigitOctal;
	exports.isDigitHex = isDigitHex;
	// Anything not explicitly reserved is a valid name character.
	const reservedCharacters = '`#%^&\\\';,';
	const isNameCharacter = charPred('()[]{}.:| \n\t"' + reservedCharacters, true);
	exports.isNameCharacter = isNameCharacter;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9wcml2YXRlL2xleC9jaGFycy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUVBLFVBQVMsRUFBRSxDQUFDLENBQUMsRUFBRTtBQUNkLFNBQU8sQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQTtFQUN0Qjs7QUFFTSxPQUFNLEtBQUssR0FBRztBQUNwQixXQUFTLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQztBQUNsQixXQUFTLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQztBQUNuQixVQUFRLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQztBQUNqQixNQUFJLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQztBQUNiLEtBQUcsRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDO0FBQ1osT0FBSyxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUM7QUFDZCxNQUFJLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQztBQUNiLFlBQVUsRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDO0FBQ25CLGNBQVksRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDO0FBQ3JCLGtCQUFnQixFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUM7QUFDekIsT0FBSyxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUM7QUFDZCxPQUFLLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQztBQUNkLEtBQUcsRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDO0FBQ1osT0FBSyxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUM7QUFDZCxRQUFNLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQztBQUNmLFNBQU8sRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDO0FBQ2hCLFNBQU8sRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDO0FBQ2hCLFNBQU8sRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDO0FBQ2hCLElBQUUsRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDO0FBQ1gsSUFBRSxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUM7QUFDWCxJQUFFLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQztBQUNYLElBQUUsRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDO0FBQ1gsSUFBRSxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUM7QUFDWCxJQUFFLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQztBQUNYLElBQUUsRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDO0FBQ1gsSUFBRSxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUM7QUFDWCxJQUFFLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQztBQUNYLElBQUUsRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDO0FBQ1gsU0FBTyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUM7QUFDakIsTUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUM7QUFDZCxXQUFTLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQztBQUNsQixhQUFXLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQztBQUNwQixpQkFBZSxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUM7QUFDeEIsU0FBTyxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUM7QUFDaEIsT0FBSyxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUM7QUFDZCxXQUFTLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQztBQUNsQixPQUFLLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQztBQUNkLEtBQUcsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDO0FBQ2IsT0FBSyxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUM7RUFDZCxDQUFBOzs7O0FBRU0sVUFBUyxRQUFRLENBQUMsSUFBSSxFQUFFO0FBQzlCLFNBQU8sa0JBakRBLElBQUksRUFpREMsTUFBTSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFBO0VBQ3RDOztBQUVELFVBQVMsUUFBUSxDQUFDLEtBQUssRUFBZ0I7TUFBZCxNQUFNLHlEQUFDLEtBQUs7O0FBQ3BDLE1BQUksR0FBRyxHQUFHLGdCQUFnQixDQUFBO0FBQzFCLE9BQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUMxQyxHQUFHLEdBQUcsQ0FBQyxHQUFFLEdBQUcsRUFBQyxLQUFLLEdBQUUsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsQ0FBQTtBQUM1QyxLQUFHLEdBQUcsQ0FBQyxHQUFFLEdBQUcsRUFBQyxRQUFRLEdBQUUsQ0FBQyxNQUFNLEVBQUMsa0JBQWtCLEdBQUUsTUFBTSxFQUFDLEdBQUcsQ0FBQyxDQUFBO0FBQzlELFNBQU8sUUFBUSxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQTtFQUMxQjs7QUFFTSxPQUNOLE9BQU8sR0FBRyxRQUFRLENBQUMsWUFBWSxDQUFDO09BQ2hDLGFBQWEsR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDO09BQzlCLFlBQVksR0FBRyxRQUFRLENBQUMsVUFBVSxDQUFDO09BQ25DLFVBQVUsR0FBRyxRQUFRLENBQUMsa0JBQWtCLENBQUMsQ0FBQTs7Ozs7OztBQUcxQyxPQUFNLGtCQUFrQixHQUFHLGFBQWEsQ0FBQTtBQUNqQyxPQUFNLGVBQWUsR0FBRyxRQUFRLENBQUMsaUJBQWlCLEdBQUcsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLENBQUEiLCJmaWxlIjoiY2hhcnMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2NvZGV9IGZyb20gJy4uLy4uL0NvbXBpbGVFcnJvcidcblxuZnVuY3Rpb24gY2MoXykge1xuXHRyZXR1cm4gXy5jaGFyQ29kZUF0KDApXG59XG5cbmV4cG9ydCBjb25zdCBDaGFycyA9IHtcblx0QW1wZXJzYW5kOiBjYygnJicpLFxuXHRCYWNrc2xhc2g6IGNjKCdcXFxcJyksXG5cdEJhY2t0aWNrOiBjYygnYCcpLFxuXHRCYW5nOiBjYygnIScpLFxuXHRCYXI6IGNjKCd8JyksXG5cdENhcmV0OiBjYygnXicpLFxuXHRDYXNoOiBjYygnJCcpLFxuXHRDbG9zZUJyYWNlOiBjYygnfScpLFxuXHRDbG9zZUJyYWNrZXQ6IGNjKCddJyksXG5cdENsb3NlUGFyZW50aGVzaXM6IGNjKCcpJyksXG5cdENvbG9uOiBjYygnOicpLFxuXHRDb21tYTogY2MoJywnKSxcblx0RG90OiBjYygnLicpLFxuXHRFcXVhbDogY2MoJz0nKSxcblx0SHlwaGVuOiBjYygnLScpLFxuXHRMZXR0ZXJCOiBjYygnYicpLFxuXHRMZXR0ZXJPOiBjYygnbycpLFxuXHRMZXR0ZXJYOiBjYygneCcpLFxuXHROMDogY2MoJzAnKSxcblx0TjE6IGNjKCcxJyksXG5cdE4yOiBjYygnMicpLFxuXHROMzogY2MoJzMnKSxcblx0TjQ6IGNjKCc0JyksXG5cdE41OiBjYygnNScpLFxuXHRONjogY2MoJzYnKSxcblx0Tjc6IGNjKCc3JyksXG5cdE44OiBjYygnOCcpLFxuXHROOTogY2MoJzknKSxcblx0TmV3bGluZTogY2MoJ1xcbicpLFxuXHROdWxsOiBjYygnXFwwJyksXG5cdE9wZW5CcmFjZTogY2MoJ3snKSxcblx0T3BlbkJyYWNrZXQ6IGNjKCdbJyksXG5cdE9wZW5QYXJlbnRoZXNpczogY2MoJygnKSxcblx0UGVyY2VudDogY2MoJyUnKSxcblx0UXVvdGU6IGNjKCdcIicpLFxuXHRTZW1pY29sb246IGNjKCc7JyksXG5cdFNwYWNlOiBjYygnICcpLFxuXHRUYWI6IGNjKCdcXHQnKSxcblx0VGlsZGU6IGNjKCd+Jylcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNob3dDaGFyKGNoYXIpIHtcblx0cmV0dXJuIGNvZGUoU3RyaW5nLmZyb21DaGFyQ29kZShjaGFyKSlcbn1cblxuZnVuY3Rpb24gY2hhclByZWQoY2hhcnMsIG5lZ2F0ZT1mYWxzZSkge1xuXHRsZXQgc3JjID0gJ3N3aXRjaChjaCkge1xcbidcblx0Zm9yIChsZXQgaSA9IDA7IGkgPCBjaGFycy5sZW5ndGg7IGkgPSBpICsgMSlcblx0XHRzcmMgPSBgJHtzcmN9Y2FzZSAke2NoYXJzLmNoYXJDb2RlQXQoaSl9OiBgXG5cdHNyYyA9IGAke3NyY30gcmV0dXJuICR7IW5lZ2F0ZX1cXG5kZWZhdWx0OiByZXR1cm4gJHtuZWdhdGV9XFxufWBcblx0cmV0dXJuIEZ1bmN0aW9uKCdjaCcsIHNyYylcbn1cblxuZXhwb3J0IGNvbnN0XG5cdGlzRGlnaXQgPSBjaGFyUHJlZCgnMDEyMzQ1Njc4OScpLFxuXHRpc0RpZ2l0QmluYXJ5ID0gY2hhclByZWQoJzAxJyksXG5cdGlzRGlnaXRPY3RhbCA9IGNoYXJQcmVkKCcwMTIzNDU2NycpLFxuXHRpc0RpZ2l0SGV4ID0gY2hhclByZWQoJzAxMjM0NTY3ODlhYmNkZWYnKVxuXG4vLyBBbnl0aGluZyBub3QgZXhwbGljaXRseSByZXNlcnZlZCBpcyBhIHZhbGlkIG5hbWUgY2hhcmFjdGVyLlxuY29uc3QgcmVzZXJ2ZWRDaGFyYWN0ZXJzID0gJ2AjJV4mXFxcXFxcJzssJ1xuZXhwb3J0IGNvbnN0IGlzTmFtZUNoYXJhY3RlciA9IGNoYXJQcmVkKCcoKVtde30uOnwgXFxuXFx0XCInICsgcmVzZXJ2ZWRDaGFyYWN0ZXJzLCB0cnVlKVxuIl19