{"version":3,"sources":["private/parse/parseMethodImpls.js"],"names":[],"mappings":"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","file":"private/parse/parseMethodImpls.js","sourcesContent":["(function (factory) {\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === 'function' && define.amd) {\n        define([\"require\", \"exports\", '../MsAst', '../Token', './parse*', './parseBlock', './parseFun', './parseMethodSplit'], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    var MsAst_1 = require('../MsAst');\n    var Token_1 = require('../Token');\n    var parse_1 = require('./parse*');\n    var parseBlock_1 = require('./parseBlock');\n    var parseFun_1 = require('./parseFun');\n    var parseMethodSplit_1 = require('./parseMethodSplit');\n    function parseMethodImpls(lines) {\n        return lines.mapSlices(parseMethodImpl);\n    }\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = parseMethodImpls;\n    function takeStatics(lines) {\n        const line = lines.headSlice();\n        return Token_1.isKeyword(100, line.head()) ?\n            [parseMethodImpls(parseBlock_1.justBlock(100, line.tail())), lines.tail()] :\n            [[], lines];\n    }\n    exports.takeStatics = takeStatics;\n    function parseStaticsAndMethods(lines) {\n        const [statics, rest] = takeStatics(lines);\n        return [statics, parseMethodImpls(rest)];\n    }\n    exports.parseStaticsAndMethods = parseStaticsAndMethods;\n    function opTakeDo(lines) {\n        const line = lines.headSlice();\n        return Token_1.isKeyword(51, line.head()) ?\n            [new MsAst_1.ClassTraitDo(line.loc, parseBlock_1.parseJustBlock(51, line.tail())), lines.tail()] :\n            [null, lines];\n    }\n    exports.opTakeDo = opTakeDo;\n    function parseMethodImpl(tokens) {\n        let head = tokens.head();\n        const isMy = Token_1.isKeyword(87, head);\n        if (isMy) {\n            tokens = tokens.tail();\n            head = tokens.head();\n        }\n        if (Token_1.isKeyword(77, head)) {\n            const [before, block] = parseBlock_1.beforeAndBlock(tokens.tail());\n            return new MsAst_1.MethodGetter(tokens.loc, isMy, parseExprOrQuoteSimple(before), parseBlock_1.default(block));\n        }\n        else if (Token_1.isKeyword(98, head)) {\n            const [before, block] = parseBlock_1.beforeAndBlock(tokens.tail());\n            return new MsAst_1.MethodSetter(tokens.loc, isMy, parseExprOrQuoteSimple(before), parseBlock_1.default(block));\n        }\n        else {\n            const { before, kind, after } = parseMethodSplit_1.default(tokens);\n            const fun = parseFun_1.default(kind, after);\n            return new MsAst_1.MethodImpl(tokens.loc, isMy, parseExprOrQuoteSimple(before), fun);\n        }\n    }\n    function parseExprOrQuoteSimple(tokens) {\n        const expr = parse_1.parseExpr(tokens);\n        return expr instanceof MsAst_1.QuoteSimple ? expr.value : expr;\n    }\n});\n"],"sourceRoot":"/source/"}