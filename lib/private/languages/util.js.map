{"version":3,"sources":["private/languages/util.js","private/languages/util.ts"],"names":[],"mappings":"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","file":"private/languages/util.js","sourcesContent":["(function (factory) {\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === 'function' && define.amd) {\n        define([\"require\", \"exports\", '../token/Group', '../token/Keyword', '../token/Token'], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    const Group_1 = require('../token/Group');\n    const Keyword_1 = require('../token/Keyword');\n    const Token_1 = require('../token/Token');\n    function code(str) {\n        return `{{${str}}}`;\n    }\n    exports.code = code;\n    function showChar(char) {\n        return code(String.fromCharCode(char));\n    }\n    exports.showChar = showChar;\n    function showKeyword(kind) {\n        return code(Keyword_1.keywordName(kind));\n    }\n    exports.showKeyword = showKeyword;\n    function showGroupType(type, language) {\n        return code((() => {\n            switch (type) {\n                case Group_1.GroupBlock:\n                    return language.indentedBlock;\n                case Group_1.GroupQuote:\n                    return '\"\"';\n                case Group_1.GroupRegExp:\n                    return '``';\n                case Group_1.GroupParenthesis:\n                    return '()';\n                case Group_1.GroupBracket:\n                    return '[]';\n                case Group_1.GroupBrace:\n                    return '{}';\n                case Group_1.GroupSpace:\n                    return language.spacedGroup;\n                default:\n                    throw new Error(type.name);\n            }\n        })());\n    }\n    exports.showGroupType = showGroupType;\n    function showGroup(group, language) {\n        return showGroupType(group.type, language);\n    }\n    exports.showGroup = showGroup;\n    function showToken(_, language) {\n        if (_ instanceof Keyword_1.default)\n            return code(_.name());\n        else if (_ instanceof Group_1.default)\n            return showGroup(_, language);\n        else if (_ instanceof Token_1.DocComment)\n            return 'doc comment';\n        else if (_ instanceof Token_1.NameToken)\n            return code(_.name);\n        else if (_ instanceof Token_1.NumberToken || _ instanceof Token_1.StringToken)\n            return _.value;\n        else\n            throw new Error(_.constructor.name);\n    }\n    exports.showToken = showToken;\n    function showLoc(_) {\n        return code(_.toString());\n    }\n    exports.showLoc = showLoc;\n});\n","import Loc from 'esast/lib/Loc'\nimport Char from 'typescript-char/Char'\nimport Group, {GroupBlock, GroupBrace, GroupBracket, GroupParenthesis, GroupQuote, GroupSpace,\n\tGroupRegExp, GroupType} from '../token/Group'\nimport Keyword, {keywordName, Kw} from '../token/Keyword'\nimport Token, {DocComment, NameToken, NumberToken, StringToken} from '../token/Token'\nimport Language from './Language'\n\n/**\nUsed when generating messages to highlight a part of that message.\nThese are parsed away by [[ErrorMessage#messageParts]].\nCompiler users may choose how to highlight these; with console colors or with highlighted html.\n*/\nexport function code(str: string): string {\n\treturn `{{${str}}}`\n}\n\nexport function showChar(char: Char): string {\n\treturn code(String.fromCharCode(char))\n}\n\nexport function showKeyword(kind: Kw): string {\n\treturn code(keywordName(kind))\n}\n\nexport function showGroupType(type: GroupType, language: Language): string {\n\treturn code((() => {\n\t\tswitch (type) {\n\t\t\tcase GroupBlock:\n\t\t\t\treturn language.indentedBlock\n\t\t\tcase GroupQuote:\n\t\t\t\treturn '\"\"'\n\t\t\tcase GroupRegExp:\n\t\t\t\treturn '``'\n\t\t\tcase GroupParenthesis:\n\t\t\t\treturn '()'\n\t\t\tcase GroupBracket:\n\t\t\t\treturn '[]'\n\t\t\tcase GroupBrace:\n\t\t\t\treturn '{}'\n\t\t\tcase GroupSpace:\n\t\t\t\treturn language.spacedGroup\n\t\t\tdefault:\n\t\t\t\tthrow new Error(type.name)\n\t\t}\n\t})())\n}\n\nexport function showGroup(group: Group<Token>, language: Language): string {\n\treturn showGroupType(group.type, language)\n}\n\nexport function showToken(_: Token, language: Language): string {\n\tif (_ instanceof Keyword)\n\t\treturn code(_.name())\n\telse if (_ instanceof Group)\n\t\treturn showGroup(_, language)\n\telse if (_ instanceof DocComment)\n\t\treturn 'doc comment'\n\telse if (_ instanceof NameToken)\n\t\treturn code(_.name)\n\telse if (_ instanceof NumberToken || _ instanceof StringToken)\n\t\treturn _.value\n\telse\n\t\tthrow new Error(_.constructor.name)\n}\n\nexport function showLoc(_: Loc): string {\n\treturn code(_.toString())\n}\n"],"sourceRoot":"/source/"}