{"version":3,"sources":["private/parse/parse.js","private/parse/parse.ts"],"names":[],"mappings":"AAAA,CAAC,UAAU,OAAO,EAAE;AAChB,QAAI,OAAO,MAAM,KAAK,QAAQ,IAAI,OAAO,MAAM,CAAC,OAAO,KAAK,QAAQ,EAAE;AAClE,YAAI,CAAC,GAAG,OAAO,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC,AAAC,IAAI,CAAC,KAAK,SAAS,EAAE,MAAM,CAAC,OAAO,GAAG,CAAC,CAAC;KAC9E,MACI,IAAI,OAAO,MAAM,KAAK,UAAU,IAAI,MAAM,CAAC,GAAG,EAAE;AACjD,cAAM,CAAC,CAAC,SAAS,EAAE,SAAS,EAAE,cAAc,EAAE,eAAe,EAAE,SAAS,CAAC,EAAE,OAAO,CAAC,CAAC;KACvF;CACJ,CAAA,CAAE,UAAU,OAAO,EAAE,OAAO,EAAE;AAC3B,gBAAY,CAAC;;ACNjB,WAAA,CAAO,cACP,CAAC,CADoB;AACrB,QAAA,aAAA,GAAA,OAAA,CAAwB,eACxB,CAAC,CADsC;AACvC,QAAA,OAAA,GAAA,OAAA,CAA2B,SAY3B,CAAC,CAZmC;AAYpC,aAAA,KAAA,CAA8B,SAAqB,EAAA;AAClD,eAAO,aAAA,CAAA,OAAW,CAAC,OAAA,CAAA,KAAK,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC,CAAA;KACvC;AAFD,UAAA,CAAA,cAAA,CAAA,OAAA,EAAA,YAAA,EAAA,EAAA,KAAA,EAAA,IAAA,EAAA,CAAA,CAAA;ADAI,WAAO,CAAC,OAAO,GAAG,KCErB,CAAA;CDDA,CAAC,CAAC","file":"private/parse/parse.js","sourcesContent":["(function (factory) {\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === 'function' && define.amd) {\n        define([\"require\", \"exports\", './loadParse*', './parseModule', './Slice'], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    require('./loadParse*');\n    var parseModule_1 = require('./parseModule');\n    var Slice_1 = require('./Slice');\n    function parse(rootToken) {\n        return parseModule_1.default(Slice_1.Lines.of(rootToken));\n    }\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = parse;\n});\n","import {Module} from '../MsAst'\nimport {GroupBlock} from '../Token'\nimport './loadParse*'\nimport parseModule from './parseModule'\nimport Slice, {Lines} from './Slice'\n\n/**\nThis converts a Token tree to a MsAst.\nThis is a recursive-descent parser, made easier by two facts:\n\t* We have already grouped tokens.\n\t* Most of the time, an ast's type is determined by the first token.\n\nThere are exceptions such as assignment statements (indicated by a `=` somewhere in the middle).\nFor those we must iterate through tokens and split.\n(See [[Slice#opSplitOnce]] and [[Slice#opSplitMany]].)\n*/\nexport default function parse(rootToken: GroupBlock): Module {\n\treturn parseModule(Lines.of(rootToken))\n}\n"],"sourceRoot":"/source/"}