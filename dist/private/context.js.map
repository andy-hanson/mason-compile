{"version":3,"sources":["private/context.js","private/context.ts"],"names":[],"mappings":"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","file":"private/context.js","sourcesContent":["(function (factory) {\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === 'function' && define.amd) {\n        define([\"require\", \"exports\", 'esast/lib/Loc', '../CompileError', './PathOptions'], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    var Loc_1 = require('esast/lib/Loc');\n    var CompileError_1 = require('../CompileError');\n    var PathOptions_1 = require('./PathOptions');\n    let warnings;\n    function withContext(_options, filename, getResult) {\n        exports.options = _options;\n        exports.pathOptions = new PathOptions_1.default(filename);\n        warnings = [];\n        try {\n            let result;\n            try {\n                result = getResult();\n            }\n            catch (error) {\n                if (!(error instanceof CompileError_1.default))\n                    throw error;\n                result = error;\n            }\n            warnings.sort((a, b) => a.loc.compare(b.loc));\n            return { warnings: warnings, result: result };\n        }\n        finally {\n            exports.options = exports.pathOptions = warnings = null;\n        }\n    }\n    exports.withContext = withContext;\n    function check(cond, loc, message) {\n        if (!cond)\n            throw fail(loc instanceof Function ? loc() : loc, message);\n    }\n    exports.check = check;\n    function fail(loc, message) {\n        return new CompileError_1.default(errorMessage(loc, message));\n    }\n    exports.fail = fail;\n    function warn(loc, message) {\n        warnings.push(errorMessage(loc, message));\n    }\n    exports.warn = warn;\n    function errorMessage(loc, message) {\n        const l = loc instanceof Loc_1.Pos ? Loc_1.default.singleChar(loc) : loc;\n        return new CompileError_1.ErrorMessage(l, message(exports.options.language));\n    }\n});\n","import Loc, {Pos} from 'esast/lib/Loc'\nimport Op from 'op/Op'\nimport CompileError, {ErrorMessage} from '../CompileError'\nimport {WarningsAnd} from '../Compiler'\nimport Language from './languages/Language'\nimport CompileOptions from './CompileOptions'\nimport PathOptions from './PathOptions'\nimport {isEmpty} from './util'\n\nexport let options: CompileOptions\nexport let pathOptions: PathOptions\n\n/** Array of all warnings produced during compilation. */\nlet warnings: Array<ErrorMessage>\n\n/**\n`options` and `pathOptions` will be set while running `getResult`.\nWhen done, returns warnings along with the result.\n*/\nexport function withContext<A>(\n\t_options: CompileOptions,\n\tfilename: string,\n\tgetResult: () => A)\n\t: WarningsAnd<A> {\n\toptions = _options\n\tpathOptions = new PathOptions(filename)\n\twarnings = []\n\n\ttry {\n\t\tlet result: A\n\t\ttry {\n\t\t\tresult = getResult()\n\t\t} catch (error) {\n\t\t\tif (!(error instanceof CompileError))\n\t\t\t\tthrow error\n\t\t\tresult = error\n\t\t}\n\n\t\t// Sort warnings to make them easier to read.\n\t\twarnings.sort((a, b) => a.loc.compare(b.loc))\n\t\treturn {warnings, result}\n\t} finally {\n\t\t// Release for garbage collection.\n\t\toptions = pathOptions = warnings = null\n\t}\n}\n\n/**\nIf `cond` is false, [[fail]].\n`loc` and `message` may also be Functions to to get them lazily.\n*/\nexport function check(\n\tcond: boolean,\n\tloc: Pos | Loc | (() => Pos | Loc),\n\tmessage: (_: Language) => string): void {\n\tif (!cond)\n\t\tthrow fail(loc instanceof Function ? loc() : loc, message)\n}\n\n/** Create a [[CompileError]]. Parameters are the same as for {@link warn}. */\nexport function fail(loc: Pos | Loc, message: (_: Language) => string): CompileError {\n\treturn new CompileError(errorMessage(loc, message))\n}\n\n/**\nAdd a new warning.\n@param code Message code. For a complete list, see [[english]].\n@param args\n\tArguments for rendering the message.\n\tWhen these are supplied, the message handler must be a function.\n\tSee [[english]] for which messages are functions.\n*/\nexport function warn(loc: Loc | Pos, message: (_: Language) => string): void {\n\twarnings.push(errorMessage(loc, message))\n}\n\nfunction errorMessage(loc: Loc | Pos, message: (_: Language) => string): ErrorMessage {\n\tconst l = loc instanceof Pos ? Loc.singleChar(loc) : loc\n\treturn new ErrorMessage(l, message(options.language))\n}\n"],"sourceRoot":"/source/"}