{"version":3,"sources":["private/CompileOptions.js"],"names":[],"mappings":"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","file":"private/CompileOptions.js","sourcesContent":["(function (factory) {\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === 'function' && define.amd) {\n        define([\"require\", \"exports\", './defaultBuiltins', './util', './languages/allLanguages'], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    var defaultBuiltins_1 = require('./defaultBuiltins');\n    var util_1 = require('./util');\n    var allLanguages_1 = require('./languages/allLanguages');\n    class CompileOptions {\n        constructor(opts) {\n            const o = util_1.applyDefaults(opts, {\n                includeAmdefine: false,\n                includeSourceMap: true,\n                lazyModules: false,\n                useStrict: true,\n                checks: true,\n                importBoot: true,\n                mslPath: 'msl',\n                indent: '\\t',\n                language: 'english',\n                builtins: null\n            });\n            this.includeAmdefine = o.includeAmdefine;\n            this.includeSourceMap = o.includeSourceMap;\n            this.lazyModules = o.lazyModules;\n            this.useStrict = o.useStrict;\n            this.checks = o.checks;\n            this.importBoot = o.importBoot;\n            this.mslPath = o.mslPath;\n            this.indent = o.indent;\n            const builtins = o.builtins === null ? getDefaultBuiltins(this.mslPath) : o.builtins;\n            this.builtinNameToPath = generateBuiltinNameToPath(builtins);\n            this.language = allLanguages_1.default[o.language];\n            const minIndent = 2, maxIndent = 8;\n            const i = this.indent;\n            if (!(typeof i === 'number' ? (minIndent <= i && i <= maxIndent) : i === '\\t'))\n                throw new Error(`opts.indent must be '\\t' or a number 2-8, got: ${i}`);\n        }\n        get bootPath() {\n            return `${this.mslPath}/private/boot`;\n        }\n        opBuiltinPath(name) {\n            return this.builtinNameToPath.get(name);\n        }\n    }\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = CompileOptions;\n    function getDefaultBuiltins(mslPath) {\n        const builtins = Object.assign({}, defaultBuiltins_1.default);\n        if (mslPath !== 'msl')\n            for (const key in builtins) {\n                const x = builtins[key];\n                delete builtins[key];\n                builtins[key.replace(/msl/g, mslPath)] = x;\n            }\n        return builtins;\n    }\n    function generateBuiltinNameToPath(builtins) {\n        const m = new Map();\n        for (const _path in builtins) {\n            const path = _path;\n            const realPath = path.replace(/\\./g, '/');\n            for (let imported of builtins[path]) {\n                if (imported === '_')\n                    imported = util_1.last(path.split('.'));\n                if (m.has(imported))\n                    throw new Error(`Builtin ${imported} defined more than once.`);\n                m.set(imported, realPath);\n            }\n        }\n        return m;\n    }\n});\n"],"sourceRoot":"/source/"}