if (typeof define !== 'function') var define = require('amdefine')(module);define(['exports', 'module', './util'], function (exports, module, _util) {
	'use strict';

	class CompileOptions {
		constructor(opts) {
			// TODO:ES6 Optional arguments
			if (opts === undefined) opts = {};
			(0, _util.type)(opts, Object);

			const defaultTo = (name, _default) => {
				const _ = opts[name];
				if (_ === undefined) return _default;else {
					(0, _util.type)(_, _default.constructor);
					return _;
				}
			};

			const define = (name, _default) => {
				this[`_${ name }`] = defaultTo(name, _default);
			};

			const defaults = {
				includeAmdefine: true,
				includeSourceMap: true,
				includeModuleName: true,
				forceNonLazyModule: false,
				useStrict: true,
				checks: true,
				'warn-as-error': false
			};

			for (const _ in defaults) define(_, defaults[_]);

			this._inFile = opts.inFile;

			if (this._inFile === undefined) {
				if (this._includeSourceMap) throw new Error('Either supply `inFile` option or make `includeSourceMap` false.');
				if (this._includeModuleName) throw new Error('Either supply `inFile` option or make `includeModuleName` false.');
			} else (0, _util.type)(this._inFile, String);
		}

		moduleName() {
			return this._inFile === undefined ? 'anonymous' : noExt(basename(this._inFile));
		}

		jsBaseName() {
			return `${ this.moduleName() }.js`;
		}
		modulePath() {
			return this._inFile;
		}

		includeChecks() {
			return this._checks;
		}

		warnAsError() {
			return this['_warn-as-error'];
		}

		includeAmdefine() {
			return this._includeAmdefine;
		}
		includeSourceMap() {
			return this._includeSourceMap;
		}
		includeModuleName() {
			return this._includeModuleName;
		}
		includeUseStrict() {
			return this._useStrict;
		}

		lazyModule() {
			return !this._forceNonLazyModule;
		}
	}

	module.exports = CompileOptions;

	const basename = path => (0, _util.last)(path.split('/')),
	      extname = path => (0, _util.last)(path.split('.')),
	      noExt = path =>
	// - 1 for the '.'
	path.substring(0, path.length - 1 - extname(path).length);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNvbXBpbGVPcHRpb25zLmpzIiwicHJpdmF0ZS9Db21waWxlT3B0aW9ucy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0FDRWUsT0FBTSxjQUFjLENBQUM7QUFDbkMsYUFBVyxDQUFDLElBQUksRUFBRTs7QUFFakIsT0FBSSxJQUFJLEtBQUssU0FBUyxFQUFFLElBQUksR0FBRyxFQUFHLENBQUE7QUFDbEMsYUFOYSxJQUFJLEVBTVosSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFBOztBQUVsQixTQUFNLFNBQVMsR0FBRyxDQUFDLElBQUksRUFBRSxRQUFRLEtBQUs7QUFDckMsVUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFBO0FBQ3BCLFFBQUksQ0FBQyxLQUFLLFNBQVMsRUFDbEIsT0FBTyxRQUFRLENBQUEsS0FDWDtBQUNKLGVBYlcsSUFBSSxFQWFWLENBQUMsRUFBRSxRQUFRLENBQUMsV0FBVyxDQUFDLENBQUE7QUFDN0IsWUFBTyxDQUFDLENBQUE7S0FDUjtJQUNELENBQUE7O0FBRUQsU0FBTSxNQUFNLEdBQUcsQ0FBQyxJQUFJLEVBQUUsUUFBUSxLQUFLO0FBQ2xDLFFBQUksQ0FBQyxDQUFDLENBQUMsR0FBRSxJQUFJLEVBQUMsQ0FBQyxDQUFDLEdBQUcsU0FBUyxDQUFDLElBQUksRUFBRSxRQUFRLENBQUMsQ0FBQTtJQUM1QyxDQUFBOztBQUVELFNBQU0sUUFBUSxHQUFHO0FBQ2hCLG1CQUFlLEVBQUUsSUFBSTtBQUNyQixvQkFBZ0IsRUFBRSxJQUFJO0FBQ3RCLHFCQUFpQixFQUFFLElBQUk7QUFDdkIsc0JBQWtCLEVBQUUsS0FBSztBQUN6QixhQUFTLEVBQUUsSUFBSTtBQUNmLFVBQU0sRUFBRSxJQUFJO0FBQ1osbUJBQWUsRUFBRSxLQUFLO0lBQ3RCLENBQUE7O0FBRUQsUUFBSyxNQUFNLENBQUMsSUFBSSxRQUFRLEVBQ3ZCLE1BQU0sQ0FBQyxDQUFDLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7O0FBRXZCLE9BQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQTs7QUFFMUIsT0FBSSxJQUFJLENBQUMsT0FBTyxLQUFLLFNBQVMsRUFBRTtBQUMvQixRQUFJLElBQUksQ0FBQyxpQkFBaUIsRUFDekIsTUFBTSxJQUFJLEtBQUssQ0FBQyxpRUFBaUUsQ0FBQyxDQUFBO0FBQ25GLFFBQUksSUFBSSxDQUFDLGtCQUFrQixFQUMxQixNQUFNLElBQUksS0FBSyxDQUFDLGtFQUFrRSxDQUFDLENBQUE7SUFDcEYsTUFDQSxVQTNDWSxJQUFJLEVBMkNYLElBQUksQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUE7R0FDM0I7O0FBRUQsWUFBVSxHQUFHO0FBQ1osVUFBTyxJQUFJLENBQUMsT0FBTyxLQUFLLFNBQVMsR0FBRyxXQUFXLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQTtHQUMvRTs7QUFFRCxZQUFVLEdBQUc7QUFBRSxVQUFPLENBQUMsR0FBRSxJQUFJLENBQUMsVUFBVSxFQUFFLEVBQUMsR0FBRyxDQUFDLENBQUE7R0FBRTtBQUNqRCxZQUFVLEdBQUc7QUFBRSxVQUFPLElBQUksQ0FBQyxPQUFPLENBQUE7R0FBRTs7QUFFcEMsZUFBYSxHQUFHO0FBQUUsVUFBTyxJQUFJLENBQUMsT0FBTyxDQUFBO0dBQUU7O0FBRXZDLGFBQVcsR0FBRztBQUFFLFVBQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUE7R0FBRTs7QUFFL0MsaUJBQWUsR0FBRztBQUFFLFVBQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFBO0dBQUU7QUFDbEQsa0JBQWdCLEdBQUc7QUFBRSxVQUFPLElBQUksQ0FBQyxpQkFBaUIsQ0FBQTtHQUFFO0FBQ3BELG1CQUFpQixHQUFHO0FBQUUsVUFBTyxJQUFJLENBQUMsa0JBQWtCLENBQUE7R0FBRTtBQUN0RCxrQkFBZ0IsR0FBRztBQUFFLFVBQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQTtHQUFFOztBQUU3QyxZQUFVLEdBQUc7QUFBRSxVQUFPLENBQUMsSUFBSSxDQUFDLG1CQUFtQixDQUFBO0dBQUU7RUFDakQ7O2tCQTdEb0IsY0FBYzs7QUErRG5DLE9BQ0MsUUFBUSxHQUFHLElBQUksSUFDZCxVQW5FTyxJQUFJLEVBbUVOLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7T0FDdEIsT0FBTyxHQUFHLElBQUksSUFDYixVQXJFTyxJQUFJLEVBcUVOLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7T0FDdEIsS0FBSyxHQUFHLElBQUk7O0FBRVgsS0FBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFBIiwiZmlsZSI6InByaXZhdGUvQ29tcGlsZU9wdGlvbnMuanMiLCJzb3VyY2VzQ29udGVudCI6W251bGwsImltcG9ydCB7IGxhc3QsIHR5cGUgfSBmcm9tICcuL3V0aWwnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENvbXBpbGVPcHRpb25zIHtcblx0Y29uc3RydWN0b3Iob3B0cykge1xuXHRcdC8vIFRPRE86RVM2IE9wdGlvbmFsIGFyZ3VtZW50c1xuXHRcdGlmIChvcHRzID09PSB1bmRlZmluZWQpIG9wdHMgPSB7IH1cblx0XHR0eXBlKG9wdHMsIE9iamVjdClcblxuXHRcdGNvbnN0IGRlZmF1bHRUbyA9IChuYW1lLCBfZGVmYXVsdCkgPT4ge1xuXHRcdFx0Y29uc3QgXyA9IG9wdHNbbmFtZV1cblx0XHRcdGlmIChfID09PSB1bmRlZmluZWQpXG5cdFx0XHRcdHJldHVybiBfZGVmYXVsdFxuXHRcdFx0ZWxzZSB7XG5cdFx0XHRcdHR5cGUoXywgX2RlZmF1bHQuY29uc3RydWN0b3IpXG5cdFx0XHRcdHJldHVybiBfXG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Y29uc3QgZGVmaW5lID0gKG5hbWUsIF9kZWZhdWx0KSA9PiB7XG5cdFx0XHR0aGlzW2BfJHtuYW1lfWBdID0gZGVmYXVsdFRvKG5hbWUsIF9kZWZhdWx0KVxuXHRcdH1cblxuXHRcdGNvbnN0IGRlZmF1bHRzID0ge1xuXHRcdFx0aW5jbHVkZUFtZGVmaW5lOiB0cnVlLFxuXHRcdFx0aW5jbHVkZVNvdXJjZU1hcDogdHJ1ZSxcblx0XHRcdGluY2x1ZGVNb2R1bGVOYW1lOiB0cnVlLFxuXHRcdFx0Zm9yY2VOb25MYXp5TW9kdWxlOiBmYWxzZSxcblx0XHRcdHVzZVN0cmljdDogdHJ1ZSxcblx0XHRcdGNoZWNrczogdHJ1ZSxcblx0XHRcdCd3YXJuLWFzLWVycm9yJzogZmFsc2Vcblx0XHR9XG5cblx0XHRmb3IgKGNvbnN0IF8gaW4gZGVmYXVsdHMpXG5cdFx0XHRkZWZpbmUoXywgZGVmYXVsdHNbX10pXG5cblx0XHR0aGlzLl9pbkZpbGUgPSBvcHRzLmluRmlsZVxuXG5cdFx0aWYgKHRoaXMuX2luRmlsZSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRpZiAodGhpcy5faW5jbHVkZVNvdXJjZU1hcClcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCdFaXRoZXIgc3VwcGx5IGBpbkZpbGVgIG9wdGlvbiBvciBtYWtlIGBpbmNsdWRlU291cmNlTWFwYCBmYWxzZS4nKVxuXHRcdFx0aWYgKHRoaXMuX2luY2x1ZGVNb2R1bGVOYW1lKVxuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ0VpdGhlciBzdXBwbHkgYGluRmlsZWAgb3B0aW9uIG9yIG1ha2UgYGluY2x1ZGVNb2R1bGVOYW1lYCBmYWxzZS4nKVxuXHRcdH0gZWxzZVxuXHRcdFx0dHlwZSh0aGlzLl9pbkZpbGUsIFN0cmluZylcblx0fVxuXG5cdG1vZHVsZU5hbWUoKSB7XG5cdFx0cmV0dXJuIHRoaXMuX2luRmlsZSA9PT0gdW5kZWZpbmVkID8gJ2Fub255bW91cycgOiBub0V4dChiYXNlbmFtZSh0aGlzLl9pbkZpbGUpKVxuXHR9XG5cblx0anNCYXNlTmFtZSgpIHsgcmV0dXJuIGAke3RoaXMubW9kdWxlTmFtZSgpfS5qc2AgfVxuXHRtb2R1bGVQYXRoKCkgeyByZXR1cm4gdGhpcy5faW5GaWxlIH1cblxuXHRpbmNsdWRlQ2hlY2tzKCkgeyByZXR1cm4gdGhpcy5fY2hlY2tzIH1cblxuXHR3YXJuQXNFcnJvcigpIHsgcmV0dXJuIHRoaXNbJ193YXJuLWFzLWVycm9yJ10gfVxuXG5cdGluY2x1ZGVBbWRlZmluZSgpIHsgcmV0dXJuIHRoaXMuX2luY2x1ZGVBbWRlZmluZSB9XG5cdGluY2x1ZGVTb3VyY2VNYXAoKSB7IHJldHVybiB0aGlzLl9pbmNsdWRlU291cmNlTWFwIH1cblx0aW5jbHVkZU1vZHVsZU5hbWUoKSB7IHJldHVybiB0aGlzLl9pbmNsdWRlTW9kdWxlTmFtZSB9XG5cdGluY2x1ZGVVc2VTdHJpY3QoKSB7IHJldHVybiB0aGlzLl91c2VTdHJpY3QgfVxuXG5cdGxhenlNb2R1bGUoKSB7IHJldHVybiAhdGhpcy5fZm9yY2VOb25MYXp5TW9kdWxlIH1cbn1cblxuY29uc3Rcblx0YmFzZW5hbWUgPSBwYXRoID0+XG5cdFx0bGFzdChwYXRoLnNwbGl0KCcvJykpLFxuXHRleHRuYW1lID0gcGF0aCA9PlxuXHRcdGxhc3QocGF0aC5zcGxpdCgnLicpKSxcblx0bm9FeHQgPSBwYXRoID0+XG5cdFx0Ly8gLSAxIGZvciB0aGUgJy4nXG5cdFx0cGF0aC5zdWJzdHJpbmcoMCwgcGF0aC5sZW5ndGggLSAxIC0gZXh0bmFtZShwYXRoKS5sZW5ndGgpXG4iXSwic291cmNlUm9vdCI6Ii9zcmMifQ==