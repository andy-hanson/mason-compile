(function (global, factory) {
	if (typeof define === 'function' && define.amd) {
		define(['exports', '../../CompileError'], factory);
	} else if (typeof exports !== 'undefined') {
		factory(exports, require('../../CompileError'));
	} else {
		var mod = {
			exports: {}
		};
		factory(mod.exports, global.CompileError);
		global.chars = mod.exports;
	}
})(this, function (exports, _CompileError) {
	'use strict';

	Object.defineProperty(exports, '__esModule', {
		value: true
	});
	exports.showChar = showChar;

	function cc(_) {
		return _.charCodeAt(0);
	}

	const Chars = {
		Ampersand: cc('&'),
		Backslash: cc('\\'),
		Backtick: cc('`'),
		Bang: cc('!'),
		Bar: cc('|'),
		Caret: cc('^'),
		Cash: cc('$'),
		CloseBrace: cc('}'),
		CloseBracket: cc(']'),
		CloseParenthesis: cc(')'),
		Colon: cc(':'),
		Comma: cc(','),
		Dot: cc('.'),
		Equal: cc('='),
		Hyphen: cc('-'),
		LetterB: cc('b'),
		LetterO: cc('o'),
		LetterX: cc('x'),
		N0: cc('0'),
		N1: cc('1'),
		N2: cc('2'),
		N3: cc('3'),
		N4: cc('4'),
		N5: cc('5'),
		N6: cc('6'),
		N7: cc('7'),
		N8: cc('8'),
		N9: cc('9'),
		Newline: cc('\n'),
		Null: cc('\0'),
		OpenBrace: cc('{'),
		OpenBracket: cc('['),
		OpenParenthesis: cc('('),
		Percent: cc('%'),
		Quote: cc('"'),
		Semicolon: cc(';'),
		Space: cc(' '),
		Tab: cc('\t'),
		Tick: cc('\''),
		Tilde: cc('~')
	};

	exports.Chars = Chars;

	function showChar(char) {
		return (0, _CompileError.code)(String.fromCharCode(char));
	}

	function charPred(chars) {
		let negate = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];

		let src = 'switch(ch) {\n';
		for (let i = 0; i < chars.length; i = i + 1) src = `${ src }case ${ chars.charCodeAt(i) }: `;
		src = `${ src } return ${ !negate }\ndefault: return ${ negate }\n}`;
		return Function('ch', src);
	}

	const isDigit = charPred('0123456789'),
	      isDigitBinary = charPred('01'),
	      isDigitOctal = charPred('01234567'),
	      isDigitHex = charPred('0123456789abcdef');

	exports.isDigit = isDigit;
	exports.isDigitBinary = isDigitBinary;
	exports.isDigitOctal = isDigitOctal;
	exports.isDigitHex = isDigitHex;
	// Anything not explicitly reserved is a valid name character.
	const reservedCharacters = '`#%^&\\;,';
	const isNameCharacter = charPred('()[]{}\'.:| \n\t"' + reservedCharacters, true);
	exports.isNameCharacter = isNameCharacter;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9wcml2YXRlL2xleC9jaGFycy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUVBLFVBQVMsRUFBRSxDQUFDLENBQUMsRUFBRTtBQUNkLFNBQU8sQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQTtFQUN0Qjs7QUFFTSxPQUFNLEtBQUssR0FBRztBQUNwQixXQUFTLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQztBQUNsQixXQUFTLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQztBQUNuQixVQUFRLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQztBQUNqQixNQUFJLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQztBQUNiLEtBQUcsRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDO0FBQ1osT0FBSyxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUM7QUFDZCxNQUFJLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQztBQUNiLFlBQVUsRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDO0FBQ25CLGNBQVksRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDO0FBQ3JCLGtCQUFnQixFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUM7QUFDekIsT0FBSyxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUM7QUFDZCxPQUFLLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQztBQUNkLEtBQUcsRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDO0FBQ1osT0FBSyxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUM7QUFDZCxRQUFNLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQztBQUNmLFNBQU8sRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDO0FBQ2hCLFNBQU8sRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDO0FBQ2hCLFNBQU8sRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDO0FBQ2hCLElBQUUsRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDO0FBQ1gsSUFBRSxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUM7QUFDWCxJQUFFLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQztBQUNYLElBQUUsRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDO0FBQ1gsSUFBRSxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUM7QUFDWCxJQUFFLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQztBQUNYLElBQUUsRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDO0FBQ1gsSUFBRSxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUM7QUFDWCxJQUFFLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQztBQUNYLElBQUUsRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDO0FBQ1gsU0FBTyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUM7QUFDakIsTUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUM7QUFDZCxXQUFTLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQztBQUNsQixhQUFXLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQztBQUNwQixpQkFBZSxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUM7QUFDeEIsU0FBTyxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUM7QUFDaEIsT0FBSyxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUM7QUFDZCxXQUFTLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQztBQUNsQixPQUFLLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQztBQUNkLEtBQUcsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDO0FBQ2IsTUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUM7QUFDZCxPQUFLLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQztFQUNkLENBQUE7Ozs7QUFFTSxVQUFTLFFBQVEsQ0FBQyxJQUFJLEVBQUU7QUFDOUIsU0FBTyxrQkFsREEsSUFBSSxFQWtEQyxNQUFNLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUE7RUFDdEM7O0FBRUQsVUFBUyxRQUFRLENBQUMsS0FBSyxFQUFnQjtNQUFkLE1BQU0seURBQUMsS0FBSzs7QUFDcEMsTUFBSSxHQUFHLEdBQUcsZ0JBQWdCLENBQUE7QUFDMUIsT0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQzFDLEdBQUcsR0FBRyxDQUFDLEdBQUUsR0FBRyxFQUFDLEtBQUssR0FBRSxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxDQUFBO0FBQzVDLEtBQUcsR0FBRyxDQUFDLEdBQUUsR0FBRyxFQUFDLFFBQVEsR0FBRSxDQUFDLE1BQU0sRUFBQyxrQkFBa0IsR0FBRSxNQUFNLEVBQUMsR0FBRyxDQUFDLENBQUE7QUFDOUQsU0FBTyxRQUFRLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFBO0VBQzFCOztBQUVNLE9BQ04sT0FBTyxHQUFHLFFBQVEsQ0FBQyxZQUFZLENBQUM7T0FDaEMsYUFBYSxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUM7T0FDOUIsWUFBWSxHQUFHLFFBQVEsQ0FBQyxVQUFVLENBQUM7T0FDbkMsVUFBVSxHQUFHLFFBQVEsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFBOzs7Ozs7O0FBRzFDLE9BQU0sa0JBQWtCLEdBQUcsV0FBVyxDQUFBO0FBQy9CLE9BQU0sZUFBZSxHQUFHLFFBQVEsQ0FBQyxtQkFBbUIsR0FBRyxrQkFBa0IsRUFBRSxJQUFJLENBQUMsQ0FBQSIsImZpbGUiOiJjaGFycy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Y29kZX0gZnJvbSAnLi4vLi4vQ29tcGlsZUVycm9yJ1xuXG5mdW5jdGlvbiBjYyhfKSB7XG5cdHJldHVybiBfLmNoYXJDb2RlQXQoMClcbn1cblxuZXhwb3J0IGNvbnN0IENoYXJzID0ge1xuXHRBbXBlcnNhbmQ6IGNjKCcmJyksXG5cdEJhY2tzbGFzaDogY2MoJ1xcXFwnKSxcblx0QmFja3RpY2s6IGNjKCdgJyksXG5cdEJhbmc6IGNjKCchJyksXG5cdEJhcjogY2MoJ3wnKSxcblx0Q2FyZXQ6IGNjKCdeJyksXG5cdENhc2g6IGNjKCckJyksXG5cdENsb3NlQnJhY2U6IGNjKCd9JyksXG5cdENsb3NlQnJhY2tldDogY2MoJ10nKSxcblx0Q2xvc2VQYXJlbnRoZXNpczogY2MoJyknKSxcblx0Q29sb246IGNjKCc6JyksXG5cdENvbW1hOiBjYygnLCcpLFxuXHREb3Q6IGNjKCcuJyksXG5cdEVxdWFsOiBjYygnPScpLFxuXHRIeXBoZW46IGNjKCctJyksXG5cdExldHRlckI6IGNjKCdiJyksXG5cdExldHRlck86IGNjKCdvJyksXG5cdExldHRlclg6IGNjKCd4JyksXG5cdE4wOiBjYygnMCcpLFxuXHROMTogY2MoJzEnKSxcblx0TjI6IGNjKCcyJyksXG5cdE4zOiBjYygnMycpLFxuXHRONDogY2MoJzQnKSxcblx0TjU6IGNjKCc1JyksXG5cdE42OiBjYygnNicpLFxuXHRONzogY2MoJzcnKSxcblx0Tjg6IGNjKCc4JyksXG5cdE45OiBjYygnOScpLFxuXHROZXdsaW5lOiBjYygnXFxuJyksXG5cdE51bGw6IGNjKCdcXDAnKSxcblx0T3BlbkJyYWNlOiBjYygneycpLFxuXHRPcGVuQnJhY2tldDogY2MoJ1snKSxcblx0T3BlblBhcmVudGhlc2lzOiBjYygnKCcpLFxuXHRQZXJjZW50OiBjYygnJScpLFxuXHRRdW90ZTogY2MoJ1wiJyksXG5cdFNlbWljb2xvbjogY2MoJzsnKSxcblx0U3BhY2U6IGNjKCcgJyksXG5cdFRhYjogY2MoJ1xcdCcpLFxuXHRUaWNrOiBjYygnXFwnJyksXG5cdFRpbGRlOiBjYygnficpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzaG93Q2hhcihjaGFyKSB7XG5cdHJldHVybiBjb2RlKFN0cmluZy5mcm9tQ2hhckNvZGUoY2hhcikpXG59XG5cbmZ1bmN0aW9uIGNoYXJQcmVkKGNoYXJzLCBuZWdhdGU9ZmFsc2UpIHtcblx0bGV0IHNyYyA9ICdzd2l0Y2goY2gpIHtcXG4nXG5cdGZvciAobGV0IGkgPSAwOyBpIDwgY2hhcnMubGVuZ3RoOyBpID0gaSArIDEpXG5cdFx0c3JjID0gYCR7c3JjfWNhc2UgJHtjaGFycy5jaGFyQ29kZUF0KGkpfTogYFxuXHRzcmMgPSBgJHtzcmN9IHJldHVybiAkeyFuZWdhdGV9XFxuZGVmYXVsdDogcmV0dXJuICR7bmVnYXRlfVxcbn1gXG5cdHJldHVybiBGdW5jdGlvbignY2gnLCBzcmMpXG59XG5cbmV4cG9ydCBjb25zdFxuXHRpc0RpZ2l0ID0gY2hhclByZWQoJzAxMjM0NTY3ODknKSxcblx0aXNEaWdpdEJpbmFyeSA9IGNoYXJQcmVkKCcwMScpLFxuXHRpc0RpZ2l0T2N0YWwgPSBjaGFyUHJlZCgnMDEyMzQ1NjcnKSxcblx0aXNEaWdpdEhleCA9IGNoYXJQcmVkKCcwMTIzNDU2Nzg5YWJjZGVmJylcblxuLy8gQW55dGhpbmcgbm90IGV4cGxpY2l0bHkgcmVzZXJ2ZWQgaXMgYSB2YWxpZCBuYW1lIGNoYXJhY3Rlci5cbmNvbnN0IHJlc2VydmVkQ2hhcmFjdGVycyA9ICdgIyVeJlxcXFw7LCdcbmV4cG9ydCBjb25zdCBpc05hbWVDaGFyYWN0ZXIgPSBjaGFyUHJlZCgnKClbXXt9XFwnLjp8IFxcblxcdFwiJyArIHJlc2VydmVkQ2hhcmFjdGVycywgdHJ1ZSlcbiJdfQ==