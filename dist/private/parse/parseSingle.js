if (typeof define !== 'function') var define = require('amdefine')(module);define(['exports', 'module', '../MsAst', '../Token', '../util', './checks', './parseBlock', './parseQuote', './parse*', './Slice'], function (exports, module, _MsAst, _Token, _util, _checks, _parseBlock, _parseQuote, _parse, _Slice) {
	'use strict';

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _parseQuote2 = _interopRequireDefault(_parseQuote);

	var _Slice2 = _interopRequireDefault(_Slice);

	module.exports = token => {
		const loc = token.loc;

		if (token instanceof _Token.Name) return new _MsAst.LocalAccess(loc, token.name);else if (token instanceof _Token.Group) {
			const slice = _Slice2.default.group(token);
			switch (token.kind) {
				case _Token.G_Space:
					return (0, _parse.parseSpaced)(slice);
				case _Token.G_Parenthesis:
					return (0, _parse.parseExpr)(slice);
				case _Token.G_Bracket:
					return new _MsAst.BagSimple(loc, (0, _parse.parseExprParts)(slice));
				case _Token.G_Block:
					return (0, _parseBlock.blockWrap)(slice);
				case _Token.G_Quote:
					return (0, _parseQuote2.default)(slice);
				default:
					throw new Error(token.kind);
			}
		} else if (token instanceof _MsAst.NumberLiteral) return token;else if (token instanceof _Token.Keyword) switch (token.kind) {
			case _Token.KW_Focus:
				return _MsAst.LocalAccess.focus(loc);
			default:
				return (0, _util.ifElse)((0, _Token.opKeywordKindToSpecialValueKind)(token.kind), _ => new _MsAst.SpecialVal(loc, _), () => (0, _checks.unexpected)(token));
		} else (0, _checks.unexpected)(token);
	};
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBhcnNlU2luZ2xlLmpzIiwicHJpdmF0ZS9wYXJzZS9wYXJzZVNpbmdsZS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7O2tCQ1VlLEtBQUssSUFBSTtRQUNoQixHQUFHLEdBQUksS0FBSyxDQUFaLEdBQUc7O0FBQ1YsTUFBSSxLQUFLLG1CQVgwRCxJQUFJLEFBVzlDLEVBQ3hCLE9BQU8sV0FiVSxXQUFXLENBYUwsR0FBRyxFQUFFLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQSxLQUNuQyxJQUFJLEtBQUssbUJBYlAsS0FBSyxBQWFtQixFQUFFO0FBQ2hDLFNBQU0sS0FBSyxHQUFHLGdCQUFNLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQTtBQUNoQyxXQUFRLEtBQUssQ0FBQyxJQUFJO0FBQ2pCLGdCQWhCK0MsT0FBTztBQWlCckQsWUFBTyxXQVh3QixXQUFXLEVBV3ZCLEtBQUssQ0FBQyxDQUFBO0FBQUEsQUFDMUIsZ0JBbEJnQyxhQUFhO0FBbUI1QyxZQUFPLFdBYkgsU0FBUyxFQWFJLEtBQUssQ0FBQyxDQUFBO0FBQUEsQUFDeEIsZ0JBcEJxQixTQUFTO0FBcUI3QixZQUFPLFdBdEJILFNBQVMsQ0FzQlEsR0FBRyxFQUFFLFdBZlgsY0FBYyxFQWVZLEtBQUssQ0FBQyxDQUFDLENBQUE7QUFBQSxBQUNqRCxnQkF0QlksT0FBTztBQXVCbEIsWUFBTyxnQkFuQkgsU0FBUyxFQW1CSSxLQUFLLENBQUMsQ0FBQTtBQUFBLEFBQ3hCLGdCQXhCd0QsT0FBTztBQXlCOUQsWUFBTywwQkFBVyxLQUFLLENBQUMsQ0FBQTtBQUFBLEFBQ3pCO0FBQ0MsV0FBTSxJQUFJLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUE7QUFBQSxJQUM1QjtHQUNELE1BQU0sSUFBSSxLQUFLLG1CQTlCZSxhQUFhLEFBOEJILEVBQ3hDLE9BQU8sS0FBSyxDQUFBLEtBQ1IsSUFBSSxLQUFLLG1CQTlCbUIsT0FBTyxBQThCUCxFQUNoQyxRQUFRLEtBQUssQ0FBQyxJQUFJO0FBQ2pCLGVBaEN3QyxRQUFRO0FBaUMvQyxXQUFPLE9BbkNRLFdBQVcsQ0FtQ1AsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFBO0FBQUEsQUFDOUI7QUFDQyxXQUFPLFVBbENILE1BQU0sRUFrQ0ksV0FuQ2pCLCtCQUErQixFQW1Da0IsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUN4RCxDQUFDLElBQUksV0F0Q3FDLFVBQVUsQ0FzQ2hDLEdBQUcsRUFBRSxDQUFDLENBQUMsRUFDM0IsTUFBTSxZQW5DSCxVQUFVLEVBbUNJLEtBQUssQ0FBQyxDQUFDLENBQUE7QUFBQSxHQUMxQixNQUVELFlBdENNLFVBQVUsRUFzQ0wsS0FBSyxDQUFDLENBQUE7RUFDbEIiLCJmaWxlIjoicHJpdmF0ZS9wYXJzZS9wYXJzZVNpbmdsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbbnVsbCwiaW1wb3J0IHtCYWdTaW1wbGUsIExvY2FsQWNjZXNzLCBOdW1iZXJMaXRlcmFsLCBTcGVjaWFsVmFsfSBmcm9tICcuLi9Nc0FzdCdcbmltcG9ydCB7R3JvdXAsIEdfQmxvY2ssIEdfQnJhY2tldCwgR19QYXJlbnRoZXNpcywgR19TcGFjZSwgR19RdW90ZSwgTmFtZSxcblx0b3BLZXl3b3JkS2luZFRvU3BlY2lhbFZhbHVlS2luZCwgS2V5d29yZCwgS1dfRm9jdXN9IGZyb20gJy4uL1Rva2VuJ1xuaW1wb3J0IHtpZkVsc2V9IGZyb20gJy4uL3V0aWwnXG5pbXBvcnQge3VuZXhwZWN0ZWR9IGZyb20gJy4vY2hlY2tzJ1xuaW1wb3J0IHtibG9ja1dyYXB9IGZyb20gJy4vcGFyc2VCbG9jaydcbmltcG9ydCBwYXJzZVF1b3RlIGZyb20gJy4vcGFyc2VRdW90ZSdcbmltcG9ydCB7cGFyc2VFeHByLCBwYXJzZUV4cHJQYXJ0cywgcGFyc2VTcGFjZWR9IGZyb20gJy4vcGFyc2UqJ1xuaW1wb3J0IFNsaWNlIGZyb20gJy4vU2xpY2UnXG5cbmV4cG9ydCBkZWZhdWx0IHRva2VuID0+IHtcblx0Y29uc3Qge2xvY30gPSB0b2tlblxuXHRpZiAodG9rZW4gaW5zdGFuY2VvZiBOYW1lKVxuXHRcdHJldHVybiBuZXcgTG9jYWxBY2Nlc3MobG9jLCB0b2tlbi5uYW1lKVxuXHRlbHNlIGlmICh0b2tlbiBpbnN0YW5jZW9mIEdyb3VwKSB7XG5cdFx0Y29uc3Qgc2xpY2UgPSBTbGljZS5ncm91cCh0b2tlbilcblx0XHRzd2l0Y2ggKHRva2VuLmtpbmQpIHtcblx0XHRcdGNhc2UgR19TcGFjZTpcblx0XHRcdFx0cmV0dXJuIHBhcnNlU3BhY2VkKHNsaWNlKVxuXHRcdFx0Y2FzZSBHX1BhcmVudGhlc2lzOlxuXHRcdFx0XHRyZXR1cm4gcGFyc2VFeHByKHNsaWNlKVxuXHRcdFx0Y2FzZSBHX0JyYWNrZXQ6XG5cdFx0XHRcdHJldHVybiBuZXcgQmFnU2ltcGxlKGxvYywgcGFyc2VFeHByUGFydHMoc2xpY2UpKVxuXHRcdFx0Y2FzZSBHX0Jsb2NrOlxuXHRcdFx0XHRyZXR1cm4gYmxvY2tXcmFwKHNsaWNlKVxuXHRcdFx0Y2FzZSBHX1F1b3RlOlxuXHRcdFx0XHRyZXR1cm4gcGFyc2VRdW90ZShzbGljZSlcblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdHRocm93IG5ldyBFcnJvcih0b2tlbi5raW5kKVxuXHRcdH1cblx0fSBlbHNlIGlmICh0b2tlbiBpbnN0YW5jZW9mIE51bWJlckxpdGVyYWwpXG5cdFx0cmV0dXJuIHRva2VuXG5cdGVsc2UgaWYgKHRva2VuIGluc3RhbmNlb2YgS2V5d29yZClcblx0XHRzd2l0Y2ggKHRva2VuLmtpbmQpIHtcblx0XHRcdGNhc2UgS1dfRm9jdXM6XG5cdFx0XHRcdHJldHVybiBMb2NhbEFjY2Vzcy5mb2N1cyhsb2MpXG5cdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRyZXR1cm4gaWZFbHNlKG9wS2V5d29yZEtpbmRUb1NwZWNpYWxWYWx1ZUtpbmQodG9rZW4ua2luZCksXG5cdFx0XHRcdFx0XyA9PiBuZXcgU3BlY2lhbFZhbChsb2MsIF8pLFxuXHRcdFx0XHRcdCgpID0+IHVuZXhwZWN0ZWQodG9rZW4pKVxuXHRcdH1cblx0ZWxzZVxuXHRcdHVuZXhwZWN0ZWQodG9rZW4pXG59XG4iXSwic291cmNlUm9vdCI6Ii9zcmMifQ==
