if (typeof define !== 'function') var define = require('amdefine')(module);define(['exports', 'esast/dist/ast', 'esast/dist/mangle-identifier', 'esast/dist/util', '../context', '../MsAst', '../util', './ast-constants', './ms-call'], function (exports, _esastDistAst, _esastDistMangleIdentifier, _esastDistUtil, _context, _MsAst, _util, _astConstants, _msCall) {
	'use strict';

	Object.defineProperty(exports, '__esModule', {
		value: true
	});
	exports.t0 = t0;
	exports.t1 = t1;
	exports.t2 = t2;
	exports.t3 = t3;
	exports.tLines = tLines;
	exports.accessLocalDeclare = accessLocalDeclare;
	exports.declare = declare;
	exports.idForDeclareCached = idForDeclareCached;
	exports.opTypeCheckForLocalDeclare = opTypeCheckForLocalDeclare;
	exports.throwErrorFromString = throwErrorFromString;
	exports.makeDeclarator = makeDeclarator;
	exports.maybeWrapInCheckContains = maybeWrapInCheckContains;
	exports.getMember = getMember;
	exports.doThrow = doThrow;
	exports.memberStringOrVal = memberStringOrVal;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _mangleIdentifier = _interopRequireDefault(_esastDistMangleIdentifier);

	function t0(expr) {
		return (0, _esastDistUtil.loc)(expr.transpile(), expr.loc);
	}

	function t1(expr, arg) {
		return (0, _esastDistUtil.loc)(expr.transpile(arg), expr.loc);
	}

	function t2(expr, arg, arg2) {
		return (0, _esastDistUtil.loc)(expr.transpile(arg, arg2));
	}

	function t3(expr, arg, arg2, arg3) {
		return (0, _esastDistUtil.loc)(expr.transpile(arg, arg2, arg3), expr.loc);
	}

	function tLines(exprs) {
		const out = [];
		for (const expr of exprs) {
			const ast = expr.transpile();
			if (ast instanceof Array)
				// Ignore produces 0 statements and Region produces many.
				for (const _ of ast) out.push((0, _esastDistUtil.toStatement)(_));else out.push((0, _esastDistUtil.loc)((0, _esastDistUtil.toStatement)(ast), expr.loc));
		}
		return out;
	}

	function accessLocalDeclare(localDeclare) {
		const id = idForDeclareCached(localDeclare);
		return localDeclare.isLazy() ? (0, _msCall.msUnlazy)(id) : new _esastDistAst.Identifier(id.name);
	}

	function declare(localDeclare, val) {
		return new _esastDistAst.VariableDeclaration('const', [new _esastDistAst.VariableDeclarator(idForDeclareCached(localDeclare), val)]);
	}

	const declareToId = new WeakMap();

	function idForDeclareCached(localDeclare) {
		let _ = declareToId.get(localDeclare);
		if (_ === undefined) {
			_ = new _esastDistAst.Identifier((0, _mangleIdentifier.default)(localDeclare.name));
			declareToId.set(localDeclare, _);
		}
		return _;
	}

	function opTypeCheckForLocalDeclare(localDeclare) {
		// TODO: Way to typecheck lazies
		return (0, _util.opIf)(!localDeclare.isLazy(), () => (0, _util.opMap)(localDeclare.opType, type => new _esastDistAst.ExpressionStatement((0, _msCall.msCheckContains)(t0(type), accessLocalDeclare(localDeclare), new _esastDistAst.Literal(localDeclare.name)))));
	}

	function throwErrorFromString(message) {
		// TODO:ES6 Should be able to use IdError
		return new _esastDistAst.ThrowStatement(new _esastDistAst.NewExpression(new _esastDistAst.Identifier('Error'), [new _esastDistAst.Literal(message)]));
	}

	function makeDeclarator(assignee, value, valueIsAlreadyLazy) {
		const name = assignee.name;
		const opType = assignee.opType;

		const isLazy = assignee.isLazy();
		// TODO: assert(assignee.opType === null)
		// or TODO: Allow type check on lazy value?
		value = isLazy ? value : maybeWrapInCheckContains(value, opType, name);
		const val = isLazy && !valueIsAlreadyLazy ? (0, _msCall.lazyWrap)(value) : value;
		(0, _util.assert)(isLazy || !valueIsAlreadyLazy);
		return new _esastDistAst.VariableDeclarator(idForDeclareCached(assignee), val);
	}

	function maybeWrapInCheckContains(ast, opType, name) {
		return _context.options.includeChecks() && opType !== null ? (0, _msCall.msCheckContains)(t0(opType), ast, new _esastDistAst.Literal(name)) : ast;
	}

	function getMember(astObject, gotName, isLazy, isModule) {
		return isLazy ? (0, _msCall.msLazyGet)(astObject, new _esastDistAst.Literal(gotName)) : isModule && _context.options.includeChecks() ? (0, _msCall.msGet)(astObject, new _esastDistAst.Literal(gotName)) : (0, _esastDistUtil.member)(astObject, gotName);
	}

	function doThrow(thrown) {
		return new _esastDistAst.ThrowStatement(thrown instanceof _MsAst.Quote ? new _esastDistAst.NewExpression(_astConstants.GlobalError, [t0(thrown)]) : t0(thrown));
	}

	function memberStringOrVal(object, memberName) {
		return typeof memberName === 'string' ? (0, _esastDistUtil.member)(object, memberName) : new _esastDistAst.MemberExpression(object, t0(memberName));
	}
});
//# sourceMappingURL=data:application/json;base64,
