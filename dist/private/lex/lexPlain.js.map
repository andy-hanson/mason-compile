{"version":3,"sources":["private/lex/lexPlain.js"],"names":[],"mappings":"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","file":"private/lex/lexPlain.js","sourcesContent":["(function (factory) {\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === 'function' && define.amd) {\n        define([\"require\", \"exports\", 'esast/lib/Loc', '../context', '../Token', '../util', './chars', './groupContext', './lex*', './lexName', './sourceContext'], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    var Loc_1 = require('esast/lib/Loc');\n    var context_1 = require('../context');\n    var Token_1 = require('../Token');\n    var util_1 = require('../util');\n    var chars_1 = require('./chars');\n    var groupContext_1 = require('./groupContext');\n    var lex_1 = require('./lex*');\n    var lexName_1 = require('./lexName');\n    var sourceContext_1 = require('./sourceContext');\n    function lexPlain(isInQuote) {\n        let indent = 0;\n        let startColumn;\n        function startPos() {\n            return new Loc_1.Pos(sourceContext_1.line, startColumn);\n        }\n        function loc() {\n            return new Loc_1.default(startPos(), sourceContext_1.pos());\n        }\n        function keyword(kind) {\n            groupContext_1.addToCurrentGroup(new Token_1.Keyword(loc(), kind));\n        }\n        function funKeyword(kind) {\n            keyword(kind);\n            groupContext_1.space(loc());\n        }\n        function eatAndAddNumber() {\n            const startIndex = sourceContext_1.index - 1;\n            sourceContext_1.tryEat(chars_1.Char.Hyphen);\n            if (sourceContext_1.peek(-1) === chars_1.Char.N0) {\n                const p = sourceContext_1.peek();\n                switch (p) {\n                    case chars_1.Char.LetterB:\n                    case chars_1.Char.LetterO:\n                    case chars_1.Char.LetterX: {\n                        sourceContext_1.skip();\n                        const isDigitSpecial = p === chars_1.Char.LetterB ?\n                            chars_1.isDigitBinary :\n                            p === chars_1.Char.LetterO ?\n                                chars_1.isDigitOctal :\n                                chars_1.isDigitHex;\n                        sourceContext_1.skipWhile(isDigitSpecial);\n                        break;\n                    }\n                    case chars_1.Char.Dot:\n                        if (chars_1.isDigit(sourceContext_1.peek(1))) {\n                            sourceContext_1.skip();\n                            sourceContext_1.skipWhile(chars_1.isDigit);\n                        }\n                        break;\n                    default:\n                }\n            }\n            else {\n                sourceContext_1.skipWhile(chars_1.isDigit);\n                if (sourceContext_1.peek() === chars_1.Char.Dot && chars_1.isDigit(sourceContext_1.peek(1))) {\n                    sourceContext_1.skip();\n                    sourceContext_1.skipWhile(chars_1.isDigit);\n                }\n            }\n            const str = sourceContext_1.sourceString.slice(startIndex, sourceContext_1.index);\n            groupContext_1.addToCurrentGroup(new Token_1.NumberToken(loc(), str));\n        }\n        function eatIndent() {\n            const optIndent = context_1.options.indent;\n            if (typeof optIndent === 'number') {\n                const spaces = sourceContext_1.skipWhileEquals(chars_1.Char.Space);\n                context_1.check(spaces % optIndent === 0, sourceContext_1.pos, _ => _.badSpacedIndent(optIndent));\n                return spaces / optIndent;\n            }\n            else {\n                const indent = sourceContext_1.skipWhileEquals(chars_1.Char.Tab);\n                context_1.check(sourceContext_1.peek() !== chars_1.Char.Space, sourceContext_1.pos, _ => _.noLeadingSpace);\n                return indent;\n            }\n        }\n        function handleName() {\n            lexName_1.default(startPos(), false);\n        }\n        loop: for (;;) {\n            startColumn = sourceContext_1.column;\n            const characterEaten = sourceContext_1.eat();\n            switch (characterEaten) {\n                case chars_1.Char.Null:\n                    break loop;\n                case chars_1.Char.Backtick:\n                case chars_1.Char.Quote:\n                    lex_1.lexQuote(indent, characterEaten === chars_1.Char.Backtick);\n                    break;\n                case chars_1.Char.OpenParenthesis:\n                    if (sourceContext_1.tryEat(chars_1.Char.CloseParenthesis))\n                        groupContext_1.addToCurrentGroup(new Token_1.GroupParenthesis(loc(), []));\n                    else\n                        groupContext_1.openParenthesis(loc());\n                    break;\n                case chars_1.Char.OpenBracket:\n                    if (sourceContext_1.tryEat(chars_1.Char.CloseBracket))\n                        groupContext_1.addToCurrentGroup(new Token_1.GroupBracket(loc(), []));\n                    else {\n                        groupContext_1.openGroup(startPos(), Token_1.GroupBracket);\n                        groupContext_1.openGroup(sourceContext_1.pos(), Token_1.GroupSpace);\n                    }\n                    break;\n                case chars_1.Char.CloseParenthesis:\n                    if (groupContext_1.closeInterpolationOrParenthesis(loc())) {\n                        util_1.assert(isInQuote);\n                        break loop;\n                    }\n                    break;\n                case chars_1.Char.CloseBracket:\n                    groupContext_1.closeGroup(startPos(), Token_1.GroupSpace);\n                    groupContext_1.closeGroup(sourceContext_1.pos(), Token_1.GroupBracket);\n                    break;\n                case chars_1.Char.Space:\n                    groupContext_1.space(loc());\n                    break;\n                case chars_1.Char.Newline: {\n                    context_1.check(!isInQuote, loc, _ => _.noNewlineInInterpolation);\n                    if (sourceContext_1.peek(-2) === chars_1.Char.Space)\n                        context_1.warn(sourceContext_1.pos(), _ => _.trailingSpace);\n                    sourceContext_1.skipNewlines();\n                    const oldIndent = indent;\n                    indent = eatIndent();\n                    if (indent > oldIndent) {\n                        context_1.check(indent === oldIndent + 1, loc, _ => _.tooMuchIndent);\n                        const l = loc();\n                        if (util_1.isEmpty(groupContext_1.curGroup.subTokens) ||\n                            !Token_1.isKeyword(83, util_1.last(groupContext_1.curGroup.subTokens))) {\n                            if (groupContext_1.curGroup instanceof Token_1.GroupSpace)\n                                groupContext_1.closeSpaceOKIfEmpty(l.start);\n                            groupContext_1.openGroup(l.end, Token_1.GroupSpace);\n                        }\n                        groupContext_1.openGroup(l.start, Token_1.GroupBlock);\n                        groupContext_1.openLine(l.end);\n                    }\n                    else {\n                        const l = loc();\n                        for (let i = indent; i < oldIndent; i = i + 1)\n                            groupContext_1.closeGroupsForDedent(l.start);\n                        groupContext_1.closeLine(l.start);\n                        groupContext_1.openLine(l.end);\n                    }\n                    break;\n                }\n                case chars_1.Char.Tab:\n                    throw context_1.fail(loc(), _ => _.nonLeadingTab);\n                case chars_1.Char.Bang:\n                    if (sourceContext_1.tryEat(chars_1.Char.Bar))\n                        funKeyword(66);\n                    else\n                        handleName();\n                    break;\n                case chars_1.Char.Cash:\n                    if (sourceContext_1.tryEat2(chars_1.Char.Bang, chars_1.Char.Bar))\n                        funKeyword(70);\n                    else if (sourceContext_1.tryEat(chars_1.Char.Bar))\n                        funKeyword(69);\n                    else\n                        handleName();\n                    break;\n                case chars_1.Char.Star:\n                    if (sourceContext_1.tryEat2(chars_1.Char.Bang, chars_1.Char.Bar))\n                        funKeyword(74);\n                    else if (sourceContext_1.tryEat(chars_1.Char.Bar))\n                        funKeyword(73);\n                    else\n                        handleName();\n                    break;\n                case chars_1.Char.Bar:\n                    if (sourceContext_1.tryEat(chars_1.Char.Space) || sourceContext_1.tryEat(chars_1.Char.Tab)) {\n                        const text = sourceContext_1.eatRestOfLine();\n                        groupContext_1.closeSpaceOKIfEmpty(startPos());\n                        context_1.check(groupContext_1.curGroup instanceof Token_1.GroupLine && groupContext_1.curGroup.subTokens.length === 0, loc, _ => _.trailingDocComment);\n                        groupContext_1.addToCurrentGroup(new Token_1.DocComment(loc(), text));\n                    }\n                    else if (sourceContext_1.tryEat(chars_1.Char.Bar))\n                        sourceContext_1.skipRestOfLine();\n                    else\n                        funKeyword(65);\n                    break;\n                case chars_1.Char.Hyphen:\n                    if (chars_1.isDigit(sourceContext_1.peek()))\n                        eatAndAddNumber();\n                    else\n                        handleName();\n                    break;\n                case chars_1.Char.N0:\n                case chars_1.Char.N1:\n                case chars_1.Char.N2:\n                case chars_1.Char.N3:\n                case chars_1.Char.N4:\n                case chars_1.Char.N5:\n                case chars_1.Char.N6:\n                case chars_1.Char.N7:\n                case chars_1.Char.N8:\n                case chars_1.Char.N9:\n                    eatAndAddNumber();\n                    break;\n                case chars_1.Char.Dot: {\n                    if (sourceContext_1.peek() === chars_1.Char.Space || sourceContext_1.peek() === chars_1.Char.Newline) {\n                        groupContext_1.closeSpaceOKIfEmpty(startPos());\n                        keyword(92);\n                    }\n                    else if (sourceContext_1.tryEat(chars_1.Char.Bar))\n                        funKeyword(67);\n                    else if (sourceContext_1.tryEat2(chars_1.Char.Bang, chars_1.Char.Bar))\n                        funKeyword(68);\n                    else if (sourceContext_1.tryEat2(chars_1.Char.Star, chars_1.Char.Bar))\n                        funKeyword(75);\n                    else if (sourceContext_1.tryEat3(chars_1.Char.Star, chars_1.Char.Bang, chars_1.Char.Bar))\n                        funKeyword(76);\n                    else if (sourceContext_1.tryEat(chars_1.Char.Dot))\n                        if (sourceContext_1.tryEat(chars_1.Char.Dot))\n                            keyword(54);\n                        else\n                            keyword(53);\n                    else\n                        keyword(52);\n                    break;\n                }\n                case chars_1.Char.Colon:\n                    if (sourceContext_1.tryEat(chars_1.Char.Equal))\n                        keyword(84);\n                    else\n                        keyword(47);\n                    break;\n                case chars_1.Char.Tick:\n                    keyword(102);\n                    break;\n                case chars_1.Char.Tilde:\n                    keyword(83);\n                    break;\n                case chars_1.Char.Ampersand:\n                    keyword(35);\n                    break;\n                case chars_1.Char.Backslash:\n                case chars_1.Char.Caret:\n                case chars_1.Char.CloseBrace:\n                case chars_1.Char.Comma:\n                case chars_1.Char.Hash:\n                case chars_1.Char.OpenBrace:\n                case chars_1.Char.Percent:\n                case chars_1.Char.Semicolon:\n                    throw context_1.fail(loc(), _ => _.reservedChar(characterEaten));\n                default:\n                    handleName();\n            }\n        }\n    }\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = lexPlain;\n});\n"],"sourceRoot":"/source/"}