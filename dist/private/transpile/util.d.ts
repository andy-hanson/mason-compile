import Node, { ArrowFunctionExpression, BlockStatement, Expression, Identifier, MemberExpression, Statement, ThrowStatement, VariableDeclarator, VariableDeclaration } from 'esast/lib/ast';
import Op from 'op/Op';
import MsAst, { Block, Val, LineContent, LocalDeclare, Name, ValOrDo } from '../MsAst';
export declare function t0(expr: MsAst): any;
export declare function t1(expr: MsAst, arg: any): any;
export declare function t2(expr: MsAst, arg: any, arg2: any): any;
export declare function t3(expr: MsAst, arg: any, arg2: any, arg3: any): any;
export declare function tLines(exprs: Array<LineContent>): Array<Statement>;
export declare function accessLocalDeclare(localDeclare: LocalDeclare): Expression;
export declare function makeDeclare(localDeclare: LocalDeclare, val: Node): VariableDeclaration;
export declare function idForDeclareCached(localDeclare: LocalDeclare): Identifier;
export declare function opTypeCheckForLocalDeclare(localDeclare: LocalDeclare): Op<Statement>;
export declare function throwErrorFromString(message: string): ThrowStatement;
export declare function makeDeclarator(assignee: LocalDeclare, value: Expression, valueIsAlreadyLazy: boolean): VariableDeclarator;
export declare function maybeWrapInCheckInstance(ast: Expression, opType: Op<Val>, name: string): Expression;
export declare function doThrow(thrown: Val): ThrowStatement;
export declare function transpileName(name: Name): Expression;
export declare function memberStringOrVal(object: Expression, memberName: Name): MemberExpression;
export declare function lazyWrap(value: Expression): Expression;
export declare function msCall(name: string, ...args: Array<Expression>): Expression;
export declare function msMember(name: string): Expression;
export declare function makeDestructureDeclarators(assignees: Array<LocalDeclare>, isLazy: boolean, value: Expression, isModule: boolean): Array<VariableDeclarator>;
export declare function blockWrap(block: BlockStatement): Expression;
export declare function callFocusFun(value: Expression, calledOn: Expression): Expression;
export declare function blockWrapIfBlock(value: Block | Val): Expression;
export declare function blockWrapIfVal(ast: ValOrDo, statement: Statement | Array<Statement>): Expression | Statement | Array<Statement>;
export declare function focusFun(value: Expression): ArrowFunctionExpression;
export declare function plainLet(identifier: Identifier, value: Expression): VariableDeclaration;
