if (typeof define !== 'function') var define = require('amdefine')(module);define(['exports', 'module', './util'], function (exports, module, _util) {
	'use strict';

	class CompileOptions {
		constructor(opts) {
			// TODO:ES6 Optional arguments
			if (opts === undefined) opts = {};
			(0, _util.type)(opts, Object);

			const defaultTo = (name, _default) => {
				const _ = opts[name];
				if (_ === undefined) return _default;else {
					(0, _util.type)(_, _default.constructor);
					return _;
				}
			};

			const define = (name, _default) => {
				this[`_${ name }`] = defaultTo(name, _default);
			};

			const defaults = {
				includeAmdefine: true,
				includeSourceMap: true,
				includeModuleName: true,
				forceNonLazyModule: false,
				useStrict: true,
				checks: true,
				'warn-as-error': false
			};

			for (const _ in defaults) define(_, defaults[_]);

			this._inFile = opts.inFile;
			if (this._inFile === undefined) {
				if (this._includeSourceMap) throw new Error('Either supply `inFile` option or make `includeSourceMap` false.');
				if (this._includeModuleName) throw new Error('Either supply `inFile` option or make `includeModuleName` false.');
			}
		}

		moduleName() {
			return this._inFile === undefined ? 'anonymous' : noExt(basename(this._inFile));
		}

		jsBaseName() {
			return `${ this.moduleName() }.js`;
		}
		modulePath() {
			return this._inFile;
		}

		includeChecks() {
			return this._checks;
		}

		warnAsError() {
			return this['_warn-as-error'];
		}

		includeAmdefine() {
			return this._includeAmdefine;
		}
		includeSourceMap() {
			return this._includeSourceMap;
		}
		includeModuleName() {
			return this._includeModuleName;
		}
		includeUseStrict() {
			return this._useStrict;
		}

		lazyModule() {
			return !this._forceNonLazyModule;
		}
	}

	module.exports = CompileOptions;

	const basename = path => (0, _util.last)(path.split('/')),
	      extname = path => (0, _util.last)(path.split('.')),
	      noExt = path =>
	// - 1 for the '.'
	path.substring(0, path.length - 1 - extname(path).length);
});
//# sourceMappingURL=data:application/json;base64,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R0FBRyxJQUFJLElBQ2QsVUFqRU8sSUFBSSxFQWlFTixJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO09BQ3RCLE9BQU8sR0FBRyxJQUFJLElBQ2IsVUFuRU8sSUFBSSxFQW1FTixJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO09BQ3RCLEtBQUssR0FBRyxJQUFJOztBQUVYLEtBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQSIsImZpbGUiOiJwcml2YXRlL0NvbXBpbGVPcHRpb25zLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbGFzdCwgdHlwZSB9IGZyb20gJy4vdXRpbCdcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29tcGlsZU9wdGlvbnMge1xuXHRjb25zdHJ1Y3RvcihvcHRzKSB7XG5cdFx0Ly8gVE9ETzpFUzYgT3B0aW9uYWwgYXJndW1lbnRzXG5cdFx0aWYgKG9wdHMgPT09IHVuZGVmaW5lZCkgb3B0cyA9IHsgfVxuXHRcdHR5cGUob3B0cywgT2JqZWN0KVxuXG5cdFx0Y29uc3QgZGVmYXVsdFRvID0gKG5hbWUsIF9kZWZhdWx0KSA9PiB7XG5cdFx0XHRjb25zdCBfID0gb3B0c1tuYW1lXVxuXHRcdFx0aWYgKF8gPT09IHVuZGVmaW5lZClcblx0XHRcdFx0cmV0dXJuIF9kZWZhdWx0XG5cdFx0XHRlbHNlIHtcblx0XHRcdFx0dHlwZShfLCBfZGVmYXVsdC5jb25zdHJ1Y3Rvcilcblx0XHRcdFx0cmV0dXJuIF9cblx0XHRcdH1cblx0XHR9XG5cblx0XHRjb25zdCBkZWZpbmUgPSAobmFtZSwgX2RlZmF1bHQpID0+IHtcblx0XHRcdHRoaXNbYF8ke25hbWV9YF0gPSBkZWZhdWx0VG8obmFtZSwgX2RlZmF1bHQpXG5cdFx0fVxuXG5cdFx0Y29uc3QgZGVmYXVsdHMgPSB7XG5cdFx0XHRpbmNsdWRlQW1kZWZpbmU6IHRydWUsXG5cdFx0XHRpbmNsdWRlU291cmNlTWFwOiB0cnVlLFxuXHRcdFx0aW5jbHVkZU1vZHVsZU5hbWU6IHRydWUsXG5cdFx0XHRmb3JjZU5vbkxhenlNb2R1bGU6IGZhbHNlLFxuXHRcdFx0dXNlU3RyaWN0OiB0cnVlLFxuXHRcdFx0Y2hlY2tzOiB0cnVlLFxuXHRcdFx0J3dhcm4tYXMtZXJyb3InOiBmYWxzZVxuXHRcdH1cblxuXHRcdGZvciAoY29uc3QgXyBpbiBkZWZhdWx0cylcblx0XHRcdGRlZmluZShfLCBkZWZhdWx0c1tfXSlcblxuXHRcdHRoaXMuX2luRmlsZSA9IG9wdHMuaW5GaWxlXG5cdFx0aWYgKHRoaXMuX2luRmlsZSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRpZiAodGhpcy5faW5jbHVkZVNvdXJjZU1hcClcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCdFaXRoZXIgc3VwcGx5IGBpbkZpbGVgIG9wdGlvbiBvciBtYWtlIGBpbmNsdWRlU291cmNlTWFwYCBmYWxzZS4nKVxuXHRcdFx0aWYgKHRoaXMuX2luY2x1ZGVNb2R1bGVOYW1lKVxuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ0VpdGhlciBzdXBwbHkgYGluRmlsZWAgb3B0aW9uIG9yIG1ha2UgYGluY2x1ZGVNb2R1bGVOYW1lYCBmYWxzZS4nKVxuXHRcdH1cblx0fVxuXG5cdG1vZHVsZU5hbWUoKSB7XG5cdFx0cmV0dXJuIHRoaXMuX2luRmlsZSA9PT0gdW5kZWZpbmVkID8gJ2Fub255bW91cycgOiBub0V4dChiYXNlbmFtZSh0aGlzLl9pbkZpbGUpKVxuXHR9XG5cblx0anNCYXNlTmFtZSgpIHsgcmV0dXJuIGAke3RoaXMubW9kdWxlTmFtZSgpfS5qc2AgfVxuXHRtb2R1bGVQYXRoKCkgeyByZXR1cm4gdGhpcy5faW5GaWxlIH1cblxuXHRpbmNsdWRlQ2hlY2tzKCkgeyByZXR1cm4gdGhpcy5fY2hlY2tzIH1cblxuXHR3YXJuQXNFcnJvcigpIHsgcmV0dXJuIHRoaXNbJ193YXJuLWFzLWVycm9yJ10gfVxuXG5cdGluY2x1ZGVBbWRlZmluZSgpIHsgcmV0dXJuIHRoaXMuX2luY2x1ZGVBbWRlZmluZSB9XG5cdGluY2x1ZGVTb3VyY2VNYXAoKSB7IHJldHVybiB0aGlzLl9pbmNsdWRlU291cmNlTWFwIH1cblx0aW5jbHVkZU1vZHVsZU5hbWUoKSB7IHJldHVybiB0aGlzLl9pbmNsdWRlTW9kdWxlTmFtZSB9XG5cdGluY2x1ZGVVc2VTdHJpY3QoKSB7IHJldHVybiB0aGlzLl91c2VTdHJpY3QgfVxuXG5cdGxhenlNb2R1bGUoKSB7IHJldHVybiAhdGhpcy5fZm9yY2VOb25MYXp5TW9kdWxlIH1cbn1cblxuY29uc3Rcblx0YmFzZW5hbWUgPSBwYXRoID0+XG5cdFx0bGFzdChwYXRoLnNwbGl0KCcvJykpLFxuXHRleHRuYW1lID0gcGF0aCA9PlxuXHRcdGxhc3QocGF0aC5zcGxpdCgnLicpKSxcblx0bm9FeHQgPSBwYXRoID0+XG5cdFx0Ly8gLSAxIGZvciB0aGUgJy4nXG5cdFx0cGF0aC5zdWJzdHJpbmcoMCwgcGF0aC5sZW5ndGggLSAxIC0gZXh0bmFtZShwYXRoKS5sZW5ndGgpXG4iXSwic291cmNlUm9vdCI6Ii9zcmMifQ==