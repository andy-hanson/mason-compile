if (typeof define !== 'function') var define = require('amdefine')(module);define(['exports'], function (exports) {
	'use strict';

	Object.defineProperty(exports, '__esModule', {
		value: true
	});

	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }

	const assert = cond => {
		if (!cond) throw new Error('Assertion failed.');
	},
	      cat = function () {
		// TODO:ES6 Splat
		const parts = Array.prototype.slice.call(arguments);
		const out = [];
		for (const _ of parts) if (_ instanceof Array) out.push.apply(out, _toConsumableArray(_));else if (_ !== null) out.push(_);
		return out;
	},
	      flatMap = (mapped, mapper) => {
		const out = [];
		for (let i = 0; i < mapped.length; i = i + 1) out.push.apply(out, _toConsumableArray(mapper(mapped[i], i)));
		return out;
	},
	     

	// flatMap where opMapper returns optionals instead of arrays.
	flatOpMap = (arr, opMapper) => {
		const out = [];
		for (const em of arr) {
			const _ = opMapper(em);
			if (_ !== null) out.push(_);
		}
		return out;
	},
	      head = arr => {
		assert(!isEmpty(arr));
		return arr[0];
	},
	      ifElse = (op, ifSome, ifNone) => op === null ? ifNone() : ifSome(op),
	      implementMany = (holder, methodName, nameToImpl) => {
		for (const name in nameToImpl) holder[name].prototype[methodName] = nameToImpl[name];
	},
	      isEmpty = arr => arr.length === 0,
	     

	// -0 is negative
	isPositive = n => n >= 0 && 1 / n !== -Infinity,
	      last = arr => {
		assert(!isEmpty(arr));
		return arr[arr.length - 1];
	},
	      opEach = (op, mapper) => op === null ? null : mapper(op),
	      opIf = (cond, makeOp) => cond ? makeOp() : null,
	      opMap = opEach,
	      opOr = (op, or) => op === null ? or() : op,
	      repeat = (em, n) => {
		assert(n >= 0);
		const out = [];
		for (let i = n; i > 0; i = i - 1) out.push(em);
		return out;
	},
	      reverseIter = function* (array) {
		for (let i = array.length - 1; i >= 0; i = i - 1) yield array[i];
	},
	      rtail = arr => {
		assert(!isEmpty(arr));
		return arr.slice(0, arr.length - 1);
	},
	      tail = arr => {
		assert(!isEmpty(arr));
		return arr.slice(1);
	},
	      type = (instance, itsType) => {
		if (!(Object(instance) instanceof itsType)) throw new Error(`${ instance } is not a ${ itsType.name }`);
	};
	exports.assert = assert;
	exports.cat = cat;
	exports.flatMap = flatMap;
	exports.flatOpMap = flatOpMap;
	exports.head = head;
	exports.ifElse = ifElse;
	exports.implementMany = implementMany;
	exports.isEmpty = isEmpty;
	exports.isPositive = isPositive;
	exports.last = last;
	exports.opEach = opEach;
	exports.opIf = opIf;
	exports.opMap = opMap;
	exports.opOr = opOr;
	exports.repeat = repeat;
	exports.reverseIter = reverseIter;
	exports.rtail = rtail;
	exports.tail = tail;
	exports.type = type;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInV0aWwuanMiLCJwcml2YXRlL3V0aWwuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7OztBQ0FPLE9BQ04sTUFBTSxHQUFHLElBQUksSUFBSTtBQUNoQixNQUFJLENBQUMsSUFBSSxFQUNSLE1BQU0sSUFBSSxLQUFLLENBQUMsbUJBQW1CLENBQUMsQ0FBQTtFQUNyQztPQUVELEdBQUcsR0FBRyxZQUFXOztBQUVoQixRQUFNLEtBQUssR0FBRyxLQUFLLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUE7QUFDbkQsUUFBTSxHQUFHLEdBQUcsRUFBRSxDQUFBO0FBQ2QsT0FBSyxNQUFNLENBQUMsSUFBSSxLQUFLLEVBQ3BCLElBQUksQ0FBQyxZQUFZLEtBQUssRUFDckIsR0FBRyxDQUFDLElBQUksTUFBQSxDQUFSLEdBQUcscUJBQVMsQ0FBQyxFQUFDLENBQUEsS0FDVixJQUFJLENBQUMsS0FBSyxJQUFJLEVBQ2xCLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUE7QUFDYixTQUFPLEdBQUcsQ0FBQTtFQUNWO09BRUQsT0FBTyxHQUFHLENBQUMsTUFBTSxFQUFFLE1BQU0sS0FBSztBQUM3QixRQUFNLEdBQUcsR0FBRyxFQUFFLENBQUE7QUFDZCxPQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFDM0MsR0FBRyxDQUFDLElBQUksTUFBQSxDQUFSLEdBQUcscUJBQVMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBQyxDQUFBO0FBQ2xDLFNBQU8sR0FBRyxDQUFBO0VBQ1Y7Ozs7QUFHRCxVQUFTLEdBQUcsQ0FBQyxHQUFHLEVBQUUsUUFBUSxLQUFLO0FBQzlCLFFBQU0sR0FBRyxHQUFHLEVBQUUsQ0FBQTtBQUNkLE9BQUssTUFBTSxFQUFFLElB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LEdBQUcsQ0FBQyxRQUFRLEVBQUUsT0FBTyxLQUFLO0FBQzdCLE1BQUksRUFBRSxNQUFNLENBQUMsUUFBUSxDQUFDLFlBQVksT0FBTyxDQUFBLEFBQUMsRUFDekMsTUFBTSxJQUFJLEtBQUssQ0FBQyxDQUFDLEdBQUUsUUFBUSxFQUFDLFVBQVUsR0FBRSxPQUFPLENBQUMsSUFBSSxFQUFDLENBQUMsQ0FBQyxDQUFBO0VBQ3hELENBQUEiLCJmaWxlIjoicHJpdmF0ZS91dGlsLmpzIiwic291cmNlc0NvbnRlbnQiOltudWxsLCJleHBvcnQgY29uc3Rcblx0YXNzZXJ0ID0gY29uZCA9PiB7XG5cdFx0aWYgKCFjb25kKVxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCdBc3NlcnRpb24gZmFpbGVkLicpXG5cdH0sXG5cblx0Y2F0ID0gZnVuY3Rpb24oKSB7XG5cdFx0Ly8gVE9ETzpFUzYgU3BsYXRcblx0XHRjb25zdCBwYXJ0cyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cylcblx0XHRjb25zdCBvdXQgPSBbXVxuXHRcdGZvciAoY29uc3QgXyBvZiBwYXJ0cylcblx0XHRcdGlmIChfIGluc3RhbmNlb2YgQXJyYXkpXG5cdFx0XHRcdG91dC5wdXNoKC4uLl8pXG5cdFx0XHRlbHNlIGlmIChfICE9PSBudWxsKVxuXHRcdFx0XHRvdXQucHVzaChfKVxuXHRcdHJldHVybiBvdXRcblx0fSxcblxuXHRmbGF0TWFwID0gKG1hcHBlZCwgbWFwcGVyKSA9PiB7XG5cdFx0Y29uc3Qgb3V0ID0gW11cblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IG1hcHBlZC5sZW5ndGg7IGkgPSBpICsgMSlcblx0XHRcdG91dC5wdXNoKC4uLm1hcHBlcihtYXBwZWRbaV0sIGkpKVxuXHRcdHJldHVybiBvdXRcblx0fSxcblxuXHQvLyBmbGF0TWFwIHdoZXJlIG9wTWFwcGVyIHJldHVybnMgb3B0aW9uYWxzIGluc3RlYWQgb2YgYXJyYXlzLlxuXHRmbGF0T3BNYXAgPSAoYXJyLCBvcE1hcHBlcikgPT4ge1xuXHRcdGNvbnN0IG91dCA9IFtdXG5cdFx0Zm9yIChjb25zdCBlbSBvZiBhcnIpIHtcblx0XHRcdGNvbnN0IF8gPSBvcE1hcHBlcihlbSlcblx0XHRcdGlmIChfICE9PSBudWxsKVxuXHRcdFx0XHRvdXQucHVzaChfKVxuXHRcdH1cblx0XHRyZXR1cm4gb3V0XG5cdH0sXG5cblx0aGVhZCA9IGFyciA9PiB7XG5cdFx0YXNzZXJ0KCFpc0VtcHR5KGFycikpXG5cdFx0cmV0dXJuIGFyclswXVxuXHR9LFxuXG5cdGlmRWxzZSA9IChvcCwgaWZTb21lLCBpZk5vbmUpID0+XG5cdFx0b3AgPT09IG51bGwgPyBpZk5vbmUoKSA6IGlmU29tZShvcCksXG5cblx0aW1wbGVtZW50TWFueSA9IChob2xkZXIsIG1ldGhvZE5hbWUsIG5hbWVUb0ltcGwpID0+IHtcblx0XHRmb3IgKGNvbnN0IG5hbWUgaW4gbmFtZVRvSW1wbClcblx0XHRcdGhvbGRlcltuYW1lXS5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBuYW1lVG9JbXBsW25hbWVdXG5cdH0sXG5cblx0aXNFbXB0eSA9IGFyciA9PiBhcnIubGVuZ3RoID09PSAwLFxuXG5cdC8vIC0wIGlzIG5lZ2F0aXZlXG5cdGlzUG9zaXRpdmUgPSBuID0+IG4gPj0gMCAmJiAxIC8gbiAhPT0gLUluZmluaXR5LFxuXG5cdGxhc3QgPSBhcnIgPT4ge1xuXHRcdGFzc2VydCghaXNFbXB0eShhcnIpKVxuXHRcdHJldHVybiBhcnJbYXJyLmxlbmd0aCAtIDFdXG5cdH0sXG5cblx0b3BFYWNoID0gKG9wLCBtYXBwZXIpID0+XG5cdFx0b3AgPT09IG51bGwgPyBudWxsIDogbWFwcGVyKG9wKSxcblxuXHRvcElmID0gKGNvbmQsIG1ha2VPcCkgPT5cblx0XHRjb25kID8gbWFrZU9wKCkgOiBudWxsLFxuXG5cdG9wTWFwID0gb3BFYWNoLFxuXG5cdG9wT3IgPSAob3AsIG9yKSA9PlxuXHRcdG9wID09PSBudWxsID8gb3IoKSA6IG9wLFxuXG5cdHJlcGVhdCA9IChlbSwgbikgPT4ge1xuXHRcdGFzc2VydChuID49IDApXG5cdFx0Y29uc3Qgb3V0ID0gW11cblx0XHRmb3IgKGxldCBpID0gbjsgaSA+IDA7IGkgPSBpIC0gMSlcblx0XHRcdG91dC5wdXNoKGVtKVxuXHRcdHJldHVybiBvdXRcblx0fSxcblxuXHRyZXZlcnNlSXRlciA9IGZ1bmN0aW9uKihhcnJheSkge1xuXHRcdGZvciAobGV0IGkgPSBhcnJheS5sZW5ndGggLSAxOyBpID49IDA7IGkgPSBpIC0gMSlcblx0XHRcdHlpZWxkIGFycmF5W2ldXG5cdH0sXG5cblx0cnRhaWwgPSBhcnIgPT4ge1xuXHRcdGFzc2VydCghaXNFbXB0eShhcnIpKVxuXHRcdHJldHVybiBhcnIuc2xpY2UoMCwgYXJyLmxlbmd0aCAtIDEpXG5cdH0sXG5cblx0dGFpbCA9IGFyciA9PiB7XG5cdFx0YXNzZXJ0KCFpc0VtcHR5KGFycikpXG5cdFx0cmV0dXJuIGFyci5zbGljZSgxKVxuXHR9LFxuXG5cdHR5cGUgPSAoaW5zdGFuY2UsIGl0c1R5cGUpID0+IHtcblx0XHRpZiAoIShPYmplY3QoaW5zdGFuY2UpIGluc3RhbmNlb2YgaXRzVHlwZSkpXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoYCR7aW5zdGFuY2V9IGlzIG5vdCBhICR7aXRzVHlwZS5uYW1lfWApXG5cdH1cbiJdLCJzb3VyY2VSb290IjoiL3NyYyJ9
