if (typeof define !== 'function') var define = require('amdefine')(module);define(['exports', 'esast/dist/Loc', 'tupl/dist/tupl', 'tupl/dist/type', './private/language'], function (exports, _esastDistLoc, _tuplDistTupl, _tuplDistType, _privateLanguage) {
	'use strict';

	Object.defineProperty(exports, '__esModule', {
		value: true
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _Loc = _interopRequireDefault(_esastDistLoc);

	var _tupl = _interopRequireDefault(_tuplDistTupl);

	const MsAst = (0, _tuplDistTupl.abstract)('MsAst', Object, 'doc');
	exports.default = MsAst;
	const LineContent = (0, _tuplDistTupl.abstract)('ValOrDo', MsAst, 'Valid part of a Block.'),
	      Do = (0, _tuplDistTupl.abstract)('Do', LineContent, `
		These can only appear as lines in a Block.
		Not to be confused with Generator expressions resulting from \`do\` keyword.`),
	      Val = (0, _tuplDistTupl.abstract)('Val', LineContent, 'These can appear in any expression.');

	exports.LineContent = LineContent;
	exports.Do = Do;
	exports.Val = Val;
	const makeType = superType => (name, doc, namesTypes, protoProps, tuplProps) => (0, _tupl.default)(name, superType, doc, ['loc', _Loc.default].concat(namesTypes), protoProps, tuplProps);

	const m = makeType(MsAst),
	      d = makeType(Do),
	      v = makeType(Val);

	const LD_Const = 0,
	      LD_Lazy = 1,
	      LD_Mutable = 2,
	      LocalDeclare = m('LocalDeclare', 'TODO:DOC', ['name', String, 'opType', (0, _tuplDistType.Nullable)(Val), 'kind', Number], {
		isLazy() {
			return this.kind === LD_Lazy;
		},
		isMutable() {
			return this.kind === LD_Mutable;
		}
	}, {
		untyped(loc, name, kind) {
			return LocalDeclare(loc, name, null, kind);
		},
		plain(loc, name) {
			return LocalDeclare(loc, name, null, LD_Const);
		}
	});

	exports.LD_Const = LD_Const;
	exports.LD_Lazy = LD_Lazy;
	exports.LD_Mutable = LD_Mutable;
	exports.LocalDeclare = LocalDeclare;
	const localDeclarePlainType = name => makeType(LocalDeclare)(`LocalDeclare_${ name }`, 'TODO:DOC', [], { opType: null, kind: LD_Const, name });

	const LocalDeclareBuilt = localDeclarePlainType('built'),
	      LocalDeclareFocus = localDeclarePlainType('_'),
	      LocalDeclareName = localDeclarePlainType('name'),
	      LocalDeclareThis = localDeclarePlainType('this'),
	      LocalDeclareRes = makeType(LocalDeclare)('LocalDeclareRes', 'TODO:DOC', ['opType', (0, _tuplDistType.Nullable)(Val)], {
		name: 'res',
		kind: LD_Const
	}),
	     

	// All have .allAssignees()
	Assign = (0, _tuplDistTupl.abstract)('Assign', Do, 'TODO:DOC'),
	      AssignSingle = makeType(Assign)('AssignSingle', 'TODO:DOC', ['assignee', LocalDeclare, 'value', Val], {
		allAssignees() {
			return [this.assignee];
		}
	}, {
		focus: (loc, value) => AssignSingle(loc, LocalDeclareFocus(loc), value)
	}),
	      AssignDestructure = makeType(Assign)('AssignDestructure', 'TODO:DOC', ['assignees', [LocalDeclare], 'value', Val], {
		allAssignees() {
			return this.assignees;
		},
		// All assignees must share the same kind.
		kind() {
			return this.assignees[0].kind;
		}
	}),
	      Throw = d('Throw', 'TODO:DOC', ['opThrown', (0, _tuplDistType.Nullable)(Val)]),
	      Debug = d('Debug', 'TODO:DOC', ['lines', [LineContent]]),
	      Block = (0, _tuplDistTupl.abstract)('Block', MsAst, 'TODO:DOC'),
	      BlockDo = makeType(Block)('BlockDo', 'TODO:DOC', ['lines', [LineContent]]),
	      BlockVal = (0, _tuplDistTupl.abstract)('BlockVal', Block, 'TODO:DOC'),
	      BlockWithReturn = makeType(BlockVal)('BlockWithReturn', 'TODO:DOC', ['lines', [LineContent], 'returned', Val]),
	      BlockValThrow = makeType(BlockVal)('BlockValThrow', 'TODO:DOC', ['lines', [LineContent], '_throw', Throw]),
	      ObjEntry = d('ObjEntry', 'TODO:DOC', ['assign', Assign]),
	     

	// TODO: BlockBag, BlockMap, BlockObj => BlockBuild(kind, ...)
	BlockObj = makeType(BlockVal)('BlockObj', 'TODO:DOC', ['built', LocalDeclareBuilt, 'lines', [LineContent], 'opObjed', (0, _tuplDistType.Nullable)(Val), 'opName', (0, _tuplDistType.Nullable)(String)], {}, {
		of: (loc, lines, opObjed, opName) => BlockObj(loc, LocalDeclareBuilt(loc), lines, opObjed, opName)
	}),
	      BagEntry = d('BagEntry', 'TODO:DOC', ['value', Val]),
	      BagEntryMany = d('BagEntryMany', 'TODO:DOC', ['value', Val]),
	      BlockBag = makeType(BlockVal)('BlockBag', 'TODO:DOC', ['built', LocalDeclareBuilt, 'lines', [(0, _tuplDistType.Union)(LineContent, BagEntry)]], {}, { of: (loc, lines) => BlockBag(loc, LocalDeclareBuilt(loc), lines) }),
	      MapEntry = d('MapEntry', 'TODO:DOC', ['key', Val, 'val', Val]),
	      BlockMap = makeType(BlockVal)('BlockMap', 'TODO:DOC', ['built', LocalDeclareBuilt, 'lines', [(0, _tuplDistType.Union)(LineContent, MapEntry)]], {}, { of: (loc, lines) => BlockMap(loc, LocalDeclareBuilt(loc), lines) }),
	      LocalAccess = v('LocalAccess', 'TODO:DOC', ['name', String], {}, { focus: loc => LocalAccess(loc, '_'), this: loc => LocalAccess(loc, 'this') }),
	      GlobalAccess = v('GlobalAccess', 'TODO:DOC', ['name', _privateLanguage.JsGlobals]),
	      LocalMutate = d('LocalMutate', 'TODO:DOC', ['name', String, 'value', Val]),
	     

	// Module
	UseDo = m('UseDo', 'TODO:DOC', ['path', String]),
	      Use = m('Use', 'TODO:DOC', ['path', String, 'used', [LocalDeclare], 'opUseDefault', (0, _tuplDistType.Nullable)(LocalDeclare)]),
	      Module = m('Module', 'TODO:DOC', ['doUses', [UseDo], 'uses', [Use], 'debugUses', [Use], 'lines', [Do], 'exports', [LocalDeclare], 'opDefaultExport', (0, _tuplDistType.Nullable)(Val)]),
	     

	// Data
	BagSimple = v('BagSimple', 'TODO:DOC', ['parts', [Val]]),
	      ObjPair = m('ObjPair', 'TODO:DOC', ['key', String, 'value', Val]),
	     
	// Verifier checks that no two pairs may have the same key.
	ObjSimple = v('ObjSimple', 'TODO:DOC', ['pairs', [ObjPair]]),
	     

	// Case
	Pattern = m('Pattern', 'TODO:DOC', ['type', Val, 'locals', [LocalDeclare], 'patterned', LocalAccess]),
	      CaseDoPart = m('CaseDoPart', 'TODO:DOC', ['test', (0, _tuplDistType.Union)(Val, Pattern), 'result', BlockDo]),
	      CaseValPart = m('CaseValPart', 'TODO:DOC', ['test', (0, _tuplDistType.Union)(Val, Pattern), 'result', BlockVal]),
	      CaseDo = d('CaseDo', 'TODO:DOC', ['opCased', (0, _tuplDistType.Nullable)(AssignSingle), 'parts', [CaseDoPart], 'opElse', (0, _tuplDistType.Nullable)(BlockDo)]),
	     
	// Unlike CaseDo, this has `return` statements.
	CaseVal = v('CaseVal', 'TODO:DOC', ['opCased', (0, _tuplDistType.Nullable)(AssignSingle), 'parts', [CaseValPart], 'opElse', (0, _tuplDistType.Nullable)(BlockVal)]),
	      SwitchDoPart = m('SwitchDoPart', 'TODO:DOC', ['value', Val, 'result', BlockDo]),
	      SwitchValPart = m('SwitchValPart', 'TODO:DOC', ['value', Val, 'result', BlockVal]),
	      SwitchDo = d('SwitchDo', 'TODO:DOC', ['switched', Val, 'parts', [SwitchDoPart], 'opElse', (0, _tuplDistType.Nullable)(BlockDo)]),
	      SwitchVal = v('SwitchVal', 'TODO:DOC', ['switched', Val, 'parts', [SwitchValPart], 'opElse', (0, _tuplDistType.Nullable)(BlockVal)]),
	      Iteratee = m('Iteratee', 'TODO:DOC', ['element', LocalDeclare, 'bag', Val]),
	      ForDo = d('ForDo', 'TODO:DOC', ['opIteratee', (0, _tuplDistType.Nullable)(Iteratee), 'block', BlockDo]),
	      ForVal = v('ForVal', 'TODO:DOC', ['opIteratee', (0, _tuplDistType.Nullable)(Iteratee), 'block', BlockDo]),
	      ForBag = v('ForBag', 'TODO:DOC', ['built', LocalDeclareBuilt, 'opIteratee', (0, _tuplDistType.Nullable)(Iteratee), 'block', BlockDo], {}, {
		of: (loc, opIteratee, block) => ForBag(loc, LocalDeclareBuilt(loc), opIteratee, block)
	}),
	      Break = d('Break', 'TODO:DOC', []),
	      BreakWithVal = d('BreakWithVal', 'TODO:DOC', ['value', Val]),
	      Continue = d('Continue', 'TODO:DOC', []),
	     

	// Except
	Catch = m('CatchDo', 'TODO:DOC', ['caught', LocalDeclare, 'block', BlockDo]),
	      ExceptDo = d('ExceptDo', 'TODO:DOC', ['_try', BlockDo, '_catch', (0, _tuplDistType.Nullable)(Catch), '_finally', (0, _tuplDistType.Nullable)(BlockDo)]),
	      ExceptVal = v('ExceptVal', 'TODO:DOC', ['_try', BlockVal, '_catch', (0, _tuplDistType.Nullable)(Catch), '_finally', (0, _tuplDistType.Nullable)(BlockDo)]),
	      Assert = d('Assert', 'TODO:DOC',
	// condition treated specially if a Call.
	['negate', Boolean, 'condition', Val, 'opThrown', (0, _tuplDistType.Nullable)(Val)]),
	     

	// Other statements
	ConditionalDo = d('ConditionalDo', 'TODO:DOC', ['test', Val, 'result', BlockDo, 'isUnless', Boolean]),
	      ConditionalVal = v('ConditionalVal', 'TODO:DOC', ['test', Val, 'result', BlockVal, 'isUnless', Boolean]),
	     

	// Generators
	Yield = v('Yield', 'TODO:DOC', ['opYielded', (0, _tuplDistType.Nullable)(Val)]),
	      YieldTo = v('YieldTo', 'TODO:DOC', ['yieldedTo', Val]),
	     

	// Other Vals
	L_And = 0,
	      L_Or = 1,
	      Logic = v('Logic', 'TODO:DOC', ['kind', Number, 'args', [Val]]),
	      Not = v('Not', 'TODO:DOC', ['arg', Val]),
	      Splat = m('Splat', 'TODO:DOC', ['splatted', Val]),
	      Call = v('Call', 'TODO:DOC', ['called', Val, 'args', [(0, _tuplDistType.Union)(Val, Splat)]], {}, {
		contains: (loc, testType, tested) => Call(loc, SpecialVal(loc, SV_Contains), [testType, tested]),
		sub: (loc, args) => Call(loc, SpecialVal(loc, SV_Sub), args)
	}),
	      New = v('New', 'TODO:DOC', ['type', Val, 'args', [(0, _tuplDistType.Union)(Val, Splat)]]),
	      BlockWrap = v('BlockWrap', 'TODO:DOC', ['block', BlockVal]),
	      Fun = v('Fun', 'TODO:DOC', [
	// TODO:ES6 If null, this compiles to an arrow function `( ... ) => { ... }`.
	'opDeclareThis', (0, _tuplDistType.Nullable)(LocalDeclareThis), 'isGenerator', Boolean, 'args', [LocalDeclare], 'opRestArg', (0, _tuplDistType.Nullable)(LocalDeclare), 'block', Block, 'opIn', (0, _tuplDistType.Nullable)(Debug),
	// If non-empty, block should be a BlockVal,
	// and either it has a type or opOut is non-empty.
	'opDeclareRes', (0, _tuplDistType.Nullable)(LocalDeclareRes), 'opOut', (0, _tuplDistType.Nullable)(Debug), 'opName', (0, _tuplDistType.Nullable)(String)]),
	      MethodImpl = m('MethodImpl', 'TODO:DOC', ['symbol', (0, _tuplDistType.Union)(String, Val), 'fun', Fun]),
	      ClassDo = m('ClassDo', 'TODO:DOC', ['declareFocus', LocalDeclareFocus, 'block', BlockDo]),
	      Class = v('Class', 'TODO:DOC',
	// Every Fun in statics and methods must have a name.
	['superClass', (0, _tuplDistType.Nullable)(Val), 'opDo', (0, _tuplDistType.Nullable)(ClassDo), 'statics', [Fun], 'opConstructor', (0, _tuplDistType.Nullable)(Fun), 'methods', [(0, _tuplDistType.Union)(Fun, MethodImpl)], 'opName', (0, _tuplDistType.Nullable)(String)]),
	      Lazy = v('Lazy', 'TODO:DOC', ['value', Val]),
	      NumberLiteral = v('NumberLiteral', 'TODO:DOC', ['value', Number]),
	      Member = v('Member', 'TODO:DOC', ['object', Val, 'name', String]),
	     
	// parts are Strings interleaved with Vals.
	Quote = v('Quote', 'TODO:DOC', ['parts', [Object]], {}, {
		forString: (loc, str) => Quote(loc, [str])
	}),
	      QuoteTemplate = v('QuoteTemplate', 'TODO:DOC', ['tag', Val, 'quote', Quote]),
	      SD_Debugger = 0,
	      SpecialDo = d('SpecialDo', 'TODO:DOC', ['kind', Number]),
	      SV_Contains = 0,
	      SV_False = 1,
	      SV_Null = 2,
	      SV_Sub = 3,
	      SV_Super = 4,
	      SV_ThisModuleDirectory = 5,
	      SV_True = 6,
	      SV_Undefined = 7,
	      SpecialVal = v('SpecialVal', 'TODO:DOC', ['kind', Number]),
	      MS_New = 0,
	      MS_Mutate = 1,
	      MS_NewMutable = 2,
	      MemberSet = d('SetProperty', 'TODO:DOC', ['object', Val, 'name', String, 'kind', Number, 'value', Val]),
	      With = v('With', 'TODO:DOC', ['declare', LocalDeclare, 'value', Val, 'block', BlockDo]);
	exports.LocalDeclareBuilt = LocalDeclareBuilt;
	exports.LocalDeclareFocus = LocalDeclareFocus;
	exports.LocalDeclareName = LocalDeclareName;
	exports.LocalDeclareThis = LocalDeclareThis;
	exports.LocalDeclareRes = LocalDeclareRes;
	exports.Assign = Assign;
	exports.AssignSingle = AssignSingle;
	exports.AssignDestructure = AssignDestructure;
	exports.Throw = Throw;
	exports.Debug = Debug;
	exports.Block = Block;
	exports.BlockDo = BlockDo;
	exports.BlockVal = BlockVal;
	exports.BlockWithReturn = BlockWithReturn;
	exports.BlockValThrow = BlockValThrow;
	exports.ObjEntry = ObjEntry;
	exports.BlockObj = BlockObj;
	exports.BagEntry = BagEntry;
	exports.BagEntryMany = BagEntryMany;
	exports.BlockBag = BlockBag;
	exports.MapEntry = MapEntry;
	exports.BlockMap = BlockMap;
	exports.LocalAccess = LocalAccess;
	exports.GlobalAccess = GlobalAccess;
	exports.LocalMutate = LocalMutate;
	exports.UseDo = UseDo;
	exports.Use = Use;
	exports.Module = Module;
	exports.BagSimple = BagSimple;
	exports.ObjPair = ObjPair;
	exports.ObjSimple = ObjSimple;
	exports.Pattern = Pattern;
	exports.CaseDoPart = CaseDoPart;
	exports.CaseValPart = CaseValPart;
	exports.CaseDo = CaseDo;
	exports.CaseVal = CaseVal;
	exports.SwitchDoPart = SwitchDoPart;
	exports.SwitchValPart = SwitchValPart;
	exports.SwitchDo = SwitchDo;
	exports.SwitchVal = SwitchVal;
	exports.Iteratee = Iteratee;
	exports.ForDo = ForDo;
	exports.ForVal = ForVal;
	exports.ForBag = ForBag;
	exports.Break = Break;
	exports.BreakWithVal = BreakWithVal;
	exports.Continue = Continue;
	exports.Catch = Catch;
	exports.ExceptDo = ExceptDo;
	exports.ExceptVal = ExceptVal;
	exports.Assert = Assert;
	exports.ConditionalDo = ConditionalDo;
	exports.ConditionalVal = ConditionalVal;
	exports.Yield = Yield;
	exports.YieldTo = YieldTo;
	exports.L_And = L_And;
	exports.L_Or = L_Or;
	exports.Logic = Logic;
	exports.Not = Not;
	exports.Splat = Splat;
	exports.Call = Call;
	exports.New = New;
	exports.BlockWrap = BlockWrap;
	exports.Fun = Fun;
	exports.MethodImpl = MethodImpl;
	exports.ClassDo = ClassDo;
	exports.Class = Class;
	exports.Lazy = Lazy;
	exports.NumberLiteral = NumberLiteral;
	exports.Member = Member;
	exports.Quote = Quote;
	exports.QuoteTemplate = QuoteTemplate;
	exports.SD_Debugger = SD_Debugger;
	exports.SpecialDo = SpecialDo;
	exports.SV_Contains = SV_Contains;
	exports.SV_False = SV_False;
	exports.SV_Null = SV_Null;
	exports.SV_Sub = SV_Sub;
	exports.SV_Super = SV_Super;
	exports.SV_ThisModuleDirectory = SV_ThisModuleDirectory;
	exports.SV_True = SV_True;
	exports.SV_Undefined = SV_Undefined;
	exports.SpecialVal = SpecialVal;
	exports.MS_New = MS_New;
	exports.MS_Mutate = MS_Mutate;
	exports.MS_NewMutable = MS_NewMutable;
	exports.MemberSet = MemberSet;
	exports.With = With;
});
//# sourceMappingURL=data:application/json;base64,