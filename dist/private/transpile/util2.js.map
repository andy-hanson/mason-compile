{"version":3,"sources":["private/transpile/util2.js","private/transpile/util2.ts"],"names":[],"mappings":"AAAA,CAAC,UAAU,OAAO,EAAE;AAChB,QAAI,OAAO,MAAM,KAAK,QAAQ,IAAI,OAAO,MAAM,CAAC,OAAO,KAAK,QAAQ,EAAE;AAClE,YAAI,CAAC,GAAG,OAAO,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC,AAAC,IAAI,CAAC,KAAK,SAAS,EAAE,MAAM,CAAC,OAAO,GAAG,CAAC,CAAC;KAC9E,MACI,IAAI,OAAO,MAAM,KAAK,UAAU,IAAI,MAAM,CAAC,GAAG,EAAE;AACjD,cAAM,CAAC,CAAC,SAAS,EAAE,SAAS,EAAE,sBAAsB,EAAE,sBAAsB,EAAE,qBAAqB,CAAC,EAAE,OAAO,CAAC,CAAC;KAClH;CACJ,CAAA,CAAE,UAAU,OAAO,EAAE,OAAO,EAAE;AAC3B,gBAAY,CAAC;;ACNjB,QAAA,YAAA,GAAA,OAAA,CAA2C,sBAC3C,CAAC,CADgE;AACjE,QAAA,YAAA,GAAA,OAAA,CAAuB,sBACvB,CAAC,CAD4C;AAC7C,QAAA,WAAA,GAAA,OAAA,CAA6B,qBAE7B,CAAC,CAFiD;AAElD,aAAA,oBAAA,CAAqC,OAAe,EAAA;AAEnD,eAAO,IAAI,WAAA,CAAA,cAAc,CAAC,IAAI,YAAA,CAAA,aAAa,CAAC,OAAO,EAAE,CAAC,IAAI,YAAA,CAAA,aAAa,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAA;KACnF;AAHe,WAAA,CAAA,oBAAoB,GAAA,oBAGnC,CAAA;AAED,UAAM,OAAO,GAAG,IAAI,YAAA,CAAA,OAAU,CAAC,OAAO,CAAC,CAAA;CDMtC,CAAC,CAAC","file":"private/transpile/util2.js","sourcesContent":["(function (factory) {\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === 'function' && define.amd) {\n        define([\"require\", \"exports\", 'esast/lib/Expression', 'esast/lib/Identifier', 'esast/lib/Statement'], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    var Expression_1 = require('esast/lib/Expression');\n    var Identifier_1 = require('esast/lib/Identifier');\n    var Statement_1 = require('esast/lib/Statement');\n    function throwErrorFromString(message) {\n        return new Statement_1.ThrowStatement(new Expression_1.NewExpression(IdError, [new Expression_1.LiteralString(message)]));\n    }\n    exports.throwErrorFromString = throwErrorFromString;\n    const IdError = new Identifier_1.default('Error');\n});\n","// TODO:ES6 This should be able to be merged with util.ts\n\nimport {LiteralString, NewExpression} from 'esast/lib/Expression'\nimport Identifier from 'esast/lib/Identifier'\nimport {ThrowStatement} from 'esast/lib/Statement'\n\nexport function throwErrorFromString(message: string): ThrowStatement {\n\t// TODO:ES6 Should be able to use IdError in ast-constants without recursive module problems\n\treturn new ThrowStatement(new NewExpression(IdError, [new LiteralString(message)]))\n}\n\nconst IdError = new Identifier('Error')\n"],"sourceRoot":"/source/"}