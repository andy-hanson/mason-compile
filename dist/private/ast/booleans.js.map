{"version":3,"sources":["private/ast/booleans.js","private/ast/booleans.ts"],"names":[],"mappings":"AAAA,CAAC,UAAU,OAAO,EAAE;AAChB,QAAI,OAAO,MAAM,KAAK,QAAQ,IAAI,OAAO,MAAM,CAAC,OAAO,KAAK,QAAQ,EAAE;AAClE,YAAI,CAAC,GAAG,OAAO,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC,AAAC,IAAI,CAAC,KAAK,SAAS,EAAE,MAAM,CAAC,OAAO,GAAG,CAAC,CAAC;KAC9E,MACI,IAAI,OAAO,MAAM,KAAK,UAAU,IAAI,MAAM,CAAC,GAAG,EAAE;AACjD,cAAM,CAAC,CAAC,SAAS,EAAE,SAAS,EAAE,eAAe,CAAC,EAAE,OAAO,CAAC,CAAC;KAC5D;CACJ,CAAA,CAAE,UAAU,OAAO,EAAE,OAAO,EAAE;AAC3B,gBAAY,CAAC;;ACNjB,QAAA,aAAA,GAAA,OAAA,CAAoC,eAMpC,CAAC,CANkD;AAMnD,UAAA,WAAA,SAAiC,aAAA,CAAA,OAAO,CAAA;AACvC,mBAAA,CAAY,GAAQ,EACZ,IAAS,EACT,MAAmB,EACnB,QAAiB,EAAA;AACxB,iBAAA,CAAM,GAAG,CAAC,CAAA;AAHH,gBAAA,CAAA,IAAI,GAAJ,IAAI,CAAK;AACT,gBAAA,CAAA,MAAM,GAAN,MAAM,CAAa;AACnB,gBAAA,CAAA,QAAQ,GAAR,QAAQ,CAAS;SAExB;KACD;AAPY,WAAA,CAAA,WAAW,GAAA,WAOvB,CAAA;AAGD,UAAA,IAAA,SAA0B,aAAA,CAAA,OAAO,CAAA;AAChC,mBAAA,CAAY,GAAQ,EAAS,IAAS,EAAS,MAAW,EAAS,OAAY,EAAA;AAC9E,iBAAA,CAAM,GAAG,CAAC,CAAA;AADkB,gBAAA,CAAA,IAAI,GAAJ,IAAI,CAAK;AAAS,gBAAA,CAAA,MAAM,GAAN,MAAM,CAAK;AAAS,gBAAA,CAAA,OAAO,GAAP,OAAO,CAAK;SAE9E;KACD;AAJY,WAAA,CAAA,IAAI,GAAA,IAIhB,CAAA;AAGD,UAAA,KAAA,SAA2B,aAAA,CAAA,OAAO,CAAA;AAEjC,mBAAA,CAAY,GAAQ,EAAS,IAAY,EAAS,IAAgB,EAAA;AACjE,iBAAA,CAAM,GAAG,CAAC,CAAA;AADkB,gBAAA,CAAA,IAAI,GAAJ,IAAI,CAAQ;AAAS,gBAAA,CAAA,IAAI,GAAJ,IAAI,CAAY;SAEjE;KACD;AALY,WAAA,CAAA,KAAK,GAAA,KAKjB,CAAA;AAWD,UAAA,GAAA,SAAyB,aAAA,CAAA,OAAO,CAAA;AAC/B,mBAAA,CAAY,GAAQ,EAAS,GAAQ,EAAA;AACpC,iBAAA,CAAM,GAAG,CAAC,CAAA;AADkB,gBAAA,CAAA,GAAG,GAAH,GAAG,CAAK;SAEpC;KACD;AAJY,WAAA,CAAA,GAAG,GAAA,GAIf,CAAA;CDFA,CAAC,CAAC","file":"private/ast/booleans.js","sourcesContent":["(function (factory) {\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === 'function' && define.amd) {\n        define([\"require\", \"exports\", './LineContent'], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    var LineContent_1 = require('./LineContent');\n    class Conditional extends LineContent_1.ValOrDo {\n        constructor(loc, test, result, isUnless) {\n            super(loc);\n            this.test = test;\n            this.result = result;\n            this.isUnless = isUnless;\n        }\n    }\n    exports.Conditional = Conditional;\n    class Cond extends LineContent_1.ValOrDo {\n        constructor(loc, test, ifTrue, ifFalse) {\n            super(loc);\n            this.test = test;\n            this.ifTrue = ifTrue;\n            this.ifFalse = ifFalse;\n        }\n    }\n    exports.Cond = Cond;\n    class Logic extends LineContent_1.ValOnly {\n        constructor(loc, kind, args) {\n            super(loc);\n            this.kind = kind;\n            this.args = args;\n        }\n    }\n    exports.Logic = Logic;\n    class Not extends LineContent_1.ValOnly {\n        constructor(loc, arg) {\n            super(loc);\n            this.arg = arg;\n        }\n    }\n    exports.Not = Not;\n});\n","import Loc from 'esast/lib/Loc'\nimport Block from './Block'\nimport {Val, ValOnly, ValOrDo} from './LineContent'\n\n/**\n```if/unless {test}\n\t{result}```\n*/\nexport class Conditional extends ValOrDo {\n\tconstructor(loc: Loc,\n\t\tpublic test: Val,\n\t\tpublic result: Block | Val,\n\t\tpublic isUnless: boolean) {\n\t\tsuper(loc)\n\t}\n}\n\n/** `cond {test} {ifTrue} {ifFalse}` */\nexport class Cond extends ValOrDo {\n\tconstructor(loc: Loc, public test: Val, public ifTrue: Val, public ifFalse: Val) {\n\t\tsuper(loc)\n\t}\n}\n\n/** `and` or `or` expression. */\nexport class Logic extends ValOnly {\n\t// todo: `args: Args` (support varargs using `any?`/`all?`)\n\tconstructor(loc: Loc, public kind: Logics, public args: Array<Val>) {\n\t\tsuper(loc)\n\t}\n}\n\n/** Kind of [[Logic]]. */\nexport const enum Logics {\n\t/** `and` keyword */\n\tAnd,\n\t/** `or` keyword */\n\tOr\n}\n\n/** `not` keyword */\nexport class Not extends ValOnly {\n\tconstructor(loc: Loc, public arg: Val) {\n\t\tsuper(loc)\n\t}\n}\n"],"sourceRoot":"/source/"}