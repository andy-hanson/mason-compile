(function (global, factory) {
	if (typeof define === 'function' && define.amd) {
		define(['exports', 'module', 'esast/dist/ast', 'esast/dist/util', '../context', '../manglePath', '../MsAst', '../util', './ast-constants', './ms-call', './transpile', './util'], factory);
	} else if (typeof exports !== 'undefined' && typeof module !== 'undefined') {
		factory(exports, module, require('esast/dist/ast'), require('esast/dist/util'), require('../context'), require('../manglePath'), require('../MsAst'), require('../util'), require('./ast-constants'), require('./ms-call'), require('./transpile'), require('./util'));
	} else {
		var mod = {
			exports: {}
		};
		factory(mod.exports, mod, global.ast, global.util, global.context, global.manglePath, global.MsAst, global.util, global.astConstants, global.msCall, global.transpile, global.util);
		global.transpileModule = mod.exports;
	}
})(this, function (exports, module, _esastDistAst, _esastDistUtil, _context, _manglePath, _MsAst, _util, _astConstants, _msCall, _transpile, _util2) {
	'use strict';

	module.exports = transpileModule;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _manglePath2 = _interopRequireDefault(_manglePath);

	function transpileModule() {
		const body = (0, _util2.tLines)(this.lines);

		_transpile.verifyResults.builtinPathToNames.forEach((imported, path) => {
			if (path !== 'global') {
				const importedDeclares = [];
				let opImportDefault = null;
				let defaultName = (0, _util.last)(path.split('/'));
				for (const name of imported) {
					const declare = _MsAst.LocalDeclare.plain(this.loc, name);
					if (name === defaultName) opImportDefault = declare;else importedDeclares.push(declare);
				}
				this.imports.push(new _MsAst.Import(this.loc, path, importedDeclares, opImportDefault));
			}
		});

		const amd = amdWrapModule(this.doImports, this.imports, body);

		return new _esastDistAst.Program((0, _util.cat)((0, _util.opIf)(_context.options.includeUseStrict(), () => UseStrict), (0, _util.opIf)(_context.options.includeAmdefine(), () => AmdefineHeader), (0, _esastDistUtil.toStatement)(amd)));
	}

	function amdWrapModule(doImports, imports, body) {
		const shouldImportBoot = _context.options.importBoot();

		const allImports = doImports.concat(imports);
		const allImportPaths = allImports.map(_ => (0, _manglePath2.default)(_.path));

		const arrImportPaths = new _esastDistAst.ArrayExpression((0, _util.cat)((0, _util.opIf)(shouldImportBoot, () => new _esastDistAst.Literal(_context.options.bootPath())), LitStrExports, allImportPaths.map(_ => new _esastDistAst.Literal(_))));

		const importToIdentifier = new Map();
		const importIdentifiers = [];
		for (let i = 0; i < allImports.length; i = i + 1) {
			const _ = allImports[i];
			const id = (0, _esastDistUtil.identifier)(`${ pathBaseName(_.path) }_${ i }`);
			importIdentifiers.push(id);
			importToIdentifier.set(_, id);
		}

		const importArgs = (0, _util.cat)((0, _util.opIf)(shouldImportBoot, () => IdBoot), _astConstants.IdExports, importIdentifiers);

		const doBoot = (0, _util.opIf)(shouldImportBoot, () => new _esastDistAst.ExpressionStatement((0, _msCall.msGetModule)(IdBoot)));

		const importDos = doImports.map(_ => (0, _esastDistUtil.loc)(new _esastDistAst.ExpressionStatement((0, _msCall.msGetModule)(importToIdentifier.get(_))), _.loc));

		// Extracts imported values from the modules.
		const opDeclareImportedLocals = (0, _util.opIf)(!(0, _util.isEmpty)(imports), () => new _esastDistAst.VariableDeclaration('const', (0, _util.flatMap)(imports, _ => importDeclarators(_, importToIdentifier.get(_)))));

		const fullBody = new _esastDistAst.BlockStatement((0, _util.cat)(doBoot, importDos, opDeclareImportedLocals, body, ReturnExports));

		const lazyBody = _context.options.lazyModule() ? new _esastDistAst.BlockStatement([new _esastDistAst.ExpressionStatement(new _esastDistAst.AssignmentExpression('=', ExportsGet, (0, _msCall.msLazy)((0, _esastDistUtil.functionExpressionThunk)(fullBody))))]) : fullBody;

		return new _esastDistAst.CallExpression(IdDefine, [arrImportPaths, new _esastDistAst.ArrowFunctionExpression(importArgs, lazyBody)]);
	}

	function pathBaseName(path) {
		return path.substr(path.lastIndexOf('/') + 1);
	}

	function importDeclarators(_ref, moduleIdentifier) {
		let imported = _ref.imported;
		let opImportDefault = _ref.opImportDefault;

		// TODO: Could be neater about this
		const isLazy = ((0, _util.isEmpty)(imported) ? opImportDefault : imported[0]).isLazy();
		const value = (isLazy ? _msCall.msLazyGetModule : _msCall.msGetModule)(moduleIdentifier);

		const importedDefault = (0, _util.opMap)(opImportDefault, def => {
			const defexp = (0, _msCall.msGetDefaultExport)(moduleIdentifier);
			const val = isLazy ? (0, _msCall.lazyWrap)(defexp) : defexp;
			return (0, _esastDistUtil.loc)(new _esastDistAst.VariableDeclarator((0, _util2.idForDeclareCached)(def), val), def.loc);
		});

		const importedDestruct = (0, _util.isEmpty)(imported) ? null : (0, _transpile.makeDestructureDeclarators)(imported, isLazy, value, true, false);

		return (0, _util.cat)(importedDefault, importedDestruct);
	}

	const IdBoot = new _esastDistAst.Identifier('_boot');
	const IdDefine = new _esastDistAst.Identifier('define');
	const ExportsGet = (0, _esastDistUtil.member)(_astConstants.IdExports, '_get');
	const LitStrExports = new _esastDistAst.Literal('exports');
	const ReturnExports = new _esastDistAst.ReturnStatement(_astConstants.IdExports);
	const UseStrict = new _esastDistAst.ExpressionStatement(new _esastDistAst.Literal('use strict'));

	// if (typeof define !== 'function') var define = require('amdefine')(module)
	const AmdefineHeader = new _esastDistAst.IfStatement(new _esastDistAst.BinaryExpression('!==', new _esastDistAst.UnaryExpression('typeof', IdDefine), new _esastDistAst.Literal('function')), new _esastDistAst.VariableDeclaration('var', [new _esastDistAst.VariableDeclarator(IdDefine, new _esastDistAst.CallExpression(new _esastDistAst.CallExpression(new _esastDistAst.Identifier('require'), [new _esastDistAst.Literal('amdefine')]), [new _esastDistAst.Identifier('module')]))]));
});
//# sourceMappingURL=data:application/json;base64,