(function (global, factory) {
	if (typeof define === 'function' && define.amd) {
		define(['exports', 'module', '../../CompileError', '../context', '../MsAst', '../Token', '../util', './checks', './parse*', './parseMemberName', './parseName', './parseQuote', './parseSingle', './Slice'], factory);
	} else if (typeof exports !== 'undefined' && typeof module !== 'undefined') {
		factory(exports, module, require('../../CompileError'), require('../context'), require('../MsAst'), require('../Token'), require('../util'), require('./checks'), require('./parse*'), require('./parseMemberName'), require('./parseName'), require('./parseQuote'), require('./parseSingle'), require('./Slice'));
	} else {
		var mod = {
			exports: {}
		};
		factory(mod.exports, mod, global.CompileError, global.context, global.MsAst, global.Token, global.util, global.checks, global.parse, global.parseMemberName, global.parseName, global.parseQuote, global.parseSingle, global.Slice);
		global.parseSpaced = mod.exports;
	}
})(this, function (exports, module, _CompileError, _context, _MsAst, _Token, _util, _checks, _parse, _parseMemberName, _parseName, _parseQuote, _parseSingle, _Slice) {
	'use strict';

	module.exports = parseSpaced;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _parseMemberName2 = _interopRequireDefault(_parseMemberName);

	var _parseName2 = _interopRequireDefault(_parseName);

	var _parseQuote2 = _interopRequireDefault(_parseQuote);

	var _parseSingle2 = _interopRequireDefault(_parseSingle);

	var _Slice2 = _interopRequireDefault(_Slice);

	/**
 Parse tokens in a {@link Groups.Space}.
 @return {Val}
 */

	function parseSpaced(tokens) {
		const h = tokens.head(),
		      rest = tokens.tail();
		if (h instanceof _Token.Keyword) switch (h.kind) {
			case _Token.Keywords.Ampersand:
				{
					const h2 = rest.head();
					if ((0, _Token.isKeyword)(_Token.Keywords.Dot, h2)) {
						const tail = rest.tail();
						const h3 = tail.head();
						const fun = new _MsAst.GetterFun(h3.loc, (0, _parseMemberName2.default)(h3));
						return parseSpacedFold(fun, tail.tail());
					} else {
						const fun = new _MsAst.MemberFun(h2.loc, null, (0, _parseMemberName2.default)(h2));
						return parseSpacedFold(fun, rest.tail());
					}
				}
			case _Token.Keywords.Dot:
				{
					const h2 = rest.head();
					if ((0, _Token.isKeyword)(_Token.Keywords.Ampersand, h2)) {
						const tail = rest.tail();
						const h3 = tail.head();
						const name = (0, _parseMemberName2.default)(h3);
						const fun = new _MsAst.MemberFun(h2.loc, _MsAst.LocalAccess.this(h2.loc), name);
						return parseSpacedFold(fun, tail.tail());
					} else {
						const name = (0, _parseMemberName2.default)(rest.head());
						const member = new _MsAst.Member(h.loc, _MsAst.LocalAccess.this(h.loc), name);
						return parseSpacedFold(member, rest.tail());
					}
				}
			case _Token.Keywords.Dot3:
				return new _MsAst.Splat(tokens.loc, parseSpacedFold((0, _parseSingle2.default)(rest.head()), rest.tail));
			case _Token.Keywords.Lazy:
				return new _MsAst.Lazy(h.loc, parseSpaced(rest));
			case _Token.Keywords.SuperVal:
				{
					// TODO: handle sub here as well
					const h2 = rest.head();
					if ((0, _Token.isKeyword)(_Token.Keywords.Dot, h2)) {
						const tail = rest.tail();
						const sup = new _MsAst.SuperMember(h2.loc, (0, _parseMemberName2.default)(tail.head()));
						return parseSpacedFold(sup, tail.tail());
					} else if ((0, _Token.isGroup)(_Token.Groups.Parenthesis, h2) && _Slice2.default.group(h2).isEmpty()) {
						const x = new _MsAst.SuperCall(h2.loc, []);
						return parseSpacedFold(x, rest.tail());
					} else (0, _context.fail)(`Expected ${ (0, _CompileError.code)('.') } or ${ (0, _CompileError.code)('()') } after ${ (0, _CompileError.code)('super') }`);
				}
			case _Token.Keywords.Tick:
				{
					const h2 = rest.head();
					const quote = new _MsAst.QuoteSimple(h2.loc, (0, _parseName2.default)(h2));
					return parseSpacedFold(quote, rest.tail());
				}
			case _Token.Keywords.Type:
				return _MsAst.Call.contains(h.loc, parseSpaced(rest), _MsAst.LocalAccess.focus(h.loc));
			default:
			// fall through
		}
		return parseSpacedFold((0, _parseSingle2.default)(h), rest);
	}

	function parseSpacedFold(start, rest) {
		let acc = start;
		for (let i = rest._start; i < rest._end; i = i + 1) {
			function restVal() {
				return parseSpaced(rest._chopStart(i + 1));
			}

			const token = rest._tokens[i];
			const loc = token.loc;
			if (token instanceof _Token.Keyword) switch (token.kind) {
				case _Token.Keywords.Ampersand:
					if (i === rest._end - 1) (0, _checks.unexpected)(token);
					i = i + 1;
					acc = new _MsAst.MemberFun(token.loc, acc, (0, _parseMemberName2.default)(rest._tokens[i]));
					break;
				case _Token.Keywords.Dot:
					{
						// If this were the last one,
						// it would not be a Keywords.Dot but a Keywords.ObjAssign
						(0, _util.assert)(i < rest._end - 1);
						i = i + 1;
						acc = new _MsAst.Member(token.loc, acc, (0, _parseMemberName2.default)(rest._tokens[i]));
						break;
					}
				case _Token.Keywords.Dot2:
					(0, _context.check)(i < rest._end - 1, token.loc, () => `Use ${ (0, _CompileError.code)('...') } for infinite ranges.`);
					return new _MsAst.Range(token.loc, acc, restVal(), false);
				case _Token.Keywords.Dot3:
					return new _MsAst.Range(token.loc, acc, (0, _util.opIf)(i < rest._end - 1, restVal), true);
				case _Token.Keywords.Focus:
					acc = new _MsAst.Call(token.loc, acc, [_MsAst.LocalAccess.focus(loc)]);
					break;
				case _Token.Keywords.Type:
					return _MsAst.Call.contains(token.loc, restVal(), acc);
				default:
					(0, _checks.unexpected)(token);
			} else if (token instanceof _Token.Group) {
				const slice = _Slice2.default.group(token);
				switch (token.kind) {
					case _Token.Groups.Bracket:
						acc = _MsAst.Call.sub(loc, acc, (0, _parse.parseExprParts)(slice));
						break;
					case _Token.Groups.Parenthesis:
						(0, _checks.checkEmpty)(slice, () => `Use ${ (0, _CompileError.code)('(a b)') }, not ${ (0, _CompileError.code)('a(b)') }`);
						acc = new _MsAst.Call(loc, acc, []);
						break;
					case _Token.Groups.Quote:
						acc = new _MsAst.QuoteTaggedTemplate(loc, acc, (0, _parseQuote2.default)(slice));
						break;
					default:
						(0, _checks.unexpected)(token);
				}
			} else (0, _checks.unexpected)(token);
		}
		return acc;
	}
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9wcml2YXRlL3BhcnNlL3BhcnNlU3BhY2VkLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztrQkFrQndCLFdBQVc7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBcEIsVUFBUyxXQUFXLENBQUMsTUFBTSxFQUFFO0FBQzNDLFFBQU0sQ0FBQyxHQUFHLE1BQU0sQ0FBQyxJQUFJLEVBQUU7UUFBRSxJQUFJLEdBQUcsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFBO0FBQzdDLE1BQUksQ0FBQyxtQkFoQnFDLE9BQU8sQUFnQnpCLEVBQ3ZCLFFBQVEsQ0FBQyxDQUFDLElBQUk7QUFDYixRQUFLLE9BbEI0QyxRQUFRLENBa0IzQyxTQUFTO0FBQUU7QUFDeEIsV0FBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFBO0FBQ3RCLFNBQUksV0FwQndCLFNBQVMsRUFvQnZCLE9BcEJrQyxRQUFRLENBb0JqQyxHQUFHLEVBQUUsRUFBRSxDQUFDLEVBQUU7QUFDaEMsWUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFBO0FBQ3hCLFlBQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQTtBQUN0QixZQUFNLEdBQUcsR0FBRyxXQXpCSCxTQUFTLENBeUJRLEVBQUUsQ0FBQyxHQUFHLEVBQUUsK0JBQWdCLEVBQUUsQ0FBQyxDQUFDLENBQUE7QUFDdEQsYUFBTyxlQUFlLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFBO01BQ3hDLE1BQU07QUFDTixZQUFNLEdBQUcsR0FBRyxXQTVCbUMsU0FBUyxDQTRCOUIsRUFBRSxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsK0JBQWdCLEVBQUUsQ0FBQyxDQUFDLENBQUE7QUFDNUQsYUFBTyxlQUFlLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFBO01BQ3hDO0tBQ0Q7QUFBQSxBQUNELFFB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SEYsS0FBSyxFQUFFLE1BQU0sQ0FBQyxJQUFJLEdBQUUsa0JBNUg1QixJQUFJLEVBNEg2QixPQUFPLENBQUMsRUFBQyxNQUFNLEdBQUUsa0JBNUhsRCxJQUFJLEVBNEhtRCxNQUFNLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQTtBQUNwRSxTQUFHLEdBQUcsV0EzSEgsSUFBSSxDQTJIUSxHQUFHLEVBQUUsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFBO0FBQzVCLFlBQUs7QUFBQSxBQUNOLFVBQUssT0EzSE0sTUFBTSxDQTJITCxLQUFLO0FBQ2hCLFNBQUcsR0FBRyxXQTlIaUUsbUJBQW1CLENBOEg1RCxHQUFHLEVBQUUsR0FBRyxFQUFFLDBCQUFXLEtBQUssQ0FBQyxDQUFDLENBQUE7QUFDMUQsWUFBSztBQUFBLEFBQ047QUFDQyxrQkE3SGUsVUFBVSxFQTZIZCxLQUFLLENBQUMsQ0FBQTtBQUFBLEtBQ2xCO0lBQ0QsTUFDQSxZQWhJaUIsVUFBVSxFQWdJaEIsS0FBSyxDQUFDLENBQUE7R0FDbEI7QUFDRCxTQUFPLEdBQUcsQ0FBQTtFQUNWIiwiZmlsZSI6InBhcnNlU3BhY2VkLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtjb2RlfSBmcm9tICcuLi8uLi9Db21waWxlRXJyb3InXG5pbXBvcnQge2NoZWNrLCBmYWlsfSBmcm9tICcuLi9jb250ZXh0J1xuaW1wb3J0IHtDYWxsLCBHZXR0ZXJGdW4sIExhenksIExvY2FsQWNjZXNzLCBNZW1iZXIsIE1lbWJlckZ1biwgUXVvdGVTaW1wbGUsIFF1b3RlVGFnZ2VkVGVtcGxhdGUsXG5cdFJhbmdlLCBTcGxhdCwgU3VwZXJDYWxsLCBTdXBlck1lbWJlcn0gZnJvbSAnLi4vTXNBc3QnXG5pbXBvcnQge0dyb3VwLCBHcm91cHMsIGlzR3JvdXAsIGlzS2V5d29yZCwgS2V5d29yZCwgS2V5d29yZHN9IGZyb20gJy4uL1Rva2VuJ1xuaW1wb3J0IHthc3NlcnQsIG9wSWZ9IGZyb20gJy4uL3V0aWwnXG5pbXBvcnQge2NoZWNrRW1wdHksIHVuZXhwZWN0ZWR9IGZyb20gJy4vY2hlY2tzJ1xuaW1wb3J0IHtwYXJzZUV4cHJQYXJ0c30gZnJvbSAnLi9wYXJzZSonXG5pbXBvcnQgcGFyc2VNZW1iZXJOYW1lIGZyb20gJy4vcGFyc2VNZW1iZXJOYW1lJ1xuaW1wb3J0IHBhcnNlTmFtZSBmcm9tICcuL3BhcnNlTmFtZSdcbmltcG9ydCBwYXJzZVF1b3RlIGZyb20gJy4vcGFyc2VRdW90ZSdcbmltcG9ydCBwYXJzZVNpbmdsZSBmcm9tICcuL3BhcnNlU2luZ2xlJ1xuaW1wb3J0IFNsaWNlIGZyb20gJy4vU2xpY2UnXG5cbi8qKlxuUGFyc2UgdG9rZW5zIGluIGEge0BsaW5rIEdyb3Vwcy5TcGFjZX0uXG5AcmV0dXJuIHtWYWx9XG4qL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcGFyc2VTcGFjZWQodG9rZW5zKSB7XG5cdGNvbnN0IGggPSB0b2tlbnMuaGVhZCgpLCByZXN0ID0gdG9rZW5zLnRhaWwoKVxuXHRpZiAoaCBpbnN0YW5jZW9mIEtleXdvcmQpXG5cdFx0c3dpdGNoIChoLmtpbmQpIHtcblx0XHRcdGNhc2UgS2V5d29yZHMuQW1wZXJzYW5kOiB7XG5cdFx0XHRcdGNvbnN0IGgyID0gcmVzdC5oZWFkKClcblx0XHRcdFx0aWYgKGlzS2V5d29yZChLZXl3b3Jkcy5Eb3QsIGgyKSkge1xuXHRcdFx0XHRcdGNvbnN0IHRhaWwgPSByZXN0LnRhaWwoKVxuXHRcdFx0XHRcdGNvbnN0IGgzID0gdGFpbC5oZWFkKClcblx0XHRcdFx0XHRjb25zdCBmdW4gPSBuZXcgR2V0dGVyRnVuKGgzLmxvYywgcGFyc2VNZW1iZXJOYW1lKGgzKSlcblx0XHRcdFx0XHRyZXR1cm4gcGFyc2VTcGFjZWRGb2xkKGZ1biwgdGFpbC50YWlsKCkpXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Y29uc3QgZnVuID0gbmV3IE1lbWJlckZ1bihoMi5sb2MsIG51bGwsIHBhcnNlTWVtYmVyTmFtZShoMikpXG5cdFx0XHRcdFx0cmV0dXJuIHBhcnNlU3BhY2VkRm9sZChmdW4sIHJlc3QudGFpbCgpKVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRjYXNlIEtleXdvcmRzLkRvdDoge1xuXHRcdFx0XHRjb25zdCBoMiA9IHJlc3QuaGVhZCgpXG5cdFx0XHRcdGlmIChpc0tleXdvcmQoS2V5d29yZHMuQW1wZXJzYW5kLCBoMikpIHtcblx0XHRcdFx0XHRjb25zdCB0YWlsID0gcmVzdC50YWlsKClcblx0XHRcdFx0XHRjb25zdCBoMyA9IHRhaWwuaGVhZCgpXG5cdFx0XHRcdFx0Y29uc3QgbmFtZSA9IHBhcnNlTWVtYmVyTmFtZShoMylcblx0XHRcdFx0XHRjb25zdCBmdW4gPSBuZXcgTWVtYmVyRnVuKGgyLmxvYywgTG9jYWxBY2Nlc3MudGhpcyhoMi5sb2MpLCBuYW1lKVxuXHRcdFx0XHRcdHJldHVybiBwYXJzZVNwYWNlZEZvbGQoZnVuLCB0YWlsLnRhaWwoKSlcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRjb25zdCBuYW1lID0gcGFyc2VNZW1iZXJOYW1lKHJlc3QuaGVhZCgpKVxuXHRcdFx0XHRcdGNvbnN0IG1lbWJlciA9IG5ldyBNZW1iZXIoaC5sb2MsIExvY2FsQWNjZXNzLnRoaXMoaC5sb2MpLCBuYW1lKVxuXHRcdFx0XHRcdHJldHVybiBwYXJzZVNwYWNlZEZvbGQobWVtYmVyLCByZXN0LnRhaWwoKSlcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0Y2FzZSBLZXl3b3Jkcy5Eb3QzOlxuXHRcdFx0XHRyZXR1cm4gbmV3IFNwbGF0KHRva2Vucy5sb2MsIHBhcnNlU3BhY2VkRm9sZChwYXJzZVNpbmdsZShyZXN0LmhlYWQoKSksIHJlc3QudGFpbCkpXG5cdFx0XHRjYXNlIEtleXdvcmRzLkxhenk6XG5cdFx0XHRcdHJldHVybiBuZXcgTGF6eShoLmxvYywgcGFyc2VTcGFjZWQocmVzdCkpXG5cdFx0XHRjYXNlIEtleXdvcmRzLlN1cGVyVmFsOiB7XG5cdFx0XHRcdC8vIFRPRE86IGhhbmRsZSBzdWIgaGVyZSBhcyB3ZWxsXG5cdFx0XHRcdGNvbnN0IGgyID0gcmVzdC5oZWFkKClcblx0XHRcdFx0aWYgKGlzS2V5d29yZChLZXl3b3Jkcy5Eb3QsIGgyKSkge1xuXHRcdFx0XHRcdGNvbnN0IHRhaWwgPSByZXN0LnRhaWwoKVxuXHRcdFx0XHRcdGNvbnN0IHN1cCA9IG5ldyBTdXBlck1lbWJlcihoMi5sb2MsIHBhcnNlTWVtYmVyTmFtZSh0YWlsLmhlYWQoKSkpXG5cdFx0XHRcdFx0cmV0dXJuIHBhcnNlU3BhY2VkRm9sZChzdXAsIHRhaWwudGFpbCgpKVxuXHRcdFx0XHR9IGVsc2UgaWYgKGlzR3JvdXAoR3JvdXBzLlBhcmVudGhlc2lzLCBoMikgJiYgU2xpY2UuZ3JvdXAoaDIpLmlzRW1wdHkoKSkge1xuXHRcdFx0XHRcdGNvbnN0IHggPSBuZXcgU3VwZXJDYWxsKGgyLmxvYywgW10pXG5cdFx0XHRcdFx0cmV0dXJuIHBhcnNlU3BhY2VkRm9sZCh4LCByZXN0LnRhaWwoKSlcblx0XHRcdFx0fSBlbHNlXG5cdFx0XHRcdFx0ZmFpbChgRXhwZWN0ZWQgJHtjb2RlKCcuJyl9IG9yICR7Y29kZSgnKCknKX0gYWZ0ZXIgJHtjb2RlKCdzdXBlcicpfWApXG5cdFx0XHR9XG5cdFx0XHRjYXNlIEtleXdvcmRzLlRpY2s6IHtcblx0XHRcdFx0Y29uc3QgaDIgPSByZXN0LmhlYWQoKVxuXHRcdFx0XHRjb25zdCBxdW90ZSA9IG5ldyBRdW90ZVNpbXBsZShoMi5sb2MsIHBhcnNlTmFtZShoMikpXG5cdFx0XHRcdHJldHVybiBwYXJzZVNwYWNlZEZvbGQocXVvdGUsIHJlc3QudGFpbCgpKVxuXHRcdFx0fVxuXHRcdFx0Y2FzZSBLZXl3b3Jkcy5UeXBlOlxuXHRcdFx0XHRyZXR1cm4gQ2FsbC5jb250YWlucyhoLmxvYywgcGFyc2VTcGFjZWQocmVzdCksIExvY2FsQWNjZXNzLmZvY3VzKGgubG9jKSlcblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdC8vIGZhbGwgdGhyb3VnaFxuXHRcdH1cblx0cmV0dXJuIHBhcnNlU3BhY2VkRm9sZChwYXJzZVNpbmdsZShoKSwgcmVzdClcbn1cblxuZnVuY3Rpb24gcGFyc2VTcGFjZWRGb2xkKHN0YXJ0LCByZXN0KSB7XG5cdGxldCBhY2MgPSBzdGFydFxuXHRmb3IgKGxldCBpID0gcmVzdC5fc3RhcnQ7IGkgPCByZXN0Ll9lbmQ7IGkgPSBpICsgMSkge1xuXHRcdGZ1bmN0aW9uIHJlc3RWYWwoKSB7XG5cdFx0XHRyZXR1cm4gcGFyc2VTcGFjZWQocmVzdC5fY2hvcFN0YXJ0KGkgKyAxKSlcblx0XHR9XG5cblx0XHRjb25zdCB0b2tlbiA9IHJlc3QuX3Rva2Vuc1tpXVxuXHRcdGNvbnN0IGxvYyA9IHRva2VuLmxvY1xuXHRcdGlmICh0b2tlbiBpbnN0YW5jZW9mIEtleXdvcmQpXG5cdFx0XHRzd2l0Y2ggKHRva2VuLmtpbmQpIHtcblx0XHRcdFx0Y2FzZSBLZXl3b3Jkcy5BbXBlcnNhbmQ6XG5cdFx0XHRcdFx0aWYgKGkgPT09IHJlc3QuX2VuZCAtIDEpXG5cdFx0XHRcdFx0XHR1bmV4cGVjdGVkKHRva2VuKVxuXHRcdFx0XHRcdGkgPSBpICsgMVxuXHRcdFx0XHRcdGFjYyA9IG5ldyBNZW1iZXJGdW4odG9rZW4ubG9jLCBhY2MsIHBhcnNlTWVtYmVyTmFtZShyZXN0Ll90b2tlbnNbaV0pKVxuXHRcdFx0XHRcdGJyZWFrXG5cdFx0XHRcdGNhc2UgS2V5d29yZHMuRG90OiB7XG5cdFx0XHRcdFx0Ly8gSWYgdGhpcyB3ZXJlIHRoZSBsYXN0IG9uZSxcblx0XHRcdFx0XHQvLyBpdCB3b3VsZCBub3QgYmUgYSBLZXl3b3Jkcy5Eb3QgYnV0IGEgS2V5d29yZHMuT2JqQXNzaWduXG5cdFx0XHRcdFx0YXNzZXJ0KGkgPCByZXN0Ll9lbmQgLSAxKVxuXHRcdFx0XHRcdGkgPSBpICsgMVxuXHRcdFx0XHRcdGFjYyA9IG5ldyBNZW1iZXIodG9rZW4ubG9jLCBhY2MsIHBhcnNlTWVtYmVyTmFtZShyZXN0Ll90b2tlbnNbaV0pKVxuXHRcdFx0XHRcdGJyZWFrXG5cdFx0XHRcdH1cblx0XHRcdFx0Y2FzZSBLZXl3b3Jkcy5Eb3QyOlxuXHRcdFx0XHRcdGNoZWNrKGkgPCByZXN0Ll9lbmQgLSAxLCB0b2tlbi5sb2MsICgpID0+XG5cdFx0XHRcdFx0XHRgVXNlICR7Y29kZSgnLi4uJyl9IGZvciBpbmZpbml0ZSByYW5nZXMuYClcblx0XHRcdFx0XHRyZXR1cm4gbmV3IFJhbmdlKHRva2VuLmxvYywgYWNjLCByZXN0VmFsKCksIGZhbHNlKVxuXHRcdFx0XHRjYXNlIEtleXdvcmRzLkRvdDM6XG5cdFx0XHRcdFx0cmV0dXJuIG5ldyBSYW5nZSh0b2tlbi5sb2MsIGFjYywgb3BJZihpIDwgcmVzdC5fZW5kIC0gMSwgcmVzdFZhbCksIHRydWUpXG5cdFx0XHRcdGNhc2UgS2V5d29yZHMuRm9jdXM6XG5cdFx0XHRcdFx0YWNjID0gbmV3IENhbGwodG9rZW4ubG9jLCBhY2MsIFtMb2NhbEFjY2Vzcy5mb2N1cyhsb2MpXSlcblx0XHRcdFx0XHRicmVha1xuXHRcdFx0XHRjYXNlIEtleXdvcmRzLlR5cGU6XG5cdFx0XHRcdFx0cmV0dXJuIENhbGwuY29udGFpbnModG9rZW4ubG9jLCByZXN0VmFsKCksIGFjYylcblx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHR1bmV4cGVjdGVkKHRva2VuKVxuXHRcdFx0fVxuXHRcdGVsc2UgaWYgKHRva2VuIGluc3RhbmNlb2YgR3JvdXApIHtcblx0XHRcdGNvbnN0IHNsaWNlID0gU2xpY2UuZ3JvdXAodG9rZW4pXG5cdFx0XHRzd2l0Y2ggKHRva2VuLmtpbmQpIHtcblx0XHRcdFx0Y2FzZSBHcm91cHMuQnJhY2tldDpcblx0XHRcdFx0XHRhY2MgPSBDYWxsLnN1Yihsb2MsIGFjYywgcGFyc2VFeHByUGFydHMoc2xpY2UpKVxuXHRcdFx0XHRcdGJyZWFrXG5cdFx0XHRcdGNhc2UgR3JvdXBzLlBhcmVudGhlc2lzOlxuXHRcdFx0XHRcdGNoZWNrRW1wdHkoc2xpY2UsICgpID0+IGBVc2UgJHtjb2RlKCcoYSBiKScpfSwgbm90ICR7Y29kZSgnYShiKScpfWApXG5cdFx0XHRcdFx0YWNjID0gbmV3IENhbGwobG9jLCBhY2MsIFtdKVxuXHRcdFx0XHRcdGJyZWFrXG5cdFx0XHRcdGNhc2UgR3JvdXBzLlF1b3RlOlxuXHRcdFx0XHRcdGFjYyA9IG5ldyBRdW90ZVRhZ2dlZFRlbXBsYXRlKGxvYywgYWNjLCBwYXJzZVF1b3RlKHNsaWNlKSlcblx0XHRcdFx0XHRicmVha1xuXHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdHVuZXhwZWN0ZWQodG9rZW4pXG5cdFx0XHR9XG5cdFx0fSBlbHNlXG5cdFx0XHR1bmV4cGVjdGVkKHRva2VuKVxuXHR9XG5cdHJldHVybiBhY2Ncbn1cbiJdfQ==