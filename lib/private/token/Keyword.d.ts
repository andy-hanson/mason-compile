import Loc from 'esast/lib/Loc';
import Op from 'op/Op';
import { Operators, SpecialVals, UnaryOperators } from '../ast/Val';
import Token from './Token';
export default class Keyword extends Token {
    kind: Keywords;
    constructor(loc: Loc, kind: Keywords);
    toString(): string;
}
export declare const enum Keywords {
    Enum = 0,
    From = 1,
    Implements = 2,
    Interface = 3,
    Package = 4,
    Private = 5,
    Protected = 6,
    Public = 7,
    Arguments = 8,
    Continue = 9,
    Delete = 10,
    Eval = 11,
    In = 12,
    InstanceOf = 13,
    Return = 14,
    TypeOf = 15,
    Void = 16,
    While = 17,
    Bang = 18,
    LeftAngle = 19,
    LeftArrow = 20,
    RightAngle = 21,
    Data = 22,
    Declare = 23,
    DelPred = 24,
    DoWhile = 25,
    DoUntil = 26,
    Final = 27,
    Flags = 28,
    Implicit = 29,
    Is = 30,
    Macro = 31,
    Meta = 32,
    Mut = 33,
    Native = 34,
    On = 35,
    Operator = 36,
    Out = 37,
    Pure = 38,
    Readonly = 39,
    Sealed = 40,
    Sizeof = 41,
    Struct = 42,
    Throws = 43,
    To = 44,
    Type = 45,
    Until = 46,
    Use = 47,
    Actor = 48,
    Move = 49,
    Send = 50,
    Shared = 51,
    Synchronized = 52,
    Transient = 53,
    Volatile = 54,
    Any = 55,
    Boolean = 56,
    Int = 57,
    Int8 = 58,
    Int16 = 59,
    Int32 = 60,
    Int64 = 61,
    Uint = 62,
    Uint8 = 63,
    Uint16 = 64,
    Uint32 = 65,
    Uint64 = 66,
    Float = 67,
    Float32 = 68,
    Float64 = 69,
    Float128 = 70,
    Bignum = 71,
    Decimal = 72,
    Decimal32 = 73,
    Decimal64 = 74,
    Decimal128 = 75,
    Rational = 76,
    Complex = 77,
    Mixed = 78,
    Number = 79,
    Object = 80,
    Ptr = 81,
    String = 82,
    Symbol = 83,
    Abstract = 84,
    Ampersand = 85,
    As = 86,
    Assert = 87,
    Assign = 88,
    AssignMutate = 89,
    Await = 90,
    Break = 91,
    Built = 92,
    Case = 93,
    Catch = 94,
    Cond = 95,
    Class = 96,
    Colon = 97,
    Construct = 98,
    Debugger = 99,
    Del = 100,
    Do = 101,
    Dot = 102,
    Dot2 = 103,
    Dot3 = 104,
    Else = 105,
    Except = 106,
    Extends = 107,
    False = 108,
    Finally = 109,
    Focus = 110,
    For = 111,
    ForAsync = 112,
    ForBag = 113,
    Forbid = 114,
    Fun = 115,
    FunDo = 116,
    FunThis = 117,
    FunThisDo = 118,
    FunAsync = 119,
    FunAsynDo = 120,
    FunThisAsync = 121,
    FunThisAsynDo = 122,
    FunGen = 123,
    FunGenDo = 124,
    FunThisGen = 125,
    FunThisGenDo = 126,
    Get = 127,
    If = 128,
    Ignore = 129,
    Import = 130,
    ImportDo = 131,
    ImportLazy = 132,
    Lazy = 133,
    MapEntry = 134,
    Method = 135,
    My = 136,
    Name = 137,
    New = 138,
    Null = 139,
    ObjEntry = 140,
    Of = 141,
    OpAnd = 142,
    OpDiv = 143,
    OpEq = 144,
    OpEqExact = 145,
    OpExponent = 146,
    OpGreater = 147,
    OpGreaterOrEqual = 148,
    OpLess = 149,
    OpLessOrEqual = 150,
    OpMinus = 151,
    OpOr = 152,
    OpPlus = 153,
    OpRemainder = 154,
    OpTimes = 155,
    Override = 156,
    Pass = 157,
    Pipe = 158,
    Region = 159,
    Set = 160,
    Super = 161,
    Static = 162,
    Switch = 163,
    Tick = 164,
    Throw = 165,
    Todo = 166,
    Trait = 167,
    TraitDo = 168,
    True = 169,
    Try = 170,
    UnaryNeg = 171,
    UnaryNot = 172,
    Undefined = 173,
    Unless = 174,
    Virtual = 175,
    With = 176,
    Yield = 177,
    YieldTo = 178,
}
export declare function reservedKeywords(): Iterable<Keywords>;
export declare const allKeywords: Array<Keywords>;
export declare function keywordName(kind: Keywords): string;
export declare function opKeywordKindFromName(name: string): Op<Keywords>;
export declare function opKeywordKindToSpecialValueKind(kind: Keywords): Op<SpecialVals>;
export declare function isKeyword(keywordKind: Keywords, token: Token): token is Keyword;
export declare function isAnyKeyword(keywordKinds: Set<Keywords>, token: Token): token is Keyword;
export declare function tryGetKeywordName(token: Keyword): Op<string>;
export declare function isReservedKeyword(token: Token): token is Keyword;
export declare function isFunKeyword(token: Token): token is Keyword;
export declare function isOperatorKeyword(token: Token): token is Keyword;
export declare function keywordKindToOperatorKind(kind: Keywords): Operators;
export declare function isUnaryKeyword(token: Token): token is Keyword;
export declare function keywordKindToUnaryKind(kind: Keywords): UnaryOperators;
