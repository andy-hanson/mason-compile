{"version":3,"sources":["private/transpile/ast-constants.js","private/transpile/ast-constants.ts"],"names":[],"mappings":"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","file":"private/transpile/ast-constants.js","sourcesContent":["(function (factory) {\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === 'function' && define.amd) {\n        define([\"require\", \"exports\", 'esast/lib/ast', 'esast-create-util/lib/util'], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    var ast_1 = require('esast/lib/ast');\n    var util_1 = require('esast-create-util/lib/util');\n    exports.GlobalError = new ast_1.Identifier('Error'), exports.IdBuilt = new ast_1.Identifier('built'), exports.IdError = new ast_1.Identifier('Error'), exports.IdExports = new ast_1.Identifier('exports'), exports.IdFocus = new ast_1.Identifier('_'), exports.IdLexicalThis = new ast_1.Identifier('_this'), exports.IdSuper = new ast_1.Identifier('super'), exports.LitNull = new ast_1.LiteralNull(), exports.LitUndefined = new ast_1.UnaryExpression('void', new ast_1.LiteralNumber(0)), exports.ReturnFocus = new ast_1.ReturnStatement(exports.IdFocus), exports.This = new ast_1.ThisExpression(), exports.DeclareBuiltBag = new ast_1.VariableDeclaration('let', [new ast_1.VariableDeclarator(exports.IdBuilt, new ast_1.ArrayExpression([]))]), exports.DeclareBuiltMap = new ast_1.VariableDeclaration('let', [\n        new ast_1.VariableDeclarator(exports.IdBuilt, new ast_1.NewExpression(util_1.member(new ast_1.Identifier('global'), 'Map'), []))]), exports.DeclareBuiltObj = new ast_1.VariableDeclaration('let', [\n        new ast_1.VariableDeclarator(exports.IdBuilt, new ast_1.ObjectExpression([]))]), exports.DeclareLexicalThis = new ast_1.VariableDeclaration('let', [new ast_1.VariableDeclarator(exports.IdLexicalThis, exports.This)]), exports.LetLexicalThis = new ast_1.VariableDeclaration('let', [new ast_1.VariableDeclarator(exports.IdLexicalThis)]), exports.SetLexicalThis = new ast_1.AssignmentExpression('=', exports.IdLexicalThis, exports.This);\n});\n","import {ArrayExpression, AssignmentExpression, Identifier, LiteralNull, LiteralNumber, NewExpression, ObjectExpression,\n\tReturnStatement, ThisExpression, UnaryExpression, VariableDeclaration, VariableDeclarator} from 'esast/lib/ast'\nimport {member} from 'esast-create-util/lib/util'\n\nexport const\n\tGlobalError = new Identifier('Error'),\n\tIdBuilt = new Identifier('built'),\n\tIdError = new Identifier('Error'),\n\tIdExports = new Identifier('exports'),\n\tIdFocus = new Identifier('_'),\n\tIdLexicalThis = new Identifier('_this'),\n\tIdSuper = new Identifier('super'),\n\tLitNull = new LiteralNull(),\n\tLitUndefined = new UnaryExpression('void', new LiteralNumber(0)),\n\tReturnFocus = new ReturnStatement(IdFocus),\n\tThis = new ThisExpression(),\n\n\tDeclareBuiltBag = new VariableDeclaration('let',\n\t\t[new VariableDeclarator(IdBuilt, new ArrayExpression([]))]),\n\tDeclareBuiltMap = new VariableDeclaration('let', [\n\t\tnew VariableDeclarator(IdBuilt,\n\t\t\tnew NewExpression(member(new Identifier('global'), 'Map'), []))]),\n\tDeclareBuiltObj = new VariableDeclaration('let', [\n\t\tnew VariableDeclarator(IdBuilt, new ObjectExpression([]))]),\n\n\tDeclareLexicalThis = new VariableDeclaration('let',\n\t\t[new VariableDeclarator(IdLexicalThis, This)]),\n\tLetLexicalThis = new VariableDeclaration('let', [new VariableDeclarator(IdLexicalThis)]),\n\tSetLexicalThis = new AssignmentExpression('=', IdLexicalThis, This)\n"],"sourceRoot":"/source/"}