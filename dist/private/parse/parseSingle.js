if (typeof define !== 'function') var define = require('amdefine')(module);define(['exports', 'module', '../MsAst', '../Token', '../util', './context', './parseBlock', './parseQuote', './parse*', './Slice'], function (exports, module, _MsAst, _Token, _util, _context, _parseBlock, _parseQuote, _parse, _Slice) {
	'use strict';

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _parseQuote2 = _interopRequireDefault(_parseQuote);

	var _Slice2 = _interopRequireDefault(_Slice);

	module.exports = token => {
		const loc = token.loc;

		if (token instanceof _Token.Name) return new _MsAst.LocalAccess(loc, token.name);else if (token instanceof _Token.Group) {
			const slice = _Slice2.default.group(token);
			switch (token.kind) {
				case _Token.G_Space:
					return (0, _parse.parseSpaced)(slice);
				case _Token.G_Parenthesis:
					return (0, _parse.parseExpr)(slice);
				case _Token.G_Bracket:
					return new _MsAst.BagSimple(loc, (0, _parse.parseExprParts)(slice));
				case _Token.G_Block:
					return (0, _parseBlock.blockWrap)(slice);
				case _Token.G_Quote:
					return (0, _parseQuote2.default)(slice);
				default:
					throw new Error(token.kind);
			}
		} else if (token instanceof _MsAst.NumberLiteral) return token;else if (token instanceof _Token.Keyword) switch (token.kind) {
			case _Token.KW_Focus:
				return _MsAst.LocalAccess.focus(loc);
			default:
				return (0, _util.ifElse)((0, _Token.opKeywordKindToSpecialValueKind)(token.kind), _ => new _MsAst.SpecialVal(loc, _), () => (0, _context.unexpected)(token));
		} else (0, _context.unexpected)(token);
	};
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBhcnNlU2luZ2xlLmpzIiwicHJpdmF0ZS9wYXJzZS9wYXJzZVNpbmdsZS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7O2tCQ1VlLEtBQUssSUFBSTtRQUNoQixHQUFHLEdBQUksS0FBSyxDQUFaLEdBQUc7O0FBQ1YsTUFBSSxLQUFLLG1CQVgwRCxJQUFJLEFBVzlDLEVBQ3hCLE9BQU8sV0FiVSxXQUFXLENBYUwsR0FBRyxFQUFFLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQSxLQUNuQyxJQUFJLEtBQUssbUJBYlAsS0FBSyxBQWFtQixFQUFFO0FBQ2hDLFNBQU0sS0FBSyxHQUFHLGdCQUFNLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQTtBQUNoQyxXQUFRLEtBQUssQ0FBQyxJQUFJO0FBQ2pCLGdCQWhCK0MsT0FBTztBQWlCckQsWUFBTyxXQVh3QixXQUFXLEVBV3ZCLEtBQUssQ0FBQyxDQUFBO0FBQUEsQUFDMUIsZ0JBbEJnQyxhQUFhO0FBbUI1QyxZQUFPLFdBYkgsU0FBUyxFQWFJLEtBQUssQ0FBQyxDQUFBO0FBQUEsQUFDeEIsZ0JBcEJxQixTQUFTO0FBcUI3QixZQUFPLFdBdEJILFNBQVMsQ0FzQlEsR0FBRyxFQUFFLFdBZlgsY0FBYyxFQWVZLEtBQUssQ0FBQyxDQUFDLENBQUE7QUFBQSxBQUNqRCxnQkF0QlksT0FBTztBQXVCbEIsWUFBTyxnQkFuQkgsU0FBUyxFQW1CSSxLQUFLLENBQUMsQ0FBQTtBQUFBLEFBQ3hCLGdCQXhCd0QsT0FBTztBQXlCOUQsWUFBTywwQkFBVyxLQUFLLENBQUMsQ0FBQTtBQUFBLEFBQ3pCO0FBQ0MsV0FBTSxJQUFJLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUE7QUFBQSxJQUM1QjtHQUNELE1BQU0sSUFBSSxLQUFLLG1CQTlCZSxhQUFhLEFBOEJILEVBQ3hDLE9BQU8sS0FBSyxDQUFBLEtBQ1IsSUFBSSxLQUFLLG1CQTlCbUIsT0FBTyxBQThCUCxFQUNoQyxRQUFRLEtBQUssQ0FBQyxJQUFJO0FBQ2pCLGVBaEN3QyxRQUFRO0FBaUMvQyxXQUFPLE9BbkNRLFdBQVcsQ0FtQ1AsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFBO0FBQUEsQUFDOUI7QUFDQyxXQUFPLFVBbENILE1BQU0sRUFrQ0ksV0FuQ2pCLCtCQUErQixFQW1Da0IsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUN4RCxDQUFDLElBQUksV0F0Q3FDLFVBQVUsQ0FzQ2hDLEdBQUcsRUFBRSxDQUFDLENBQUMsRUFDM0IsTUFBTSxhQW5DSCxVQUFVLEVBbUNJLEtBQUssQ0FBQyxDQUFDLENBQUE7QUFBQSxHQUMxQixNQUVELGFBdENNLFVBQVUsRUFzQ0wsS0FBSyxDQUFDLENBQUE7RUFDbEIiLCJmaWxlIjoicHJpdmF0ZS9wYXJzZS9wYXJzZVNpbmdsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbbnVsbCwiaW1wb3J0IHtCYWdTaW1wbGUsIExvY2FsQWNjZXNzLCBOdW1iZXJMaXRlcmFsLCBTcGVjaWFsVmFsfSBmcm9tICcuLi9Nc0FzdCdcbmltcG9ydCB7R3JvdXAsIEdfQmxvY2ssIEdfQnJhY2tldCwgR19QYXJlbnRoZXNpcywgR19TcGFjZSwgR19RdW90ZSwgTmFtZSxcblx0b3BLZXl3b3JkS2luZFRvU3BlY2lhbFZhbHVlS2luZCwgS2V5d29yZCwgS1dfRm9jdXN9IGZyb20gJy4uL1Rva2VuJ1xuaW1wb3J0IHtpZkVsc2V9IGZyb20gJy4uL3V0aWwnXG5pbXBvcnQge3VuZXhwZWN0ZWR9IGZyb20gJy4vY29udGV4dCdcbmltcG9ydCB7YmxvY2tXcmFwfSBmcm9tICcuL3BhcnNlQmxvY2snXG5pbXBvcnQgcGFyc2VRdW90ZSBmcm9tICcuL3BhcnNlUXVvdGUnXG5pbXBvcnQge3BhcnNlRXhwciwgcGFyc2VFeHByUGFydHMsIHBhcnNlU3BhY2VkfSBmcm9tICcuL3BhcnNlKidcbmltcG9ydCBTbGljZSBmcm9tICcuL1NsaWNlJ1xuXG5leHBvcnQgZGVmYXVsdCB0b2tlbiA9PiB7XG5cdGNvbnN0IHtsb2N9ID0gdG9rZW5cblx0aWYgKHRva2VuIGluc3RhbmNlb2YgTmFtZSlcblx0XHRyZXR1cm4gbmV3IExvY2FsQWNjZXNzKGxvYywgdG9rZW4ubmFtZSlcblx0ZWxzZSBpZiAodG9rZW4gaW5zdGFuY2VvZiBHcm91cCkge1xuXHRcdGNvbnN0IHNsaWNlID0gU2xpY2UuZ3JvdXAodG9rZW4pXG5cdFx0c3dpdGNoICh0b2tlbi5raW5kKSB7XG5cdFx0XHRjYXNlIEdfU3BhY2U6XG5cdFx0XHRcdHJldHVybiBwYXJzZVNwYWNlZChzbGljZSlcblx0XHRcdGNhc2UgR19QYXJlbnRoZXNpczpcblx0XHRcdFx0cmV0dXJuIHBhcnNlRXhwcihzbGljZSlcblx0XHRcdGNhc2UgR19CcmFja2V0OlxuXHRcdFx0XHRyZXR1cm4gbmV3IEJhZ1NpbXBsZShsb2MsIHBhcnNlRXhwclBhcnRzKHNsaWNlKSlcblx0XHRcdGNhc2UgR19CbG9jazpcblx0XHRcdFx0cmV0dXJuIGJsb2NrV3JhcChzbGljZSlcblx0XHRcdGNhc2UgR19RdW90ZTpcblx0XHRcdFx0cmV0dXJuIHBhcnNlUXVvdGUoc2xpY2UpXG5cdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IodG9rZW4ua2luZClcblx0XHR9XG5cdH0gZWxzZSBpZiAodG9rZW4gaW5zdGFuY2VvZiBOdW1iZXJMaXRlcmFsKVxuXHRcdHJldHVybiB0b2tlblxuXHRlbHNlIGlmICh0b2tlbiBpbnN0YW5jZW9mIEtleXdvcmQpXG5cdFx0c3dpdGNoICh0b2tlbi5raW5kKSB7XG5cdFx0XHRjYXNlIEtXX0ZvY3VzOlxuXHRcdFx0XHRyZXR1cm4gTG9jYWxBY2Nlc3MuZm9jdXMobG9jKVxuXHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0cmV0dXJuIGlmRWxzZShvcEtleXdvcmRLaW5kVG9TcGVjaWFsVmFsdWVLaW5kKHRva2VuLmtpbmQpLFxuXHRcdFx0XHRcdF8gPT4gbmV3IFNwZWNpYWxWYWwobG9jLCBfKSxcblx0XHRcdFx0XHQoKSA9PiB1bmV4cGVjdGVkKHRva2VuKSlcblx0XHR9XG5cdGVsc2Vcblx0XHR1bmV4cGVjdGVkKHRva2VuKVxufVxuIl0sInNvdXJjZVJvb3QiOiIvc3JjIn0=
