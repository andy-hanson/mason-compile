'use strict';

(function (global, factory) {
	if (typeof define === "function" && define.amd) {
		define(['exports', 'esast/dist/ast', 'esast/dist/util', './util'], factory);
	} else if (typeof exports !== "undefined") {
		factory(exports, require('esast/dist/ast'), require('esast/dist/util'), require('./util'));
	} else {
		var mod = {
			exports: {}
		};
		factory(mod.exports, global.ast, global.util, global.util);
		global.astConstants = mod.exports;
	}
})(this, function (exports, _ast, _util, _util2) {
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.SetLexicalThis = exports.LetLexicalThis = exports.DeclareLexicalThis = exports.ExportsDefault = exports.DeclareBuiltObj = exports.DeclareBuiltMap = exports.DeclareBuiltBag = exports.ArraySliceCall = exports.ThrowNoCaseMatch = exports.ThrowAssertFail = exports.SymbolIterator = exports.SwitchCaseNoMatch = exports.ReturnFocus = exports.ReturnBuilt = exports.LitZero = exports.LitTrue = exports.LitStrThrow = exports.LitNull = exports.LitEmptyString = exports.LitEmptyArray = exports.IdSuper = exports.IdLexicalThis = exports.IdFocus = exports.IdExtract = exports.IdExports = exports.IdError = exports.IdBuilt = exports.IdArguments = exports.GlobalInfinity = exports.GlobalError = undefined;
	const GlobalError = exports.GlobalError = new _ast.Identifier('Error'),
	      GlobalInfinity = exports.GlobalInfinity = new _ast.Identifier('Infinity'),
	      IdArguments = exports.IdArguments = new _ast.Identifier('arguments'),
	      IdBuilt = exports.IdBuilt = new _ast.Identifier('built'),
	      IdError = exports.IdError = new _ast.Identifier('Error'),
	      IdExports = exports.IdExports = new _ast.Identifier('exports'),
	      IdExtract = exports.IdExtract = new _ast.Identifier('_$'),
	      IdFocus = exports.IdFocus = new _ast.Identifier('_'),
	      IdLexicalThis = exports.IdLexicalThis = new _ast.Identifier('_this'),
	      IdSuper = exports.IdSuper = new _ast.Identifier('super'),
	      LitEmptyArray = exports.LitEmptyArray = new _ast.ArrayExpression([]),
	      LitEmptyString = exports.LitEmptyString = new _ast.Literal(''),
	      LitNull = exports.LitNull = new _ast.Literal(null),
	      LitStrThrow = exports.LitStrThrow = new _ast.Literal('An error occurred.'),
	      LitTrue = exports.LitTrue = new _ast.Literal(true),
	      LitZero = exports.LitZero = new _ast.Literal(0),
	      ReturnBuilt = exports.ReturnBuilt = new _ast.ReturnStatement(IdBuilt),
	      ReturnFocus = exports.ReturnFocus = new _ast.ReturnStatement(IdFocus),
	      SwitchCaseNoMatch = exports.SwitchCaseNoMatch = new _ast.SwitchCase(undefined, [(0, _util2.throwErrorFromString)('No branch of `switch` matches.')]),
	      SymbolIterator = exports.SymbolIterator = (0, _util.member)(new _ast.Identifier('Symbol'), 'iterator'),
	      ThrowAssertFail = exports.ThrowAssertFail = (0, _util2.throwErrorFromString)('Assertion failed.'),
	      ThrowNoCaseMatch = exports.ThrowNoCaseMatch = (0, _util2.throwErrorFromString)('No branch of `case` matches.'),
	      ArraySliceCall = exports.ArraySliceCall = (0, _util.member)((0, _util.member)(LitEmptyArray, 'slice'), 'call'),
	      DeclareBuiltBag = exports.DeclareBuiltBag = new _ast.VariableDeclaration('let', [new _ast.VariableDeclarator(IdBuilt, LitEmptyArray)]),
	      DeclareBuiltMap = exports.DeclareBuiltMap = new _ast.VariableDeclaration('let', [new _ast.VariableDeclarator(IdBuilt, new _ast.NewExpression((0, _util.member)(new _ast.Identifier('global'), 'Map'), []))]),
	      DeclareBuiltObj = exports.DeclareBuiltObj = new _ast.VariableDeclaration('let', [new _ast.VariableDeclarator(IdBuilt, new _ast.ObjectExpression([]))]),
	      ExportsDefault = exports.ExportsDefault = (0, _util.member)(IdExports, 'default'),
	      DeclareLexicalThis = exports.DeclareLexicalThis = new _ast.VariableDeclaration('let', [new _ast.VariableDeclarator(IdLexicalThis, new _ast.ThisExpression())]),
	      LetLexicalThis = exports.LetLexicalThis = new _ast.VariableDeclaration('let', [new _ast.VariableDeclarator(IdLexicalThis)]),
	      SetLexicalThis = exports.SetLexicalThis = new _ast.AssignmentExpression('=', IdLexicalThis, new _ast.ThisExpression());
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9wcml2YXRlL3RyYW5zcGlsZS9hc3QtY29uc3RhbnRzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7T0FPQyxXQUFXLFdBQVgsV0FBVyxHQUFHLFNBUGdDLFVBQVUsQ0FPM0IsT0FBTyxDQUFDO09BQ3JDLGNBQWMsV0FBZCxjQUFjLEdBQUcsU0FSNkIsVUFBVSxDQVF4QixVQUFVLENBQUM7T0FDM0MsV0FBVyxXQUFYLFdBQVcsR0FBRyxTQVRnQyxVQUFVLENBUzNCLFdBQVcsQ0FBQztPQUN6QyxPQUFPLFdBQVAsT0FBTyxHQUFHLFNBVm9DLFVBQVUsQ0FVL0IsT0FBTyxDQUFDO09BQ2pDLE9BQU8sV0FBUCxPQUFPLEdBQUcsU0FYb0MsVUFBVSxDQVcvQixPQUFPLENBQUM7T0FDakMsU0FBUyxXQUFULFNBQVMsR0FBRyxTQVprQyxVQUFVLENBWTdCLFNBQVMsQ0FBQztPQUNyQyxTQUFTLFdBQVQsU0FBUyxHQUFHLFNBYmtDLFVBQVUsQ0FhN0IsSUFBSSxDQUFDO09BQ2hDLE9BQU8sV0FBUCxPQUFPLEdBQUcsU0Fkb0MsVUFBVSxDQWMvQixHQUFHLENBQUM7T0FFN0IsYUFBYSxXQUFiLGFBQWEsR0FBRyxTQWhCOEIsVUFBVSxDQWdCekIsT0FBTyxDQUFDO09BQ3ZDLE9BQU8sV0FBUCxPQUFPLEdBQUcsU0FqQm9DLFVBQVUsQ0FpQi9CLE9BQU8sQ0FBQztPQUNqQyxhQUFhLFdBQWIsYUFBYSxHQUFHLFNBbEJULGVBQWUsQ0FrQmMsRUFBRSxDQUFDO09BQ3ZDLGNBQWMsV0FBZCxjQUFjLEdBQUcsU0FuQnlDLE9BQU8sQ0FtQnBDLEVBQUUsQ0FBQztPQUNoQyxPQUFPLFdBQVAsT0FBTyxHQUFHLFNBcEJnRCxPQUFPLENBb0IzQyxJQUFJLENBQUM7T0FDM0IsV0FBVyxXQUFYLFdBQVcsR0FBRyxTQXJCNEMsT0FBTyxDQXFCdkMsb0JBQW9CLENBQUM7T0FDL0MsT0FBTyxXQUFQLE9BQU8sR0FBRyxTQXRCZ0QsT0FBTyxDQXNCM0MsSUFBSSxDQUFDO09BQzNCLE9BQU8sV0FBUCxPQUFPLEdBQUcsU0F2QmdELE9BQU8sQ0F1QjNDLENBQUMsQ0FBQztPQUN4QixXQUFXLFdBQVgsV0FBVyxHQUFHLFNBdkJkLGVBQWUsQ0F1Qm1CLE9BQU8sQ0FBQztPQUMxQyxXQUFXLFdBQVgsV0FBVyxHQUFHLFNBeEJkLGVBQWUsQ0F3Qm1CLE9BQU8sQ0FBQztPQUMxQyxpQkFBaUIsV0FBakIsaUJBQWlCLEdBQUcsU0F6QkgsVUFBVSxDQXlCUSxTQUFTLEVBQUUsQ0FDN0MsV0F2Qk0sb0JBQW9CLEVBdUJMLGdDQUFnQyxDQUFDLENBQUMsQ0FBQztPQUN6RCxjQUFjLFdBQWQsY0FBYyxHQUFHLFVBekJWLE1BQU0sRUF5QlcsU0E1QnNCLFVBQVUsQ0E0QmpCLFFBQVEsQ0FBQyxFQUFFLFVBQVUsQ0FBQztPQUM3RCxlQUFlLFdBQWYsZUFBZSxHQUFHLFdBekJYLG9CQUFvQixFQXlCWSxtQkFBbUIsQ0FBQztPQUMzRCxnQkFBZ0IsV0FBaEIsZ0JBQWdCLEdBQUcsV0ExQlosb0JBQW9CLEVBMEJhLDhCQUE4QixDQUFDO09BRXZFLGNBQWMsV0FBZCxjQUFjLEdBQUcsVUE3QlYsTUFBTSxFQTZCVyxVQTdCakIsTUFBTSxFQTZCa0IsYUFBYSxFQUFFLE9BQU8sQ0FBQyxFQUFFLE1BQU0sQ0FBQztPQUMvRCxlQUFlLFdBQWYsZUFBZSxHQUFHLFNBaEMyQixtQkFBbUIsQ0FnQ3RCLEtBQUssRUFDOUMsQ0FBQyxTQWpDZ0Usa0JBQWtCLENBaUMzRCxPQUFPLEVBQUUsYUFBYSxDQUFDLENBQUMsQ0FBQztPQUNsRCxlQUFlLFdBQWYsZUFBZSxHQUFHLFNBbEMyQixtQkFBbUIsQ0FrQ3RCLEtBQUssRUFBRSxDQUNoRCxTQW5DaUUsa0JBQWtCLENBbUM1RCxPQUFPLEVBQzdCLFNBckNpRSxhQUFhLENBcUM1RCxVQWxDYixNQUFNLEVBa0NjLFNBckNtQixVQUFVLENBcUNkLFFBQVEsQ0FBQyxFQUFFLEtBQUssQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztPQUNuRSxlQUFlLFdBQWYsZUFBZSxHQUFHLFNBckMyQixtQkFBbUIsQ0FxQ3RCLEtBQUssRUFBRSxDQUNoRCxTQXRDaUUsa0JBQWtCLENBc0M1RCxPQUFPLEVBQUUsU0F2Q2lELGdCQUFnQixDQXVDNUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO09BQzVELGNBQWMsV0FBZCxjQUFjLEdBQUcsVUFyQ1YsTUFBTSxFQXFDVyxTQUFTLEVBQUUsU0FBUyxDQUFDO09BRTdDLGtCQUFrQixXQUFsQixrQkFBa0IsR0FBRyxTQXpDd0IsbUJBQW1CLENBeUNuQixLQUFLLEVBQ2pELENBQUMsU0ExQ2dFLGtCQUFrQixDQTBDM0QsYUFBYSxFQUFFLFNBMUNYLGNBQWMsRUEwQ2lCLENBQUMsQ0FBQyxDQUFDO09BQy9ELGNBQWMsV0FBZCxjQUFjLEdBQUcsU0EzQzRCLG1CQUFtQixDQTJDdkIsS0FBSyxFQUFFLENBQUMsU0EzQ2lCLGtCQUFrQixDQTJDWixhQUFhLENBQUMsQ0FBQyxDQUFDO09BQ3hGLGNBQWMsV0FBZCxjQUFjLEdBQUcsU0E3Q08sb0JBQW9CLENBNkNGLEdBQUcsRUFBRSxhQUFhLEVBQUUsU0E1Q2pDLGNBQWMsRUE0Q3VDLENBQUMiLCJmaWxlIjoiYXN0LWNvbnN0YW50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7QXJyYXlFeHByZXNzaW9uLCBBc3NpZ25tZW50RXhwcmVzc2lvbiwgSWRlbnRpZmllciwgTGl0ZXJhbCwgTmV3RXhwcmVzc2lvbiwgT2JqZWN0RXhwcmVzc2lvbixcblx0UmV0dXJuU3RhdGVtZW50LCBTd2l0Y2hDYXNlLCBUaGlzRXhwcmVzc2lvbiwgVmFyaWFibGVEZWNsYXJhdGlvbiwgVmFyaWFibGVEZWNsYXJhdG9yfVxuXHRmcm9tICdlc2FzdC9kaXN0L2FzdCdcbmltcG9ydCB7bWVtYmVyfSBmcm9tICdlc2FzdC9kaXN0L3V0aWwnXG5pbXBvcnQge3Rocm93RXJyb3JGcm9tU3RyaW5nfSBmcm9tICcuL3V0aWwnXG5cbmV4cG9ydCBjb25zdFxuXHRHbG9iYWxFcnJvciA9IG5ldyBJZGVudGlmaWVyKCdFcnJvcicpLFxuXHRHbG9iYWxJbmZpbml0eSA9IG5ldyBJZGVudGlmaWVyKCdJbmZpbml0eScpLFxuXHRJZEFyZ3VtZW50cyA9IG5ldyBJZGVudGlmaWVyKCdhcmd1bWVudHMnKSxcblx0SWRCdWlsdCA9IG5ldyBJZGVudGlmaWVyKCdidWlsdCcpLFxuXHRJZEVycm9yID0gbmV3IElkZW50aWZpZXIoJ0Vycm9yJyksXG5cdElkRXhwb3J0cyA9IG5ldyBJZGVudGlmaWVyKCdleHBvcnRzJyksXG5cdElkRXh0cmFjdCA9IG5ldyBJZGVudGlmaWVyKCdfJCcpLFxuXHRJZEZvY3VzID0gbmV3IElkZW50aWZpZXIoJ18nKSxcblx0Ly8gVE9ETzpFUzYgU2hvdWxkbid0IG5lZWQsIGp1c3QgdXNlIGFycm93IGZ1bmN0aW9ucy5cblx0SWRMZXhpY2FsVGhpcyA9IG5ldyBJZGVudGlmaWVyKCdfdGhpcycpLFxuXHRJZFN1cGVyID0gbmV3IElkZW50aWZpZXIoJ3N1cGVyJyksXG5cdExpdEVtcHR5QXJyYXkgPSBuZXcgQXJyYXlFeHByZXNzaW9uKFtdKSxcblx0TGl0RW1wdHlTdHJpbmcgPSBuZXcgTGl0ZXJhbCgnJyksXG5cdExpdE51bGwgPSBuZXcgTGl0ZXJhbChudWxsKSxcblx0TGl0U3RyVGhyb3cgPSBuZXcgTGl0ZXJhbCgnQW4gZXJyb3Igb2NjdXJyZWQuJyksXG5cdExpdFRydWUgPSBuZXcgTGl0ZXJhbCh0cnVlKSxcblx0TGl0WmVybyA9IG5ldyBMaXRlcmFsKDApLFxuXHRSZXR1cm5CdWlsdCA9IG5ldyBSZXR1cm5TdGF0ZW1lbnQoSWRCdWlsdCksXG5cdFJldHVybkZvY3VzID0gbmV3IFJldHVyblN0YXRlbWVudChJZEZvY3VzKSxcblx0U3dpdGNoQ2FzZU5vTWF0Y2ggPSBuZXcgU3dpdGNoQ2FzZSh1bmRlZmluZWQsIFtcblx0XHR0aHJvd0Vycm9yRnJvbVN0cmluZygnTm8gYnJhbmNoIG9mIGBzd2l0Y2hgIG1hdGNoZXMuJyldKSxcblx0U3ltYm9sSXRlcmF0b3IgPSBtZW1iZXIobmV3IElkZW50aWZpZXIoJ1N5bWJvbCcpLCAnaXRlcmF0b3InKSxcblx0VGhyb3dBc3NlcnRGYWlsID0gdGhyb3dFcnJvckZyb21TdHJpbmcoJ0Fzc2VydGlvbiBmYWlsZWQuJyksXG5cdFRocm93Tm9DYXNlTWF0Y2ggPSB0aHJvd0Vycm9yRnJvbVN0cmluZygnTm8gYnJhbmNoIG9mIGBjYXNlYCBtYXRjaGVzLicpLFxuXG5cdEFycmF5U2xpY2VDYWxsID0gbWVtYmVyKG1lbWJlcihMaXRFbXB0eUFycmF5LCAnc2xpY2UnKSwgJ2NhbGwnKSxcblx0RGVjbGFyZUJ1aWx0QmFnID0gbmV3IFZhcmlhYmxlRGVjbGFyYXRpb24oJ2xldCcsXG5cdFx0W25ldyBWYXJpYWJsZURlY2xhcmF0b3IoSWRCdWlsdCwgTGl0RW1wdHlBcnJheSldKSxcblx0RGVjbGFyZUJ1aWx0TWFwID0gbmV3IFZhcmlhYmxlRGVjbGFyYXRpb24oJ2xldCcsIFtcblx0XHRuZXcgVmFyaWFibGVEZWNsYXJhdG9yKElkQnVpbHQsXG5cdFx0XHRuZXcgTmV3RXhwcmVzc2lvbihtZW1iZXIobmV3IElkZW50aWZpZXIoJ2dsb2JhbCcpLCAnTWFwJyksIFtdKSldKSxcblx0RGVjbGFyZUJ1aWx0T2JqID0gbmV3IFZhcmlhYmxlRGVjbGFyYXRpb24oJ2xldCcsIFtcblx0XHRuZXcgVmFyaWFibGVEZWNsYXJhdG9yKElkQnVpbHQsIG5ldyBPYmplY3RFeHByZXNzaW9uKFtdKSldKSxcblx0RXhwb3J0c0RlZmF1bHQgPSBtZW1iZXIoSWRFeHBvcnRzLCAnZGVmYXVsdCcpLFxuXG5cdERlY2xhcmVMZXhpY2FsVGhpcyA9IG5ldyBWYXJpYWJsZURlY2xhcmF0aW9uKCdsZXQnLFxuXHRcdFtuZXcgVmFyaWFibGVEZWNsYXJhdG9yKElkTGV4aWNhbFRoaXMsIG5ldyBUaGlzRXhwcmVzc2lvbigpKV0pLFxuXHRMZXRMZXhpY2FsVGhpcyA9IG5ldyBWYXJpYWJsZURlY2xhcmF0aW9uKCdsZXQnLCBbbmV3IFZhcmlhYmxlRGVjbGFyYXRvcihJZExleGljYWxUaGlzKV0pLFxuXHRTZXRMZXhpY2FsVGhpcyA9IG5ldyBBc3NpZ25tZW50RXhwcmVzc2lvbignPScsIElkTGV4aWNhbFRoaXMsIG5ldyBUaGlzRXhwcmVzc2lvbigpKVxuIl19