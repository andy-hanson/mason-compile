if (typeof define !== 'function') var define = require('amdefine')(module);define(['exports', 'esast/dist/ast', 'esast/dist/mangle-identifier', '../util', './ms-call', './transpile'], function (exports, _esastDistAst, _esastDistMangleIdentifier, _util, _msCall, _transpile) {
	'use strict';

	Object.defineProperty(exports, '__esModule', {
		value: true
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _mangleIdentifier = _interopRequireDefault(_esastDistMangleIdentifier);

	// Define this here to avoid circular dependency with ast-constants.
	const _IdError = new _esastDistAst.Identifier('Error');

	exports._IdError = _IdError;
	const accessLocalDeclare = localDeclare => {
		const id = idForDeclareCached(localDeclare);
		return localDeclare.isLazy() ? (0, _msCall.msUnlazy)(id) : new _esastDistAst.Identifier(id.name);
	},
	      declare = (localDeclare, val) => new _esastDistAst.VariableDeclaration('const', [new _esastDistAst.VariableDeclarator(idForDeclareCached(localDeclare), val)]),
	      forStatementInfinite = body => new _esastDistAst.ForStatement(null, null, null, body),
	      idForDeclareCached = localDeclare => {
		let _ = declareToId.get(localDeclare);
		if (_ === undefined) {
			_ = new _esastDistAst.Identifier((0, _mangleIdentifier.default)(localDeclare.name));
			declareToId.set(localDeclare, _);
		}
		return _;
	},
	      opTypeCheckForLocalDeclare = localDeclare =>
	// TODO: Way to typecheck lazies
	(0, _util.opIf)(!localDeclare.isLazy(), () => (0, _util.opMap)(localDeclare.opType, type => new _esastDistAst.ExpressionStatement((0, _msCall.msCheckContains)((0, _transpile.t0)(type), accessLocalDeclare(localDeclare), new _esastDistAst.Literal(localDeclare.name))))),
	      throwErrorFromString = msg => new _esastDistAst.ThrowStatement(new _esastDistAst.NewExpression(_IdError, [new _esastDistAst.Literal(msg)]));

	exports.accessLocalDeclare = accessLocalDeclare;
	exports.declare = declare;
	exports.forStatementInfinite = forStatementInfinite;
	exports.idForDeclareCached = idForDeclareCached;
	exports.opTypeCheckForLocalDeclare = opTypeCheckForLocalDeclare;
	exports.throwErrorFromString = throwErrorFromString;
	const declareToId = new WeakMap();
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInV0aWwuanMiLCJwcml2YXRlL3RyYW5zcGlsZS91dGlsLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7QUNRTyxPQUFNLFFBQVEsR0FBRyxrQkFSb0IsVUFBVSxDQVFmLE9BQU8sQ0FBQyxDQUFBOzs7QUFFeEMsT0FDTixrQkFBa0IsR0FBRyxZQUFZLElBQUk7QUFDcEMsUUFBTSxFQUFFLEdBQUcsa0JBQWtCLENBQUMsWUFBWSxDQUFDLENBQUE7QUFDM0MsU0FBTyxZQUFZLENBQUMsTUFBTSxFQUFFLEdBQUcsWUFUUCxRQUFRLEVBU1EsRUFBRSxDQUFDLEdBQUcsa0JBYkosVUFBVSxDQWFTLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQTtFQUNyRTtPQUVELE9BQU8sR0FBRyxDQUFDLFlBQVksRUFBRSxHQUFHLEtBQzNCLGtCQWhCbUIsbUJBQW1CLENBZ0JkLE9BQU8sRUFDOUIsQ0FBRSxrQkFqQkosa0JBQWtCLENBaUJTLGtCQUFrQixDQUFDLFlBQVksQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFFLENBQUM7T0FFcEUsb0JBQW9CLEdBQUcsSUFBSSxJQUMxQixrQkFyQjRCLFlBQVksQ0FxQnZCLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQztPQUV6QyxrQkFBa0IsR0FBRyxZQUFZLElBQUk7QUFDcEMsTUFBSSxDQUFDLEdBQUcsV0FBVyxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQTtBQUNyQyxNQUFJLENBQUMsS0FBSyxTQUFTLEVBQUU7QUFDcEIsSUFBQyxHQUFHLGtCQTFCcUMsVUFBVSxDQTBCaEMsK0JBQWlCLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFBO0FBQ3ZELGNBQVcsQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQyxDQUFBO0dBQ2hDO0FBQ0QsU0FBTyxDQUFDLENBQUE7RUFDUjtPQUVELDBCQUEwQixHQUFHLFlBQVk7O0FBRXhDLFdBL0JPLElBQUksRUErQk4sQ0FBQyxZQUFZLENBQUMsTUFBTSxFQUFFLEVBQUUsTUFDNUIsVUFoQ1ksS0FBSyxFQWdDWCxZQUFZLENBQUMsTUFBTSxFQUFFLElBQUksSUFDOUIsa0JBcENLLG1CQUFtQixDQW9DQSxZQWhDbkIsZUFBZSxFQWlDbkIsZUFoQ0ksRUFBRSxFQWdDSCxJQUFJLENBQUMsRUFDUixrQkFBa0IsQ0FBQyxZQUFZLENBQUMsRUFDaEMsa0JBdkNtRCxPQUFPLENBdUM5QyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7T0FFdEMsb0JBQW9CLEdBQUcsR0FBRyxJQUN6QixrQkExQzhFLGNBQWMsQ0EwQ3pFLGtCQTFDNEMsYUFBYSxDQTBDdkMsUUFBUSxFQUFFLENBQUUsa0JBMUNLLE9BQU8sQ0EwQ0EsR0FBRyxDQUFDLENBQUUsQ0FBQyxDQUFDLENBQUE7Ozs7Ozs7O0FBRXZFLE9BQ0MsV0FBVyxHQUFHLElBQUksT0FBTyxFQUFFLENBQUEiLCJmaWxlIjoicHJpdmF0ZS90cmFuc3BpbGUvdXRpbC5qcyIsInNvdXJjZXNDb250ZW50IjpbbnVsbCwiaW1wb3J0IHsgRXhwcmVzc2lvblN0YXRlbWVudCwgRm9yU3RhdGVtZW50LCBJZGVudGlmaWVyLCBMaXRlcmFsLCBOZXdFeHByZXNzaW9uLCBUaHJvd1N0YXRlbWVudCxcblx0VmFyaWFibGVEZWNsYXJhdG9yLCBWYXJpYWJsZURlY2xhcmF0aW9uIH0gZnJvbSAnZXNhc3QvZGlzdC9hc3QnXG5pbXBvcnQgbWFuZ2xlSWRlbnRpZmllciBmcm9tICdlc2FzdC9kaXN0L21hbmdsZS1pZGVudGlmaWVyJ1xuaW1wb3J0IHsgb3BJZiwgb3BNYXAgfSBmcm9tICcuLi91dGlsJ1xuaW1wb3J0IHsgbXNDaGVja0NvbnRhaW5zLCBtc1VubGF6eSB9IGZyb20gJy4vbXMtY2FsbCdcbmltcG9ydCB7IHQwIH0gZnJvbSAnLi90cmFuc3BpbGUnXG5cbi8vIERlZmluZSB0aGlzIGhlcmUgdG8gYXZvaWQgY2lyY3VsYXIgZGVwZW5kZW5jeSB3aXRoIGFzdC1jb25zdGFudHMuXG5leHBvcnQgY29uc3QgX0lkRXJyb3IgPSBuZXcgSWRlbnRpZmllcignRXJyb3InKVxuXG5leHBvcnQgY29uc3Rcblx0YWNjZXNzTG9jYWxEZWNsYXJlID0gbG9jYWxEZWNsYXJlID0+IHtcblx0XHRjb25zdCBpZCA9IGlkRm9yRGVjbGFyZUNhY2hlZChsb2NhbERlY2xhcmUpXG5cdFx0cmV0dXJuIGxvY2FsRGVjbGFyZS5pc0xhenkoKSA/IG1zVW5sYXp5KGlkKSA6IG5ldyBJZGVudGlmaWVyKGlkLm5hbWUpXG5cdH0sXG5cblx0ZGVjbGFyZSA9IChsb2NhbERlY2xhcmUsIHZhbCkgPT5cblx0XHRuZXcgVmFyaWFibGVEZWNsYXJhdGlvbignY29uc3QnLFxuXHRcdFx0WyBuZXcgVmFyaWFibGVEZWNsYXJhdG9yKGlkRm9yRGVjbGFyZUNhY2hlZChsb2NhbERlY2xhcmUpLCB2YWwpIF0pLFxuXG5cdGZvclN0YXRlbWVudEluZmluaXRlID0gYm9keSA9PlxuXHRcdG5ldyBGb3JTdGF0ZW1lbnQobnVsbCwgbnVsbCwgbnVsbCwgYm9keSksXG5cblx0aWRGb3JEZWNsYXJlQ2FjaGVkID0gbG9jYWxEZWNsYXJlID0+IHtcblx0XHRsZXQgXyA9IGRlY2xhcmVUb0lkLmdldChsb2NhbERlY2xhcmUpXG5cdFx0aWYgKF8gPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XyA9IG5ldyBJZGVudGlmaWVyKG1hbmdsZUlkZW50aWZpZXIobG9jYWxEZWNsYXJlLm5hbWUpKVxuXHRcdFx0ZGVjbGFyZVRvSWQuc2V0KGxvY2FsRGVjbGFyZSwgXylcblx0XHR9XG5cdFx0cmV0dXJuIF9cblx0fSxcblxuXHRvcFR5cGVDaGVja0ZvckxvY2FsRGVjbGFyZSA9IGxvY2FsRGVjbGFyZSA9PlxuXHRcdC8vIFRPRE86IFdheSB0byB0eXBlY2hlY2sgbGF6aWVzXG5cdFx0b3BJZighbG9jYWxEZWNsYXJlLmlzTGF6eSgpLCAoKSA9PlxuXHRcdFx0b3BNYXAobG9jYWxEZWNsYXJlLm9wVHlwZSwgdHlwZSA9PlxuXHRcdFx0XHRuZXcgRXhwcmVzc2lvblN0YXRlbWVudChtc0NoZWNrQ29udGFpbnMoXG5cdFx0XHRcdFx0dDAodHlwZSksXG5cdFx0XHRcdFx0YWNjZXNzTG9jYWxEZWNsYXJlKGxvY2FsRGVjbGFyZSksXG5cdFx0XHRcdFx0bmV3IExpdGVyYWwobG9jYWxEZWNsYXJlLm5hbWUpKSkpKSxcblxuXHR0aHJvd0Vycm9yRnJvbVN0cmluZyA9IG1zZyA9PlxuXHRcdG5ldyBUaHJvd1N0YXRlbWVudChuZXcgTmV3RXhwcmVzc2lvbihfSWRFcnJvciwgWyBuZXcgTGl0ZXJhbChtc2cpIF0pKVxuXG5jb25zdFxuXHRkZWNsYXJlVG9JZCA9IG5ldyBXZWFrTWFwKClcbiJdLCJzb3VyY2VSb290IjoiL3NyYyJ9