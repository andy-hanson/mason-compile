if (typeof define !== 'function') var define = require('amdefine')(module);define(['exports', 'module', './util'], function (exports, module, _util) {
	'use strict';

	class CompileOptions {
		constructor(opts) {
			// TODO:ES6 Optional arguments
			if (opts === undefined) opts = {};
			(0, _util.type)(opts, Object);

			const defaultTo = (name, _default) => {
				const _ = opts[name];
				if (_ === undefined) return _default;else {
					(0, _util.type)(_, _default.constructor);
					return _;
				}
			};

			const define = (name, _default) => {
				this[`_${ name }`] = defaultTo(name, _default);
			};

			const defaults = {
				includeAmdefine: true,
				includeSourceMap: true,
				includeModuleName: true,
				forceNonLazyModule: false,
				useStrict: true,
				checks: true,
				'warn-as-error': false
			};

			for (const _ in defaults) define(_, defaults[_]);

			this._inFile = opts.inFile;

			if (this._inFile === undefined) {
				if (this._includeSourceMap) throw new Error('Either supply `inFile` option or make `includeSourceMap` false.');
				if (this._includeModuleName) throw new Error('Either supply `inFile` option or make `includeModuleName` false.');
			} else (0, _util.type)(this._inFile, String);
		}

		moduleName() {
			return this._inFile === undefined ? 'anonymous' : noExt(basename(this._inFile));
		}

		jsBaseName() {
			return `${ this.moduleName() }.js`;
		}
		modulePath() {
			return this._inFile;
		}

		includeChecks() {
			return this._checks;
		}

		warnAsError() {
			return this['_warn-as-error'];
		}

		includeAmdefine() {
			return this._includeAmdefine;
		}
		includeSourceMap() {
			return this._includeSourceMap;
		}
		includeModuleName() {
			return this._includeModuleName;
		}
		includeUseStrict() {
			return this._useStrict;
		}

		lazyModule() {
			return !this._forceNonLazyModule;
		}
	}

	module.exports = CompileOptions;

	const basename = path => (0, _util.last)(path.split('/')),
	      extname = path => (0, _util.last)(path.split('.')),
	      noExt = path =>
	// - 1 for the '.'
	path.substring(0, path.length - 1 - extname(path).length);
});
//# sourceMappingURL=data:application/json;base64,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QUFDLG1CQUFtQixDQUFBO0dBQUU7RUFDakQ7O2tCQTdEb0IsY0FBYzs7QUErRG5DLE9BQ0MsUUFBUSxHQUFHLElBQUksSUFDZCxVQW5FTyxJQUFJLEVBbUVOLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7T0FDdEIsT0FBTyxHQUFHLElBQUksSUFDYixVQXJFTyxJQUFJLEVBcUVOLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7T0FDdEIsS0FBSyxHQUFHLElBQUk7O0FBRVgsS0FBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFBIiwiZmlsZSI6InByaXZhdGUvQ29tcGlsZU9wdGlvbnMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBsYXN0LCB0eXBlIH0gZnJvbSAnLi91dGlsJ1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb21waWxlT3B0aW9ucyB7XG5cdGNvbnN0cnVjdG9yKG9wdHMpIHtcblx0XHQvLyBUT0RPOkVTNiBPcHRpb25hbCBhcmd1bWVudHNcblx0XHRpZiAob3B0cyA9PT0gdW5kZWZpbmVkKSBvcHRzID0geyB9XG5cdFx0dHlwZShvcHRzLCBPYmplY3QpXG5cblx0XHRjb25zdCBkZWZhdWx0VG8gPSAobmFtZSwgX2RlZmF1bHQpID0+IHtcblx0XHRcdGNvbnN0IF8gPSBvcHRzW25hbWVdXG5cdFx0XHRpZiAoXyA9PT0gdW5kZWZpbmVkKVxuXHRcdFx0XHRyZXR1cm4gX2RlZmF1bHRcblx0XHRcdGVsc2Uge1xuXHRcdFx0XHR0eXBlKF8sIF9kZWZhdWx0LmNvbnN0cnVjdG9yKVxuXHRcdFx0XHRyZXR1cm4gX1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGNvbnN0IGRlZmluZSA9IChuYW1lLCBfZGVmYXVsdCkgPT4ge1xuXHRcdFx0dGhpc1tgXyR7bmFtZX1gXSA9IGRlZmF1bHRUbyhuYW1lLCBfZGVmYXVsdClcblx0XHR9XG5cblx0XHRjb25zdCBkZWZhdWx0cyA9IHtcblx0XHRcdGluY2x1ZGVBbWRlZmluZTogdHJ1ZSxcblx0XHRcdGluY2x1ZGVTb3VyY2VNYXA6IHRydWUsXG5cdFx0XHRpbmNsdWRlTW9kdWxlTmFtZTogdHJ1ZSxcblx0XHRcdGZvcmNlTm9uTGF6eU1vZHVsZTogZmFsc2UsXG5cdFx0XHR1c2VTdHJpY3Q6IHRydWUsXG5cdFx0XHRjaGVja3M6IHRydWUsXG5cdFx0XHQnd2Fybi1hcy1lcnJvcic6IGZhbHNlXG5cdFx0fVxuXG5cdFx0Zm9yIChjb25zdCBfIGluIGRlZmF1bHRzKVxuXHRcdFx0ZGVmaW5lKF8sIGRlZmF1bHRzW19dKVxuXG5cdFx0dGhpcy5faW5GaWxlID0gb3B0cy5pbkZpbGVcblxuXHRcdGlmICh0aGlzLl9pbkZpbGUgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0aWYgKHRoaXMuX2luY2x1ZGVTb3VyY2VNYXApXG5cdFx0XHRcdHRocm93IG5ldyBFcnJvcignRWl0aGVyIHN1cHBseSBgaW5GaWxlYCBvcHRpb24gb3IgbWFrZSBgaW5jbHVkZVNvdXJjZU1hcGAgZmFsc2UuJylcblx0XHRcdGlmICh0aGlzLl9pbmNsdWRlTW9kdWxlTmFtZSlcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCdFaXRoZXIgc3VwcGx5IGBpbkZpbGVgIG9wdGlvbiBvciBtYWtlIGBpbmNsdWRlTW9kdWxlTmFtZWAgZmFsc2UuJylcblx0XHR9IGVsc2Vcblx0XHRcdHR5cGUodGhpcy5faW5GaWxlLCBTdHJpbmcpXG5cdH1cblxuXHRtb2R1bGVOYW1lKCkge1xuXHRcdHJldHVybiB0aGlzLl9pbkZpbGUgPT09IHVuZGVmaW5lZCA/ICdhbm9ueW1vdXMnIDogbm9FeHQoYmFzZW5hbWUodGhpcy5faW5GaWxlKSlcblx0fVxuXG5cdGpzQmFzZU5hbWUoKSB7IHJldHVybiBgJHt0aGlzLm1vZHVsZU5hbWUoKX0uanNgIH1cblx0bW9kdWxlUGF0aCgpIHsgcmV0dXJuIHRoaXMuX2luRmlsZSB9XG5cblx0aW5jbHVkZUNoZWNrcygpIHsgcmV0dXJuIHRoaXMuX2NoZWNrcyB9XG5cblx0d2FybkFzRXJyb3IoKSB7IHJldHVybiB0aGlzWydfd2Fybi1hcy1lcnJvciddIH1cblxuXHRpbmNsdWRlQW1kZWZpbmUoKSB7IHJldHVybiB0aGlzLl9pbmNsdWRlQW1kZWZpbmUgfVxuXHRpbmNsdWRlU291cmNlTWFwKCkgeyByZXR1cm4gdGhpcy5faW5jbHVkZVNvdXJjZU1hcCB9XG5cdGluY2x1ZGVNb2R1bGVOYW1lKCkgeyByZXR1cm4gdGhpcy5faW5jbHVkZU1vZHVsZU5hbWUgfVxuXHRpbmNsdWRlVXNlU3RyaWN0KCkgeyByZXR1cm4gdGhpcy5fdXNlU3RyaWN0IH1cblxuXHRsYXp5TW9kdWxlKCkgeyByZXR1cm4gIXRoaXMuX2ZvcmNlTm9uTGF6eU1vZHVsZSB9XG59XG5cbmNvbnN0XG5cdGJhc2VuYW1lID0gcGF0aCA9PlxuXHRcdGxhc3QocGF0aC5zcGxpdCgnLycpKSxcblx0ZXh0bmFtZSA9IHBhdGggPT5cblx0XHRsYXN0KHBhdGguc3BsaXQoJy4nKSksXG5cdG5vRXh0ID0gcGF0aCA9PlxuXHRcdC8vIC0gMSBmb3IgdGhlICcuJ1xuXHRcdHBhdGguc3Vic3RyaW5nKDAsIHBhdGgubGVuZ3RoIC0gMSAtIGV4dG5hbWUocGF0aCkubGVuZ3RoKVxuIl0sInNvdXJjZVJvb3QiOiIvc3JjIn0=