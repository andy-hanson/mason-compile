if (typeof define !== 'function') var define = require('amdefine')(module);define(['exports'], function (exports) {
	'use strict';

	Object.defineProperty(exports, '__esModule', {
		value: true
	});
	const assert = cond => {
		if (!cond) throw new Error('Assertion failed.');
	},
	      cat = function () {
		// TODO:ES6 Splat
		const parts = Array.prototype.slice.call(arguments);
		const out = [];
		for (const _ of parts) if (_ instanceof Array) out.push(..._);else if (_ !== null) out.push(_);
		return out;
	},
	      eachReverse = (array, action) => {
		for (let i = array.length - 1; i >= 0; i = i - 1) action(array[i]);
	},
	      flatMap = (mapped, mapper) => {
		const out = [];
		for (let i = 0; i < mapped.length; i = i + 1) out.push(...mapper(mapped[i], i));
		return out;
	},
	     

	// flatMap where opMapper returns optionals instead of arrays.
	flatOpMap = (arr, opMapper) => {
		const out = [];
		for (const em of arr) opEach(opMapper(em), _ => out.push(_));
		return out;
	},
	      head = arr => {
		assert(!isEmpty(arr));
		return arr[0];
	},
	      ifElse = (op, ifSome, ifNone) => op === null ? ifNone() : ifSome(op),
	      implementMany = (holder, methodName, nameToImpl) => {
		for (const name in nameToImpl) holder[name].prototype[methodName] = nameToImpl[name];
	},
	      isEmpty = arr => arr.length === 0,
	     

	// -0 is negative
	isPositive = n => n >= 0 && 1 / n !== -Infinity,
	      iteratorToArray = iter => {
		const out = [];
		for (let em of iter) out.push(em);
		return out;
	},
	      last = arr => {
		assert(!isEmpty(arr));
		return arr[arr.length - 1];
	},
	      opEach = (op, mapper) => op === null ? null : mapper(op),
	      opIf = (cond, makeOp) => cond ? makeOp() : null,
	      opMap = opEach,
	      push = (mutArr, em) => {
		mutArr.push(em);
		return mutArr;
	},
	      repeat = (em, n) => {
		assert(n >= 0);
		const out = [];
		for (let i = n; i > 0; i = i - 1) out.push(em);
		return out;
	},
	      rtail = arr => {
		assert(!isEmpty(arr));
		return arr.slice(0, arr.length - 1);
	},
	      tail = arr => {
		assert(!isEmpty(arr));
		return arr.slice(1);
	},
	      type = (instance, itsType) => {
		if (!(Object(instance) instanceof itsType)) throw new Error(`${ instance } is not a ${ itsType.name }`);
	},
	      unshift = (em, mutArr) => {
		mutArr.unshift(em);
		return mutArr;
	};
	exports.assert = assert;
	exports.cat = cat;
	exports.eachReverse = eachReverse;
	exports.flatMap = flatMap;
	exports.flatOpMap = flatOpMap;
	exports.head = head;
	exports.ifElse = ifElse;
	exports.implementMany = implementMany;
	exports.isEmpty = isEmpty;
	exports.isPositive = isPositive;
	exports.iteratorToArray = iteratorToArray;
	exports.last = last;
	exports.opEach = opEach;
	exports.opIf = opIf;
	exports.opMap = opMap;
	exports.push = push;
	exports.repeat = repeat;
	exports.rtail = rtail;
	exports.tail = tail;
	exports.type = type;
	exports.unshift = unshift;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInV0aWwuanMiLCJwcml2YXRlL3V0aWwuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztBQ0FPLE9BQ04sTUFBTSxHQUFHLElBQUksSUFBSTtBQUNoQixNQUFJLENBQUMsSUFBSSxFQUNSLE1BQU0sSUFBSSxLQUFLLENBQUMsbUJBQW1CLENBQUMsQ0FBQTtFQUNyQztPQUVELEdBQUcsR0FBRyxZQUFXOztBQUVoQixRQUFNLEtBQUssR0FBRyxLQUFLLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUE7QUFDbkQsUUFBTSxHQUFHLEdBQUcsRUFBRyxDQUFBO0FBQ2YsT0FBSyxNQUFNLENBQUMsSUFBSSxLQUFLLEVBQ3BCLElBQUksQ0FBQyxZQUFZLEtBQUssRUFDckIsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFBLEtBQ1YsSUFBSSxDQUFDLEtBQUssSUFBSSxFQUNsQixHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFBO0FBQ2IsU0FBTyxHQUFHLENBQUE7RUFDVjtPQUVELFdBQVcsR0FBRyxDQUFDLEtBQUssRUFBRSxNQUFNLEtBQUs7QUFDaEMsT0FBSyxJQUFJLENBQUMsR0FBRyxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUMvQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7RUFDakI7T0FFRCxPQUFPLEdBQUcsQ0FBQyxNQUFNLEVBQUUsTUFBTSxLQUFLO0FBQzdCLFFBQU0sR0FBRyxHQUFHLEVBQUUsQ0FBQTtBQUNkLE9BQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUMzQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsTUFBTSxDQUFD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O0VBQ25DO09BRUQsSUFBSSxHQUFHLEdBQUcsSUFBSTtBQUNiLFFBQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFBO0FBQ3JCLFNBQU8sR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTtFQUNuQjtPQUVELElBQUksR0FBRyxDQUFDLFFBQVEsRUFBRSxPQUFPLEtBQUs7QUFDN0IsTUFBSSxFQUFFLE1BQU0sQ0FBQyxRQUFRLENBQUMsWUFBWSxPQUFPLENBQUEsQUFBQyxFQUN6QyxNQUFNLElBQUksS0FBSyxDQUFDLENBQUMsR0FBRSxRQUFRLEVBQUMsVUFBVSxHQUFFLE9BQU8sQ0FBQyxJQUFJLEVBQUMsQ0FBQyxDQUFDLENBQUE7RUFDeEQ7T0FFRCxPQUFPLEdBQUcsQ0FBQyxFQUFFLEVBQUUsTUFBTSxLQUFLO0FBQ3pCLFFBQU0sQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUE7QUFDbEIsU0FBTyxNQUFNLENBQUE7RUFDYixDQUFBIiwiZmlsZSI6InByaXZhdGUvdXRpbC5qcyIsInNvdXJjZXNDb250ZW50IjpbbnVsbCwiZXhwb3J0IGNvbnN0XG5cdGFzc2VydCA9IGNvbmQgPT4ge1xuXHRcdGlmICghY29uZClcblx0XHRcdHRocm93IG5ldyBFcnJvcignQXNzZXJ0aW9uIGZhaWxlZC4nKVxuXHR9LFxuXG5cdGNhdCA9IGZ1bmN0aW9uKCkge1xuXHRcdC8vIFRPRE86RVM2IFNwbGF0XG5cdFx0Y29uc3QgcGFydHMgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpXG5cdFx0Y29uc3Qgb3V0ID0gWyBdXG5cdFx0Zm9yIChjb25zdCBfIG9mIHBhcnRzKVxuXHRcdFx0aWYgKF8gaW5zdGFuY2VvZiBBcnJheSlcblx0XHRcdFx0b3V0LnB1c2goLi4uXylcblx0XHRcdGVsc2UgaWYgKF8gIT09IG51bGwpXG5cdFx0XHRcdG91dC5wdXNoKF8pXG5cdFx0cmV0dXJuIG91dFxuXHR9LFxuXG5cdGVhY2hSZXZlcnNlID0gKGFycmF5LCBhY3Rpb24pID0+IHtcblx0XHRmb3IgKGxldCBpID0gYXJyYXkubGVuZ3RoIC0gMTsgaSA+PSAwOyBpID0gaSAtIDEpXG5cdFx0XHRhY3Rpb24oYXJyYXlbaV0pXG5cdH0sXG5cblx0ZmxhdE1hcCA9IChtYXBwZWQsIG1hcHBlcikgPT4ge1xuXHRcdGNvbnN0IG91dCA9IFtdXG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBtYXBwZWQubGVuZ3RoOyBpID0gaSArIDEpXG5cdFx0XHRvdXQucHVzaCguLi5tYXBwZXIobWFwcGVkW2ldLCBpKSlcblx0XHRyZXR1cm4gb3V0XG5cdH0sXG5cblx0Ly8gZmxhdE1hcCB3aGVyZSBvcE1hcHBlciByZXR1cm5zIG9wdGlvbmFscyBpbnN0ZWFkIG9mIGFycmF5cy5cblx0ZmxhdE9wTWFwID0gKGFyciwgb3BNYXBwZXIpID0+IHtcblx0XHRjb25zdCBvdXQgPSBbIF1cblx0XHRmb3IgKGNvbnN0IGVtIG9mIGFycilcblx0XHRcdG9wRWFjaChvcE1hcHBlcihlbSksIF8gPT4gb3V0LnB1c2goXykpXG5cdFx0cmV0dXJuIG91dFxuXHR9LFxuXG5cdGhlYWQgPSBhcnIgPT4ge1xuXHRcdGFzc2VydCghaXNFbXB0eShhcnIpKVxuXHRcdHJldHVybiBhcnJbMF1cblx0fSxcblxuXHRpZkVsc2UgPSAob3AsIGlmU29tZSwgaWZOb25lKSA9PlxuXHRcdG9wID09PSBudWxsID8gaWZOb25lKCkgOiBpZlNvbWUob3ApLFxuXG5cdGltcGxlbWVudE1hbnkgPSAoaG9sZGVyLCBtZXRob2ROYW1lLCBuYW1lVG9JbXBsKSA9PiB7XG5cdFx0Zm9yIChjb25zdCBuYW1lIGluIG5hbWVUb0ltcGwpXG5cdFx0XHRob2xkZXJbbmFtZV0ucHJvdG90eXBlW21ldGhvZE5hbWVdID0gbmFtZVRvSW1wbFtuYW1lXVxuXHR9LFxuXG5cdGlzRW1wdHkgPSBhcnIgPT4gYXJyLmxlbmd0aCA9PT0gMCxcblxuXHQvLyAtMCBpcyBuZWdhdGl2ZVxuXHRpc1Bvc2l0aXZlID0gbiA9PiBuID49IDAgJiYgMSAvIG4gIT09IC1JbmZpbml0eSxcblxuXHRpdGVyYXRvclRvQXJyYXkgPSBpdGVyID0+IHtcblx0XHRjb25zdCBvdXQgPSBbXVxuXHRcdGZvciAobGV0IGVtIG9mIGl0ZXIpXG5cdFx0XHRvdXQucHVzaChlbSlcblx0XHRyZXR1cm4gb3V0XG5cdH0sXG5cblx0bGFzdCA9IGFyciA9PiB7XG5cdFx0YXNzZXJ0KCFpc0VtcHR5KGFycikpXG5cdFx0cmV0dXJuIGFyclthcnIubGVuZ3RoIC0gMV1cblx0fSxcblxuXHRvcEVhY2ggPSAob3AsIG1hcHBlcikgPT5cblx0XHRvcCA9PT0gbnVsbCA/IG51bGwgOiBtYXBwZXIob3ApLFxuXG5cdG9wSWYgPSAoY29uZCwgbWFrZU9wKSA9PlxuXHRcdGNvbmQgPyBtYWtlT3AoKSA6IG51bGwsXG5cblx0b3BNYXAgPSBvcEVhY2gsXG5cblx0cHVzaCA9IChtdXRBcnIsIGVtKSA9PiB7XG5cdFx0bXV0QXJyLnB1c2goZW0pXG5cdFx0cmV0dXJuIG11dEFyclxuXHR9LFxuXG5cdHJlcGVhdCA9IChlbSwgbikgPT4ge1xuXHRcdGFzc2VydChuID49IDApXG5cdFx0Y29uc3Qgb3V0ID0gW11cblx0XHRmb3IgKGxldCBpID0gbjsgaSA+IDA7IGkgPSBpIC0gMSlcblx0XHRcdG91dC5wdXNoKGVtKVxuXHRcdHJldHVybiBvdXRcblx0fSxcblxuXHRydGFpbCA9IGFyciA9PiB7XG5cdFx0YXNzZXJ0KCFpc0VtcHR5KGFycikpXG5cdFx0cmV0dXJuIGFyci5zbGljZSgwLCBhcnIubGVuZ3RoIC0gMSlcblx0fSxcblxuXHR0YWlsID0gYXJyID0+IHtcblx0XHRhc3NlcnQoIWlzRW1wdHkoYXJyKSlcblx0XHRyZXR1cm4gYXJyLnNsaWNlKDEpXG5cdH0sXG5cblx0dHlwZSA9IChpbnN0YW5jZSwgaXRzVHlwZSkgPT4ge1xuXHRcdGlmICghKE9iamVjdChpbnN0YW5jZSkgaW5zdGFuY2VvZiBpdHNUeXBlKSlcblx0XHRcdHRocm93IG5ldyBFcnJvcihgJHtpbnN0YW5jZX0gaXMgbm90IGEgJHtpdHNUeXBlLm5hbWV9YClcblx0fSxcblxuXHR1bnNoaWZ0ID0gKGVtLCBtdXRBcnIpID0+IHtcblx0XHRtdXRBcnIudW5zaGlmdChlbSlcblx0XHRyZXR1cm4gbXV0QXJyXG5cdH1cbiJdLCJzb3VyY2VSb290IjoiL3NyYyJ9