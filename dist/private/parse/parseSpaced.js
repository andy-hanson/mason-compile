if (typeof define !== 'function') var define = require('amdefine')(module);define(['exports', 'module', '../../CompileError', '../MsAst', '../Token', '../util', './context', './parse*', './parseQuote', './parseSingle', './Slice'], function (exports, module, _CompileError, _MsAst, _Token, _util, _context, _parse, _parseQuote, _parseSingle, _Slice) {
	'use strict';

	module.exports = parseSpaced;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _parseQuote2 = _interopRequireDefault(_parseQuote);

	var _parseSingle2 = _interopRequireDefault(_parseSingle);

	var _Slice2 = _interopRequireDefault(_Slice);

	function parseSpaced(tokens) {
		const h = tokens.head(),
		      rest = tokens.tail();
		if ((0, _Token.isKeyword)(_Token.KW_Type, h)) return _MsAst.Call.contains(h.loc, parseSpaced(rest), _MsAst.LocalAccess.focus(h.loc));else if ((0, _Token.isKeyword)(_Token.KW_Lazy, h)) return new _MsAst.Lazy(h.loc, parseSpaced(rest));else if ((0, _Token.isKeyword)(_Token.KW_SuperVal, h)) {
			// TODO: handle sub here as well
			const h2 = rest.head();
			if (h2 instanceof _Token.DotName) {
				_context.context.check(h2.nDots === 1, h2.loc, 'Too many dots!');
				const x = new _MsAst.SuperMember(h2.loc, h2.name);
				return parseSpacedFold(x, rest.tail());
			} else if ((0, _Token.isGroup)(_Token.G_Parenthesis, h2) && _Slice2.default.group(h2).isEmpty()) {
				const x = new _MsAst.SuperCall(h2.loc, []);
				return parseSpacedFold(x, rest.tail());
			} else _context.context.fail(`Expected ${ (0, _CompileError.code)('.') } or ${ (0, _CompileError.code)('()') } after ${ (0, _CompileError.code)('super') }`);
		} else return parseSpacedFold((0, _parseSingle2.default)(h), rest);
	}

	const parseSpacedFold = (start, rest) => {
		let acc = start;
		for (let i = rest.start; i < rest.end; i = i + 1) {
			const token = rest.tokens[i];
			const loc = token.loc;
			if (token instanceof _Token.DotName) {
				_context.context.check(token.nDots === 1, token.loc, 'Too many dots!');
				acc = new _MsAst.Member(token.loc, acc, token.name);
				continue;
			}
			if (token instanceof _Token.Keyword) switch (token.kind) {
				case _Token.KW_Focus:
					acc = new _MsAst.Call(token.loc, acc, [_MsAst.LocalAccess.focus(loc)]);
					continue;
				case _Token.KW_Type:
					{
						const type = parseSpaced(rest._chopStart(i + 1));
						return _MsAst.Call.contains(token.loc, type, acc);
					}
				default:
			}
			if (token instanceof _Token.Group) {
				const slice = _Slice2.default.group(token);
				switch (token.kind) {
					case _Token.G_Bracket:
						acc = _MsAst.Call.sub(loc, (0, _util.cat)(acc, (0, _parse.parseExprParts)(slice)));
						continue;
					case _Token.G_Parenthesis:
						(0, _context.checkEmpty)(slice, () => `Use ${ (0, _CompileError.code)('(a b)') }, not ${ (0, _CompileError.code)('a(b)') }`);
						acc = new _MsAst.Call(loc, acc, []);
						continue;
					case _Token.G_Quote:
						acc = new _MsAst.QuoteTemplate(loc, acc, (0, _parseQuote2.default)(slice));
						continue;
					default:
				}
			}
			_context.context.fail(token.loc, `Expected member or sub, not ${ token }`);
		}
		return acc;
	};
});
//# sourceMappingURL=data:application/json;base64,
