if (typeof define !== 'function') var define = require('amdefine')(module);define(['exports', './util'], function (exports, _util) {
	'use strict';

	Object.defineProperty(exports, '__esModule', {
		value: true
	});

	class VerifyResults {
		constructor() {
			// LocalAccess -> LocalDeclare.
			// Needed because lazy accesses must be compiled differently.
			this.localAccessToDeclare = new Map();
			// LocalDeclare -> VrLocalInfo.
			// Debug locals will not be output if not in debug mode.
			this.localDeclareToInfo = new Map();
			// TODO:ES6 Can use do `export { a, b, ... }` at the end, so shouldn't need this.
			// Includes both Assigns and AssignDestructures.
			this.exportAssigns = new Set();
			// Maps Class/Fun to name if one is appropriate.
			// Maps *every* SV_Name to the nearest name.
			this.names = new Map();
			// String -> Set.
			// For each path, the names of each builtin used.
			// Like the inverse of context.opts.builtinNameToPath,
			// but only includes names actually used.
			this.builtinPathToNames = new Map();
			// Values are either MethodImpl or the string 'constructor'
			this.superCallToMethod = new Map();
		}

		isDebugLocal(localDeclare) {
			return this.localDeclareToInfo.get(localDeclare).isInDebug;
		}

		isAccessed(localDeclare) {
			const info = this.localDeclareToInfo.get(localDeclare);
			return !((0, _util.isEmpty)(info.debugAccesses) && (0, _util.isEmpty)(info.nonDebugAccesses));
		}

		isExportAssign(assign) {
			return this.exportAssigns.has(assign);
		}

		localDeclareForAccess(localAccess) {
			return this.localAccessToDeclare.get(localAccess);
		}

		name(expr) {
			return this.names.get(expr);
		}

		opName(expr) {
			const x = this.names.get(expr);
			return x === undefined ? null : x;
		}
	}

	exports.default = VerifyResults;

	class LocalInfo {
		static empty(isInDebug) {
			return new LocalInfo(isInDebug, [], []);
		}

		constructor(isInDebug, /* Boolean */
		debugAccesses, /* LocalAccess */
		nonDebugAccesses /* Array[LocalAccess] */) {
			this.isInDebug = isInDebug;
			this.debugAccesses = debugAccesses;
			this.nonDebugAccesses = nonDebugAccesses;
		}
	}

	exports.LocalInfo = LocalInfo;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlZlcmlmeVJlc3VsdHMuanMiLCJwcml2YXRlL1ZlcmlmeVJlc3VsdHMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7QUNFZSxPQUFNLGFBQWEsQ0FBQztBQUNsQyxhQUFXLEdBQUc7OztBQUdiLE9BQUksQ0FBQyxvQkFBb0IsR0FBRyxJQUFJLEdBQUcsRUFBRSxDQUFBOzs7QUFHckMsT0FBSSxDQUFDLGtCQUFrQixHQUFHLElBQUksR0FBRyxFQUFFLENBQUE7OztBQUduQyxPQUFJLENBQUMsYUFBYSxHQUFHLElBQUksR0FBRyxFQUFFLENBQUE7OztBQUc5QixPQUFJLENBQUMsS0FBSyxHQUFHLElBQUksR0FBRyxFQUFFLENBQUE7Ozs7O0FBS3RCLE9BQUksQ0FBQyxrQkFBa0IsR0FBRyxJQUFJLEdBQUcsRUFBRSxDQUFBOztBQUVuQyxPQUFJLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxHQUFHLEVBQUUsQ0FBQTtHQUNsQzs7QUFFRCxjQUFZLENBQUMsWUFBWSxFQUFFO0FBQzFCLFVBQU8sSUFBSSxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQyxTQUFTLENBQUE7R0FDMUQ7O0FBRUQsWUFBVSxDQUFDLFlBQVksRUFBRTtBQUN4QixTQUFNLElBQUksR0FBRyxJQUFJLENBQUMsa0JBQWtCLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFBO0FBQ3RELFVBQU8sRUFBRSxVQS9CRixPQUFPLEVBK0JHLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxVQS9CakMsT0FBTyxFQStCa0MsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUEsQUFBQyxDQUFBO0dBQ3ZFOztBQUVELGdCQUFjLENBQUMsTUFBTSxFQUFFO0FBQ3RCLFVBQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUE7R0FDckM7O0FBRUQsdUJBQXFCLENBQUMsV0FBVyxFQUFFO0FBQ2xDLFVBQU8sSUFBSSxDQUFDLG9CQUFvQixDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQTtHQUNqRDs7QUFFRCxNQUFJLENBQUMsSUFBSSxFQUFFO0FBQ1YsVUFBTyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQTtHQUMzQjs7QUFFRCxRQUFNLENBQUMsSUFBSSxFQUFFO0FBQ1osU0FBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUE7QUFDOUIsVUFBTyxDQUFDLEtBQUssU0FBUyxHQUFHLElBQUksR0FBRyxDQUFDLENBQUE7R0FDakM7RUFDRDs7bUJBaERvQixhQUFhOztBQWtEM0IsT0FBTSxTQUFTLENBQUM7QUFDdEIsU0FBTyxLQUFLLENBQUMsU0FBUyxFQUFFO0FBQ3ZCLFVBQU8sSUFBSSxTQUFTLENBQUMsU0FBUyxFQUFFLEVBQUcsRUFBRSxFQUFHLENBQUMsQ0FBQTtHQUN6Qzs7QUFFRCxhQUFXLENBQ1YsU0FBUztBQUNULGVBQWE7QUFDYixrQkFBZ0IsMkJBQTJCO0FBQzNDLE9BQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFBO0FBQzFCLE9BQUksQ0FBQyxhQUFhLEdBQUcsYUFBYSxDQUFBO0FBQ2xDLE9BQUksQ0FBQyxnQkFBZ0IsR0FBRyxnQkFBZ0IsQ0FBQTtHQUN4QztFQUNEIiwiZmlsZSI6InByaXZhdGUvVmVyaWZ5UmVzdWx0cy5qcyIsInNvdXJjZXNDb250ZW50IjpbbnVsbCwiaW1wb3J0IHsgaXNFbXB0eSB9IGZyb20gJy4vdXRpbCdcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVmVyaWZ5UmVzdWx0cyB7XG5cdGNvbnN0cnVjdG9yKCkge1xuXHRcdC8vIExvY2FsQWNjZXNzIC0+IExvY2FsRGVjbGFyZS5cblx0XHQvLyBOZWVkZWQgYmVjYXVzZSBsYXp5IGFjY2Vzc2VzIG11c3QgYmUgY29tcGlsZWQgZGlmZmVyZW50bHkuXG5cdFx0dGhpcy5sb2NhbEFjY2Vzc1RvRGVjbGFyZSA9IG5ldyBNYXAoKVxuXHRcdC8vIExvY2FsRGVjbGFyZSAtPiBWckxvY2FsSW5mby5cblx0XHQvLyBEZWJ1ZyBsb2NhbHMgd2lsbCBub3QgYmUgb3V0cHV0IGlmIG5vdCBpbiBkZWJ1ZyBtb2RlLlxuXHRcdHRoaXMubG9jYWxEZWNsYXJlVG9JbmZvID0gbmV3IE1hcCgpXG5cdFx0Ly8gVE9ETzpFUzYgQ2FuIHVzZSBkbyBgZXhwb3J0IHsgYSwgYiwgLi4uIH1gIGF0IHRoZSBlbmQsIHNvIHNob3VsZG4ndCBuZWVkIHRoaXMuXG5cdFx0Ly8gSW5jbHVkZXMgYm90aCBBc3NpZ25zIGFuZCBBc3NpZ25EZXN0cnVjdHVyZXMuXG5cdFx0dGhpcy5leHBvcnRBc3NpZ25zID0gbmV3IFNldCgpXG5cdFx0Ly8gTWFwcyBDbGFzcy9GdW4gdG8gbmFtZSBpZiBvbmUgaXMgYXBwcm9wcmlhdGUuXG5cdFx0Ly8gTWFwcyAqZXZlcnkqIFNWX05hbWUgdG8gdGhlIG5lYXJlc3QgbmFtZS5cblx0XHR0aGlzLm5hbWVzID0gbmV3IE1hcCgpXG5cdFx0Ly8gU3RyaW5nIC0+IFNldC5cblx0XHQvLyBGb3IgZWFjaCBwYXRoLCB0aGUgbmFtZXMgb2YgZWFjaCBidWlsdGluIHVzZWQuXG5cdFx0Ly8gTGlrZSB0aGUgaW52ZXJzZSBvZiBjb250ZXh0Lm9wdHMuYnVpbHRpbk5hbWVUb1BhdGgsXG5cdFx0Ly8gYnV0IG9ubHkgaW5jbHVkZXMgbmFtZXMgYWN0dWFsbHkgdXNlZC5cblx0XHR0aGlzLmJ1aWx0aW5QYXRoVG9OYW1lcyA9IG5ldyBNYXAoKVxuXHRcdC8vIFZhbHVlcyBhcmUgZWl0aGVyIE1ldGhvZEltcGwgb3IgdGhlIHN0cmluZyAnY29uc3RydWN0b3InXG5cdFx0dGhpcy5zdXBlckNhbGxUb01ldGhvZCA9IG5ldyBNYXAoKVxuXHR9XG5cblx0aXNEZWJ1Z0xvY2FsKGxvY2FsRGVjbGFyZSkge1xuXHRcdHJldHVybiB0aGlzLmxvY2FsRGVjbGFyZVRvSW5mby5nZXQobG9jYWxEZWNsYXJlKS5pc0luRGVidWdcblx0fVxuXG5cdGlzQWNjZXNzZWQobG9jYWxEZWNsYXJlKSB7XG5cdFx0Y29uc3QgaW5mbyA9IHRoaXMubG9jYWxEZWNsYXJlVG9JbmZvLmdldChsb2NhbERlY2xhcmUpXG5cdFx0cmV0dXJuICEoaXNFbXB0eShpbmZvLmRlYnVnQWNjZXNzZXMpICYmIGlzRW1wdHkoaW5mby5ub25EZWJ1Z0FjY2Vzc2VzKSlcblx0fVxuXG5cdGlzRXhwb3J0QXNzaWduKGFzc2lnbikge1xuXHRcdHJldHVybiB0aGlzLmV4cG9ydEFzc2lnbnMuaGFzKGFzc2lnbilcblx0fVxuXG5cdGxvY2FsRGVjbGFyZUZvckFjY2Vzcyhsb2NhbEFjY2Vzcykge1xuXHRcdHJldHVybiB0aGlzLmxvY2FsQWNjZXNzVG9EZWNsYXJlLmdldChsb2NhbEFjY2Vzcylcblx0fVxuXG5cdG5hbWUoZXhwcikge1xuXHRcdHJldHVybiB0aGlzLm5hbWVzLmdldChleHByKVxuXHR9XG5cblx0b3BOYW1lKGV4cHIpIHtcblx0XHRjb25zdCB4ID0gdGhpcy5uYW1lcy5nZXQoZXhwcilcblx0XHRyZXR1cm4geCA9PT0gdW5kZWZpbmVkID8gbnVsbCA6IHhcblx0fVxufVxuXG5leHBvcnQgY2xhc3MgTG9jYWxJbmZvIHtcblx0c3RhdGljIGVtcHR5KGlzSW5EZWJ1Zykge1xuXHRcdHJldHVybiBuZXcgTG9jYWxJbmZvKGlzSW5EZWJ1ZywgWyBdLCBbIF0pXG5cdH1cblxuXHRjb25zdHJ1Y3Rvcihcblx0XHRpc0luRGVidWcgLyogQm9vbGVhbiAqLyxcblx0XHRkZWJ1Z0FjY2Vzc2VzIC8qIExvY2FsQWNjZXNzICovLFxuXHRcdG5vbkRlYnVnQWNjZXNzZXMgLyogQXJyYXlbTG9jYWxBY2Nlc3NdICovKSB7XG5cdFx0dGhpcy5pc0luRGVidWcgPSBpc0luRGVidWdcblx0XHR0aGlzLmRlYnVnQWNjZXNzZXMgPSBkZWJ1Z0FjY2Vzc2VzXG5cdFx0dGhpcy5ub25EZWJ1Z0FjY2Vzc2VzID0gbm9uRGVidWdBY2Nlc3Nlc1xuXHR9XG59XG4iXSwic291cmNlUm9vdCI6Ii9zcmMifQ==