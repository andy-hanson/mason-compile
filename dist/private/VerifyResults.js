if (typeof define !== 'function') var define = require('amdefine')(module);define(['exports', './util'], function (exports, _util) {
	'use strict';

	Object.defineProperty(exports, '__esModule', {
		value: true
	});

	class VerifyResults {
		constructor() {
			// LocalAccess -> LocalDeclare.
			// Needed because lazy accesses must be compiled differently.
			this.localAccessToDeclare = new Map();
			// LocalDeclare -> VrLocalInfo.
			// Debug locals will not be output if not in debug mode.
			this.localDeclareToInfo = new Map();
			// Maps Class/Fun to name if one is appropriate.
			// Maps *every* SV_Name to the nearest name.
			this.names = new Map();
			// String -> Set.
			// For each path, the names of each builtin used.
			// Like the inverse of context.opts.builtinNameToPath,
			// but only includes names actually used.
			this.builtinPathToNames = new Map();
			// Values are either MethodImpl or the string 'constructor'
			this.superCallToMethod = new Map();
			// Links a constructor to its super! call.
			this.constructorToSuper = new Map();
		}

		isDebugLocal(localDeclare) {
			return this.localDeclareToInfo.get(localDeclare).isInDebug;
		}

		isAccessed(localDeclare) {
			const info = this.localDeclareToInfo.get(localDeclare);
			return !((0, _util.isEmpty)(info.debugAccesses) && (0, _util.isEmpty)(info.nonDebugAccesses));
		}

		localDeclareForAccess(localAccess) {
			return this.localAccessToDeclare.get(localAccess);
		}

		name(expr) {
			return this.names.get(expr);
		}

		opName(expr) {
			const x = this.names.get(expr);
			return x === undefined ? null : x;
		}
	}

	exports.default = VerifyResults;

	class LocalInfo {
		static empty(isInDebug) {
			return new LocalInfo(isInDebug, [], []);
		}

		constructor(isInDebug, /* Boolean */
		debugAccesses, /* LocalAccess */
		nonDebugAccesses /* Array[LocalAccess] */) {
			this.isInDebug = isInDebug;
			this.debugAccesses = debugAccesses;
			this.nonDebugAccesses = nonDebugAccesses;
		}
	}

	exports.LocalInfo = LocalInfo;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlZlcmlmeVJlc3VsdHMuanMiLCJwcml2YXRlL1ZlcmlmeVJlc3VsdHMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7QUNFZSxPQUFNLGFBQWEsQ0FBQztBQUNsQyxhQUFXLEdBQUc7OztBQUdiLE9BQUksQ0FBQyxvQkFBb0IsR0FBRyxJQUFJLEdBQUcsRUFBRSxDQUFBOzs7QUFHckMsT0FBSSxDQUFDLGtCQUFrQixHQUFHLElBQUksR0FBRyxFQUFFLENBQUE7OztBQUduQyxPQUFJLENBQUMsS0FBSyxHQUFHLElBQUksR0FBRyxFQUFFLENBQUE7Ozs7O0FBS3RCLE9BQUksQ0FBQyxrQkFBa0IsR0FBRyxJQUFJLEdBQUcsRUFBRSxDQUFBOztBQUVuQyxPQUFJLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxHQUFHLEVBQUUsQ0FBQTs7QUFFbEMsT0FBSSxDQUFDLGtCQUFrQixHQUFHLElBQUksR0FBRyxFQUFFLENBQUE7R0FDbkM7O0FBRUQsY0FBWSxDQUFDLFlBQVksRUFBRTtBQUMxQixVQUFPLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLENBQUMsU0FBUyxDQUFBO0dBQzFEOztBQUVELFlBQVUsQ0FBQyxZQUFZLEVBQUU7QUFDeEIsU0FBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQTtBQUN0RCxVQUFPLEVBQUUsVUE5QkgsT0FBTyxFQThCSSxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksVUE5QmxDLE9BQU8sRUE4Qm1DLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFBLEFBQUMsQ0FBQTtHQUN2RTs7QUFFRCx1QkFBcUIsQ0FBQyxXQUFXLEVBQUU7QUFDbEMsVUFBTyxJQUFJLENBQUMsb0JBQW9CLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFBO0dBQ2pEOztBQUVELE1BQUksQ0FBQyxJQUFJLEVBQUU7QUFDVixVQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFBO0dBQzNCOztBQUVELFFBQU0sQ0FBQyxJQUFJLEVBQUU7QUFDWixTQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUM5QixVQUFPLENBQUMsS0FBSyxTQUFTLEdBQUcsSUFBSSxHQUFHLENBQUMsQ0FBQTtHQUNqQztFQUNEOzttQkEzQ29CLGFBQWE7O0FBNkMzQixPQUFNLFNBQVMsQ0FBQztBQUN0QixTQUFPLEtBQUssQ0FBQyxTQUFTLEVBQUU7QUFDdkIsVUFBTyxJQUFJLFNBQVMsQ0FBQyxTQUFTLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFBO0dBQ3ZDOztBQUVELGFBQVcsQ0FDVixTQUFTO0FBQ1QsZUFBYTtBQUNiLGtCQUFnQiwyQkFBMkI7QUFDM0MsT0FBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUE7QUFDMUIsT0FBSSxDQUFDLGFBQWEsR0FBRyxhQUFhLENBQUE7QUFDbEMsT0FBSSxDQUFDLGdCQUFnQixHQUFHLGdCQUFnQixDQUFBO0dBQ3hDO0VBQ0QiLCJmaWxlIjoicHJpdmF0ZS9WZXJpZnlSZXN1bHRzLmpzIiwic291cmNlc0NvbnRlbnQiOltudWxsLCJpbXBvcnQge2lzRW1wdHl9IGZyb20gJy4vdXRpbCdcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVmVyaWZ5UmVzdWx0cyB7XG5cdGNvbnN0cnVjdG9yKCkge1xuXHRcdC8vIExvY2FsQWNjZXNzIC0+IExvY2FsRGVjbGFyZS5cblx0XHQvLyBOZWVkZWQgYmVjYXVzZSBsYXp5IGFjY2Vzc2VzIG11c3QgYmUgY29tcGlsZWQgZGlmZmVyZW50bHkuXG5cdFx0dGhpcy5sb2NhbEFjY2Vzc1RvRGVjbGFyZSA9IG5ldyBNYXAoKVxuXHRcdC8vIExvY2FsRGVjbGFyZSAtPiBWckxvY2FsSW5mby5cblx0XHQvLyBEZWJ1ZyBsb2NhbHMgd2lsbCBub3QgYmUgb3V0cHV0IGlmIG5vdCBpbiBkZWJ1ZyBtb2RlLlxuXHRcdHRoaXMubG9jYWxEZWNsYXJlVG9JbmZvID0gbmV3IE1hcCgpXG5cdFx0Ly8gTWFwcyBDbGFzcy9GdW4gdG8gbmFtZSBpZiBvbmUgaXMgYXBwcm9wcmlhdGUuXG5cdFx0Ly8gTWFwcyAqZXZlcnkqIFNWX05hbWUgdG8gdGhlIG5lYXJlc3QgbmFtZS5cblx0XHR0aGlzLm5hbWVzID0gbmV3IE1hcCgpXG5cdFx0Ly8gU3RyaW5nIC0+IFNldC5cblx0XHQvLyBGb3IgZWFjaCBwYXRoLCB0aGUgbmFtZXMgb2YgZWFjaCBidWlsdGluIHVzZWQuXG5cdFx0Ly8gTGlrZSB0aGUgaW52ZXJzZSBvZiBjb250ZXh0Lm9wdHMuYnVpbHRpbk5hbWVUb1BhdGgsXG5cdFx0Ly8gYnV0IG9ubHkgaW5jbHVkZXMgbmFtZXMgYWN0dWFsbHkgdXNlZC5cblx0XHR0aGlzLmJ1aWx0aW5QYXRoVG9OYW1lcyA9IG5ldyBNYXAoKVxuXHRcdC8vIFZhbHVlcyBhcmUgZWl0aGVyIE1ldGhvZEltcGwgb3IgdGhlIHN0cmluZyAnY29uc3RydWN0b3InXG5cdFx0dGhpcy5zdXBlckNhbGxUb01ldGhvZCA9IG5ldyBNYXAoKVxuXHRcdC8vIExpbmtzIGEgY29uc3RydWN0b3IgdG8gaXRzIHN1cGVyISBjYWxsLlxuXHRcdHRoaXMuY29uc3RydWN0b3JUb1N1cGVyID0gbmV3IE1hcCgpXG5cdH1cblxuXHRpc0RlYnVnTG9jYWwobG9jYWxEZWNsYXJlKSB7XG5cdFx0cmV0dXJuIHRoaXMubG9jYWxEZWNsYXJlVG9JbmZvLmdldChsb2NhbERlY2xhcmUpLmlzSW5EZWJ1Z1xuXHR9XG5cblx0aXNBY2Nlc3NlZChsb2NhbERlY2xhcmUpIHtcblx0XHRjb25zdCBpbmZvID0gdGhpcy5sb2NhbERlY2xhcmVUb0luZm8uZ2V0KGxvY2FsRGVjbGFyZSlcblx0XHRyZXR1cm4gIShpc0VtcHR5KGluZm8uZGVidWdBY2Nlc3NlcykgJiYgaXNFbXB0eShpbmZvLm5vbkRlYnVnQWNjZXNzZXMpKVxuXHR9XG5cblx0bG9jYWxEZWNsYXJlRm9yQWNjZXNzKGxvY2FsQWNjZXNzKSB7XG5cdFx0cmV0dXJuIHRoaXMubG9jYWxBY2Nlc3NUb0RlY2xhcmUuZ2V0KGxvY2FsQWNjZXNzKVxuXHR9XG5cblx0bmFtZShleHByKSB7XG5cdFx0cmV0dXJuIHRoaXMubmFtZXMuZ2V0KGV4cHIpXG5cdH1cblxuXHRvcE5hbWUoZXhwcikge1xuXHRcdGNvbnN0IHggPSB0aGlzLm5hbWVzLmdldChleHByKVxuXHRcdHJldHVybiB4ID09PSB1bmRlZmluZWQgPyBudWxsIDogeFxuXHR9XG59XG5cbmV4cG9ydCBjbGFzcyBMb2NhbEluZm8ge1xuXHRzdGF0aWMgZW1wdHkoaXNJbkRlYnVnKSB7XG5cdFx0cmV0dXJuIG5ldyBMb2NhbEluZm8oaXNJbkRlYnVnLCBbXSwgW10pXG5cdH1cblxuXHRjb25zdHJ1Y3Rvcihcblx0XHRpc0luRGVidWcgLyogQm9vbGVhbiAqLyxcblx0XHRkZWJ1Z0FjY2Vzc2VzIC8qIExvY2FsQWNjZXNzICovLFxuXHRcdG5vbkRlYnVnQWNjZXNzZXMgLyogQXJyYXlbTG9jYWxBY2Nlc3NdICovKSB7XG5cdFx0dGhpcy5pc0luRGVidWcgPSBpc0luRGVidWdcblx0XHR0aGlzLmRlYnVnQWNjZXNzZXMgPSBkZWJ1Z0FjY2Vzc2VzXG5cdFx0dGhpcy5ub25EZWJ1Z0FjY2Vzc2VzID0gbm9uRGVidWdBY2Nlc3Nlc1xuXHR9XG59XG4iXSwic291cmNlUm9vdCI6Ii9zcmMifQ==
