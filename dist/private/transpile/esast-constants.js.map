{"version":3,"sources":["private/transpile/esast-constants.js","private/transpile/esast-constants.ts"],"names":[],"mappings":"AAAA,CAAC,UAAU,OAAO,EAAE;AAChB,QAAI,OAAO,MAAM,KAAK,QAAQ,IAAI,OAAO,MAAM,CAAC,OAAO,KAAK,QAAQ,EAAE;AAClE,YAAI,CAAC,GAAG,OAAO,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC,AAAC,IAAI,CAAC,KAAK,SAAS,EAAE,MAAM,CAAC,OAAO,GAAG,CAAC,CAAC;KAC9E,MACI,IAAI,OAAO,MAAM,KAAK,UAAU,IAAI,MAAM,CAAC,GAAG,EAAE;AACjD,cAAM,CAAC,CAAC,SAAS,EAAE,SAAS,EAAE,uBAAuB,EAAE,sBAAsB,EAAE,sBAAsB,EAAE,4BAA4B,EAAE,qBAAqB,EAAE,4BAA4B,CAAC,EAAE,OAAO,CAAC,CAAC;KACvM;CACJ,CAAA,CAAE,UAAU,OAAO,EAAE,OAAO,EAAE;AAC3B,gBAAY,CAAC;;ACRjB,QAAA,aAAA,GAAA,OAAA,CAAyD,uBACzD,CAAC,CAD+E;AAChF,QAAA,YAAA,GAAA,OAAA,CAAgI,sBAChI,CAAC,CADqJ;AACtJ,QAAA,YAAA,GAAA,OAAA,CAAuB,sBACvB,CAAC,CAD4C;AAC7C,QAAA,kBAAA,GAAA,OAAA,CAA6B,4BAC7B,CAAC,CADwD;AACzD,QAAA,WAAA,GAAA,OAAA,CAAmD,qBACnD,CAAC,CADuE;AACxE,QAAA,MAAA,GAAA,OAAA,CAAqB,4BAErB,CAAC,CAFgD;AAGhD,WAAA,CAAA,WAAW,GAAG,IAAI,YAAA,CAAA,OAAU,CAAC,OAAO,CAAC,EACrC,OAAA,CAAA,OAAO,GAAG,IAAI,YAAA,CAAA,OAAU,CAAC,OAAO,CAAC,EACjC,OAAA,CAAA,OAAO,GAAG,IAAI,YAAA,CAAA,OAAU,CAAC,OAAO,CAAC,EACjC,OAAA,CAAA,SAAS,GAAG,IAAI,YAAA,CAAA,OAAU,CAAC,SAAS,CAAC,EACrC,OAAA,CAAA,OAAO,GAAG,IAAI,YAAA,CAAA,OAAU,CAAC,GAAG,CAAC,EAC7B,OAAA,CAAA,aAAa,GAAG,IAAI,YAAA,CAAA,OAAU,CAAC,OAAO,CAAC,EACvC,OAAA,CAAA,OAAO,GAAG,IAAI,YAAA,CAAA,OAAU,CAAC,OAAO,CAAC,EACjC,OAAA,CAAA,OAAO,GAAG,IAAI,YAAA,CAAA,WAAW,EAAE,EAC3B,OAAA,CAAA,YAAY,GAAG,IAAI,YAAA,CAAA,eAAe,CAAC,MAAM,EAAE,IAAI,YAAA,CAAA,aAAa,CAAC,CAAC,CAAC,CAAC,EAChE,OAAA,CAAA,WAAW,GAAG,IAAI,WAAA,CAAA,eAAe,CAAC,OAAA,CAAA,OAAO,CAAC,EAC1C,OAAA,CAAA,IAAI,GAAG,IAAI,YAAA,CAAA,cAAc,EAAE,EAE3B,OAAA,CAAA,eAAe,GAAG,IAAI,aAAA,CAAA,sBAAsB,CAC3C,CAAC,IAAI,aAAA,CAAA,kBAAkB,CAAC,OAAA,CAAA,OAAO,EAAE,IAAI,YAAA,CAAA,eAAe,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAC5D,OAAA,CAAA,eAAe,GAAG,IAAI,aAAA,CAAA,sBAAsB,CAAC,CAC5C,IAAI,aAAA,CAAA,kBAAkB,CAAC,OAAA,CAAA,OAAO,EAC7B,IAAI,YAAA,CAAA,aAAa,CAAC,MAAA,CAAA,MAAM,CAAC,IAAI,YAAA,CAAA,OAAU,CAAC,QAAQ,CAAC,EAAE,KAAK,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,EACnE,OAAA,CAAA,eAAe,GAAG,IAAI,aAAA,CAAA,sBAAsB,CAAC,CAC5C,IAAI,aAAA,CAAA,kBAAkB,CAAC,OAAA,CAAA,OAAO,EAAE,IAAI,kBAAA,CAAA,OAAgB,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAE5D,OAAA,CAAA,kBAAkB,GAAG,IAAI,aAAA,CAAA,sBAAsB,CAC9C,CAAC,IAAI,aAAA,CAAA,kBAAkB,CAAC,OAAA,CAAA,aAAa,EAAE,OAAA,CAAA,IAAI,CAAC,CAAC,CAAC,EAC/C,OAAA,CAAA,cAAc,GAAG,IAAI,aAAA,CAAA,sBAAsB,CAAC,CAAC,IAAI,aAAA,CAAA,kBAAkB,CAAC,OAAA,CAAA,aAAa,CAAC,CAAC,CAAC,EACpF,OAAA,CAAA,cAAc,GAAG,IAAI,WAAA,CAAA,mBAAmB,CAAC,IAAI,YAAA,CAAA,oBAAoB,CAAC,GAAG,EAAE,OAAA,CAAA,aAAa,EAAE,OAAA,CAAA,IAAI,CAAC,CAAC,CAAA;CDb5F,CAAC,CAAC","file":"private/transpile/esast-constants.js","sourcesContent":["(function (factory) {\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === 'function' && define.amd) {\n        define([\"require\", \"exports\", 'esast/lib/Declaration', 'esast/lib/Expression', 'esast/lib/Identifier', 'esast/lib/ObjectExpression', 'esast/lib/Statement', 'esast-create-util/lib/util'], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    var Declaration_1 = require('esast/lib/Declaration');\n    var Expression_1 = require('esast/lib/Expression');\n    var Identifier_1 = require('esast/lib/Identifier');\n    var ObjectExpression_1 = require('esast/lib/ObjectExpression');\n    var Statement_1 = require('esast/lib/Statement');\n    var util_1 = require('esast-create-util/lib/util');\n    exports.GlobalError = new Identifier_1.default('Error'), exports.IdBuilt = new Identifier_1.default('built'), exports.IdError = new Identifier_1.default('Error'), exports.IdExports = new Identifier_1.default('exports'), exports.IdFocus = new Identifier_1.default('_'), exports.IdLexicalThis = new Identifier_1.default('_this'), exports.IdSuper = new Identifier_1.default('super'), exports.LitNull = new Expression_1.LiteralNull(), exports.LitUndefined = new Expression_1.UnaryExpression('void', new Expression_1.LiteralNumber(0)), exports.ReturnFocus = new Statement_1.ReturnStatement(exports.IdFocus), exports.This = new Expression_1.ThisExpression(), exports.DeclareBuiltBag = new Declaration_1.VariableDeclarationLet([new Declaration_1.VariableDeclarator(exports.IdBuilt, new Expression_1.ArrayExpression([]))]), exports.DeclareBuiltMap = new Declaration_1.VariableDeclarationLet([\n        new Declaration_1.VariableDeclarator(exports.IdBuilt, new Expression_1.NewExpression(util_1.member(new Identifier_1.default('global'), 'Map'), []))]), exports.DeclareBuiltObj = new Declaration_1.VariableDeclarationLet([\n        new Declaration_1.VariableDeclarator(exports.IdBuilt, new ObjectExpression_1.default([]))]), exports.DeclareLexicalThis = new Declaration_1.VariableDeclarationLet([new Declaration_1.VariableDeclarator(exports.IdLexicalThis, exports.This)]), exports.LetLexicalThis = new Declaration_1.VariableDeclarationLet([new Declaration_1.VariableDeclarator(exports.IdLexicalThis)]), exports.SetLexicalThis = new Statement_1.ExpressionStatement(new Expression_1.AssignmentExpression('=', exports.IdLexicalThis, exports.This));\n});\n","import {VariableDeclarationLet, VariableDeclarator} from 'esast/lib/Declaration'\nimport {ArrayExpression, AssignmentExpression, LiteralNull, LiteralNumber, NewExpression, ThisExpression, UnaryExpression} from 'esast/lib/Expression'\nimport Identifier from 'esast/lib/Identifier'\nimport ObjectExpression from 'esast/lib/ObjectExpression'\nimport {ExpressionStatement, ReturnStatement} from 'esast/lib/Statement'\nimport {member} from 'esast-create-util/lib/util'\n\nexport const\n\tGlobalError = new Identifier('Error'),\n\tIdBuilt = new Identifier('built'),\n\tIdError = new Identifier('Error'),\n\tIdExports = new Identifier('exports'),\n\tIdFocus = new Identifier('_'),\n\tIdLexicalThis = new Identifier('_this'),\n\tIdSuper = new Identifier('super'),\n\tLitNull = new LiteralNull(),\n\tLitUndefined = new UnaryExpression('void', new LiteralNumber(0)),\n\tReturnFocus = new ReturnStatement(IdFocus),\n\tThis = new ThisExpression(),\n\n\tDeclareBuiltBag = new VariableDeclarationLet(\n\t\t[new VariableDeclarator(IdBuilt, new ArrayExpression([]))]),\n\tDeclareBuiltMap = new VariableDeclarationLet([\n\t\tnew VariableDeclarator(IdBuilt,\n\t\t\tnew NewExpression(member(new Identifier('global'), 'Map'), []))]),\n\tDeclareBuiltObj = new VariableDeclarationLet([\n\t\tnew VariableDeclarator(IdBuilt, new ObjectExpression([]))]),\n\n\tDeclareLexicalThis = new VariableDeclarationLet(\n\t\t[new VariableDeclarator(IdLexicalThis, This)]),\n\tLetLexicalThis = new VariableDeclarationLet([new VariableDeclarator(IdLexicalThis)]),\n\tSetLexicalThis = new ExpressionStatement(new AssignmentExpression('=', IdLexicalThis, This))\n"],"sourceRoot":"/source/"}