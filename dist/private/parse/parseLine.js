if (typeof define !== 'function') var define = require('amdefine')(module);define(['exports', '../MsAst', '../Token', '../util', './context', './parseBlock', './parseCase', './parseExcept', './parseFor', './parseLine', './parseLocalDeclares', './parseMemberName', './parseQuote', './parse*', './Slice'], function (exports, _MsAst, _Token, _util, _context, _parseBlock, _parseCase, _parseExcept, _parseFor, _parseLine, _parseLocalDeclares, _parseMemberName, _parseQuote, _parse, _Slice) {
	'use strict';

	Object.defineProperty(exports, '__esModule', {
		value: true
	});

	var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _parseCase2 = _interopRequireDefault(_parseCase);

	var _parseExcept2 = _interopRequireDefault(_parseExcept);

	var _parseLine2 = _interopRequireDefault(_parseLine);

	var _parseLocalDeclares2 = _interopRequireDefault(_parseLocalDeclares);

	var _parseMemberName2 = _interopRequireDefault(_parseMemberName);

	var _parseQuote2 = _interopRequireDefault(_parseQuote);

	var _Slice2 = _interopRequireDefault(_Slice);

	exports.default = tokens => {
		const head = tokens.head();
		const rest = tokens.tail();

		const noRest = () => (0, _context.checkEmpty)(rest, () => `Did not expect anything after ${ head }.`);

		// We only deal with mutable expressions here, otherwise we fall back to parseExpr.
		if (head instanceof _Token.Keyword) switch (head.kind) {
			case _Token.KW_Assert:case _Token.KW_AssertNot:
				return parseAssert(head.kind === _Token.KW_AssertNot, rest);
			case _Token.KW_ExceptDo:
				return (0, _parseExcept2.default)(_Token.KW_ExceptDo, rest);
			case _Token.KW_Break:
				noRest();
				return new _MsAst.Break(tokens.loc);
			case _Token.KW_BreakWithVal:
				return new _MsAst.BreakWithVal(tokens.loc, (0, _parse.parseExpr)(rest));
			case _Token.KW_CaseDo:
				return (0, _parseCase2.default)(false, false, rest);
			case _Token.KW_Debugger:
				noRest();
				return new _MsAst.SpecialDo(tokens.loc, _MsAst.SD_Debugger);
			case _Token.KW_Ellipsis:
				return new _MsAst.BagEntryMany(tokens.loc, (0, _parse.parseExpr)(rest));
			case _Token.KW_ForDo:
				return (0, _parseFor.parseForDo)(rest);
			case _Token.KW_Ignore:
				return parseIgnore(rest);
			case _Token.KW_IfDo:case _Token.KW_UnlessDo:
				{
					var _beforeAndBlock = (0, _parseBlock.beforeAndBlock)(rest);

					var _beforeAndBlock2 = _slicedToArray(_beforeAndBlock, 2);

					const before = _beforeAndBlock2[0];
					const block = _beforeAndBlock2[1];

					return new _MsAst.ConditionalDo(tokens.loc, (0, _parse.parseExpr)(before), (0, _parseBlock.parseBlockDo)(block), head.kind === _Token.KW_UnlessDo);
				}
			case _Token.KW_ObjAssign:
				return new _MsAst.BagEntry(tokens.loc, (0, _parse.parseExpr)(rest));
			case _Token.KW_Pass:
				noRest();
				return [];
			case _Token.KW_Region:
				return (0, _parseBlock.parseLinesFromBlock)(tokens);
			case _Token.KW_SuperDo:
				return new _MsAst.SuperCallDo(tokens.loc, (0, _parse.parseExprParts)(rest));
			case _Token.KW_SwitchDo:
				return (0, _parse.parseSwitch)(false, false, rest);
			case _Token.KW_Throw:
				return new _MsAst.Throw(tokens.loc, (0, _util.opIf)(!rest.isEmpty(), () => (0, _parse.parseExpr)(rest)));
			case _Token.KW_Name:
				if ((0, _Token.isKeyword)(_Token.KW_ObjAssign, rest.head())) {
					const r = rest.tail();
					const val = r.isEmpty() ? new _MsAst.SpecialVal(tokens.loc, _MsAst.SV_Name) : (0, _parse.parseExpr)(r);
					return _MsAst.ObjEntryComputed.name(tokens.loc, val);
				}
			// else fall through
			default:
			// fall through
		}

		return (0, _util.ifElse)(tokens.opSplitOnceWhere(isLineSplitKeyword), _ref => {
			let before = _ref.before;
			let at = _ref.at;
			let after = _ref.after;
			return parseAssignLike(before, at, after, tokens.loc);
		}, () => (0, _parse.parseExpr)(tokens));
	};

	const parseLineOrLines = tokens => {
		const _ = (0, _parseLine2.default)(tokens);
		return _ instanceof Array ? _ : [_];
	};

	exports.parseLineOrLines = parseLineOrLines;
	const isLineSplitKeyword = token => {
		if (token instanceof _Token.Keyword) switch (token.kind) {
			case _Token.KW_Assign:case _Token.KW_AssignMutable:case _Token.KW_LocalMutate:
			case _Token.KW_MapEntry:case _Token.KW_ObjAssign:case _Token.KW_Yield:case _Token.KW_YieldTo:
				return true;
			default:
				return false;
		} else return false;
	},
	      parseAssignLike = (before, at, after, loc) => {
		const kind = at.kind;
		if (kind === _Token.KW_MapEntry) return new _MsAst.MapEntry(loc, (0, _parse.parseExpr)(before), (0, _parse.parseExpr)(after));

		if (before.size() === 1) {
			const token = before.head();
			// `a.b = c`, `.b = c`, `a."b" = c`, `."b" = c`, `a[b] = c`
			if ((0, _Token.isGroup)(_Token.G_Space, token)) {
				const spaced = _Slice2.default.group(token);

				var _ifElse = (0, _util.ifElse)(spaced.opSplitOnceWhere(_ => (0, _Token.isKeyword)(_Token.KW_Type, _)), _ref2 => {
					let before = _ref2.before;
					let after = _ref2.after;
					return [before, (0, _parse.parseExpr)(after)];
				}, () => [spaced, null]);

				var _ifElse2 = _slicedToArray(_ifElse, 2);

				const value = _ifElse2[0];
				const opType = _ifElse2[1];

				const last = value.last();
				const object = obj => obj.isEmpty() ? _MsAst.LocalAccess.this(obj.loc) : (0, _parse.parseSpaced)(obj);

				if ((0, _Token.isKeyword)(_Token.KW_Dot, value.nextToLast())) {
					const name = (0, _parseMemberName2.default)(last);
					const set = object(value.rtail().rtail());
					const kind = memberSetKind(at);
					return new _MsAst.MemberSet(loc, set, name, opType, kind, (0, _parse.parseExpr)(after));
				} else if ((0, _Token.isGroup)(_Token.G_Bracket, last)) {
					const set = object(value.rtail());
					return parseSubSet(set, _Slice2.default.group(last), opType, at, after, loc);
				}
				// `"1". 1`
			} else if ((0, _Token.isGroup)(_Token.G_Quote, token) && kind === _Token.KW_ObjAssign) return new _MsAst.ObjEntryComputed(loc, (0, _parseQuote2.default)(_Slice2.default.group(token)), (0, _parse.parseExpr)(after));
		}

		return kind === _Token.KW_LocalMutate ? parseLocalMutate(before, after, loc) : parseAssign(before, kind, after, loc);
	},
	      memberSetKind = at => {
		switch (at.kind) {
			case _Token.KW_Assign:
				return _MsAst.SET_Init;
			case _Token.KW_AssignMutable:
				return _MsAst.SET_InitMutable;
			case _Token.KW_LocalMutate:
				return _MsAst.SET_Mutate;
			default:
				(0, _context.unexpected)(at);
		}
	},
	      parseSubSet = (object, subbed, opType, at, after, loc) => {
		const subbeds = (0, _parse.parseExprParts)(subbed);
		return new _MsAst.SetSub(loc, object, subbeds, opType, memberSetKind(at), (0, _parse.parseExpr)(after));
	},
	      parseLocalMutate = (localsTokens, valueTokens, loc) => {
		const locals = (0, _parseLocalDeclares.parseLocalDeclaresJustNames)(localsTokens);
		_context.context.check(locals.length === 1, loc, 'TODO: LocalDestructureMutate');
		const name = locals[0].name;
		const value = (0, _parse.parseExpr)(valueTokens);
		return new _MsAst.LocalMutate(loc, name, value);
	},
	      parseAssign = (localsTokens, kind, valueTokens, loc) => {
		const locals = (0, _parseLocalDeclares2.default)(localsTokens);
		const value = parseAssignValue(kind, valueTokens);

		const isYield = kind === _Token.KW_Yield || kind === _Token.KW_YieldTo;
		if ((0, _util.isEmpty)(locals)) {
			_context.context.check(isYield, localsTokens.loc, 'Assignment to nothing');
			return value;
		} else {
			if (isYield) for (const _ of locals) _context.context.check(!_.isLazy(), _.loc, 'Can not yield to lazy variable.');

			const isObjAssign = kind === _Token.KW_ObjAssign;

			if (kind === _Token.KW_AssignMutable) for (let _ of locals) {
				_context.context.check(!_.isLazy(), _.loc, 'Lazy local can not be mutable.');
				_.kind = _MsAst.LD_Mutable;
			}

			const wrap = _ => isObjAssign ? new _MsAst.ObjEntryAssign(loc, _) : _;

			if (locals.length === 1) {
				const assignee = locals[0];
				const assign = new _MsAst.AssignSingle(loc, assignee, value);
				return wrap(assign);
			} else {
				const kind = locals[0].kind;
				for (const _ of locals) _context.context.check(_.kind === kind, _.loc, 'All locals of destructuring assignment must be of the same kind.');
				return wrap(new _MsAst.AssignDestructure(loc, locals, value, kind));
			}
		}
	},
	      parseAssignValue = (kind, valueTokens) => {
		const value = (0, _parse.parseExpr)(valueTokens);
		switch (kind) {
			case _Token.KW_Yield:
				return new _MsAst.Yield(value.loc, value);
			case _Token.KW_YieldTo:
				return new _MsAst.YieldTo(value.loc, value);
			default:
				return value;
		}
	},
	      parseAssert = (negate, tokens) => {
		(0, _context.checkNonEmpty)(tokens, () => `Expected something after ${ (0, _Token.keywordName)(_Token.KW_Assert) }.`);

		var _ifElse3 = (0, _util.ifElse)(tokens.opSplitOnceWhere(_ => (0, _Token.isKeyword)(_Token.KW_Throw, _)), _ref3 => {
			let before = _ref3.before;
			let after = _ref3.after;
			return [before, (0, _parse.parseExpr)(after)];
		}, () => [tokens, null]);

		var _ifElse32 = _slicedToArray(_ifElse3, 2);

		const condTokens = _ifElse32[0];
		const opThrown = _ifElse32[1];

		const parts = (0, _parse.parseExprParts)(condTokens);
		const cond = parts.length === 1 ? parts[0] : new _MsAst.Call(condTokens.loc, parts[0], (0, _util.tail)(parts));
		return new _MsAst.Assert(tokens.loc, negate, cond, opThrown);
	},
	      parseIgnore = tokens => {
		const ignored = tokens.map(_ => {
			if ((0, _Token.isKeyword)(_Token.KW_Focus, _)) return '_';else {
				_context.context.check(_ instanceof _Token.Name, _.loc, () => `Expected local name, not ${ _ }.`);
				return _.name;
			}
		});
		return new _MsAst.Ignore(tokens.loc, ignored);
	};
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBhcnNlTGluZS5qcyIsInByaXZhdGUvcGFyc2UvcGFyc2VMaW5lLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O21CQ3NCZSxNQUFNLElBQUk7QUFDeEIsUUFBTSxJQUFJLEdBQUcsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFBO0FBQzFCLFFBQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQTs7QUFFMUIsUUFBTSxNQUFNLEdBQUcsTUFDZCxhQWpCTSxVQUFVLEVBaUJMLElBQUksRUFBRSxNQUFNLENBQUMsOEJBQThCLEdBQUUsSUFBSSxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7OztBQUdqRSxNQUFJLElBQUksbUJBMUJnRCxPQUFPLEFBMEJwQyxFQUMxQixRQUFRLElBQUksQ0FBQyxJQUFJO0FBQ2hCLGVBNUI0RSxTQUFTLENBNEJ0RSxBQUFDLFlBM0JsQixZQUFZO0FBNEJULFdBQU8sV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLFlBNUIvQixZQUFZLEFBNEJvQyxFQUFFLElBQUksQ0FBQyxDQUFBO0FBQUEsQUFDckQsZUE1Qm1CLFdBQVc7QUE2QjdCLFdBQU8sa0NBN0JXLFdBQVcsRUE2QkcsSUFBSSxDQUFDLENBQUE7QUFBQSxBQUN0QyxlQS9CeUMsUUFBUTtBQWdDaEQsVUFBTSxFQUFFLENBQUE7QUFDUixXQUFPLFdBdEM4RCxLQUFLLENBc0N6RCxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUE7QUFBQSxBQUM3QixlQWxDbUQsZUFBZTtBQW1DakUsV0FBTyxXQXhDcUUsWUFBWSxDQXdDaEUsTUFBTSxDQUFDLEdBQUcsRUFBRSxXQXJCaEMsU0FBUyxFQXFCaUMsSUFBSSxDQUFDLENBQUMsQ0FBQTtBQUFBLEFBQ3JELGVBcENvRSxTQUFTO0FBcUM1RSxXQUFPLHlCQUFVLEtBQUssRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUE7QUFBQSxBQUNyQyxlQXRDK0UsV0FBVztBQXVD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RUFDdEMsQ0FBQSIsImZpbGUiOiJwcml2YXRlL3BhcnNlL3BhcnNlTGluZS5qcyIsInNvdXJjZXNDb250ZW50IjpbbnVsbCwiaW1wb3J0IHtBc3NlcnQsIEFzc2lnblNpbmdsZSwgQXNzaWduRGVzdHJ1Y3R1cmUsIEJhZ0VudHJ5LCBCYWdFbnRyeU1hbnksIEJyZWFrLCBCcmVha1dpdGhWYWwsIENhbGwsXG5cdENvbmRpdGlvbmFsRG8sIElnbm9yZSwgTERfTXV0YWJsZSwgTG9jYWxBY2Nlc3MsIExvY2FsTXV0YXRlLCBNYXBFbnRyeSwgTWVtYmVyU2V0LFxuXHRPYmpFbnRyeUFzc2lnbiwgT2JqRW50cnlDb21wdXRlZCwgU0RfRGVidWdnZXIsIFNFVF9Jbml0LCBTRVRfSW5pdE11dGFibGUsIFNFVF9NdXRhdGUsIFNldFN1Yixcblx0U3BlY2lhbERvLCBTcGVjaWFsVmFsLCBTdXBlckNhbGxEbywgU1ZfTmFtZSwgVGhyb3csIFlpZWxkLCBZaWVsZFRvfSBmcm9tICcuLi9Nc0FzdCdcbmltcG9ydCB7R19CcmFja2V0LCBHX1F1b3RlLCBHX1NwYWNlLCBpc0dyb3VwLCBpc0tleXdvcmQsIEtleXdvcmQsIGtleXdvcmROYW1lLCBLV19Bc3NlcnQsXG5cdEtXX0Fzc2VydE5vdCwgS1dfQXNzaWduLCBLV19Bc3NpZ25NdXRhYmxlLCBLV19CcmVhaywgS1dfQnJlYWtXaXRoVmFsLCBLV19DYXNlRG8sIEtXX0RlYnVnZ2VyLFxuXHRLV19Eb3QsIEtXX0VsbGlwc2lzLCBLV19FeGNlcHREbywgS1dfRm9jdXMsIEtXX0ZvckRvLCBLV19JZkRvLCBLV19JZ25vcmUsIEtXX0xvY2FsTXV0YXRlLFxuXHRLV19NYXBFbnRyeSwgS1dfTmFtZSwgS1dfT2JqQXNzaWduLCBLV19QYXNzLCBLV19SZWdpb24sIEtXX1N1cGVyRG8sIEtXX1N3aXRjaERvLCBLV19UaHJvdyxcblx0S1dfVHlwZSwgS1dfVW5sZXNzRG8sIEtXX1lpZWxkLCBLV19ZaWVsZFRvLCBOYW1lfSBmcm9tICcuLi9Ub2tlbidcbmltcG9ydCB7aWZFbHNlLCBpc0VtcHR5LCBvcElmLCB0YWlsfSBmcm9tICcuLi91dGlsJ1xuaW1wb3J0IHtjaGVja0VtcHR5LCBjaGVja05vbkVtcHR5LCBjb250ZXh0LCB1bmV4cGVjdGVkfSBmcm9tICcuL2NvbnRleHQnXG5pbXBvcnQge2JlZm9yZUFuZEJsb2NrLCBwYXJzZUJsb2NrRG8sIHBhcnNlTGluZXNGcm9tQmxvY2t9IGZyb20gJy4vcGFyc2VCbG9jaydcbmltcG9ydCBwYXJzZUNhc2UgZnJvbSAnLi9wYXJzZUNhc2UnXG5pbXBvcnQgcGFyc2VFeGNlcHQgZnJvbSAnLi9wYXJzZUV4Y2VwdCdcbmltcG9ydCB7cGFyc2VGb3JEb30gZnJvbSAnLi9wYXJzZUZvcidcbmltcG9ydCBwYXJzZUxpbmUgZnJvbSAnLi9wYXJzZUxpbmUnXG5pbXBvcnQgcGFyc2VMb2NhbERlY2xhcmVzLCB7cGFyc2VMb2NhbERlY2xhcmVzSnVzdE5hbWVzfSBmcm9tICcuL3BhcnNlTG9jYWxEZWNsYXJlcydcbmltcG9ydCBwYXJzZU1lbWJlck5hbWUgZnJvbSAnLi9wYXJzZU1lbWJlck5hbWUnXG5pbXBvcnQgcGFyc2VRdW90ZSBmcm9tICcuL3BhcnNlUXVvdGUnXG5pbXBvcnQge3BhcnNlRXhwciwgcGFyc2VFeHByUGFydHMsIHBhcnNlU3BhY2VkLCBwYXJzZVN3aXRjaH0gZnJvbSAnLi9wYXJzZSonXG5pbXBvcnQgU2xpY2UgZnJvbSAnLi9TbGljZSdcblxuZXhwb3J0IGRlZmF1bHQgdG9rZW5zID0+IHtcblx0Y29uc3QgaGVhZCA9IHRva2Vucy5oZWFkKClcblx0Y29uc3QgcmVzdCA9IHRva2Vucy50YWlsKClcblxuXHRjb25zdCBub1Jlc3QgPSAoKSA9PlxuXHRcdGNoZWNrRW1wdHkocmVzdCwgKCkgPT4gYERpZCBub3QgZXhwZWN0IGFueXRoaW5nIGFmdGVyICR7aGVhZH0uYClcblxuXHQvLyBXZSBvbmx5IGRlYWwgd2l0aCBtdXRhYmxlIGV4cHJlc3Npb25zIGhlcmUsIG90aGVyd2lzZSB3ZSBmYWxsIGJhY2sgdG8gcGFyc2VFeHByLlxuXHRpZiAoaGVhZCBpbnN0YW5jZW9mIEtleXdvcmQpXG5cdFx0c3dpdGNoIChoZWFkLmtpbmQpIHtcblx0XHRcdGNhc2UgS1dfQXNzZXJ0OiBjYXNlIEtXX0Fzc2VydE5vdDpcblx0XHRcdFx0cmV0dXJuIHBhcnNlQXNzZXJ0KGhlYWQua2luZCA9PT0gS1dfQXNzZXJ0Tm90LCByZXN0KVxuXHRcdFx0Y2FzZSBLV19FeGNlcHREbzpcblx0XHRcdFx0cmV0dXJuIHBhcnNlRXhjZXB0KEtXX0V4Y2VwdERvLCByZXN0KVxuXHRcdFx0Y2FzZSBLV19CcmVhazpcblx0XHRcdFx0bm9SZXN0KClcblx0XHRcdFx0cmV0dXJuIG5ldyBCcmVhayh0b2tlbnMubG9jKVxuXHRcdFx0Y2FzZSBLV19CcmVha1dpdGhWYWw6XG5cdFx0XHRcdHJldHVybiBuZXcgQnJlYWtXaXRoVmFsKHRva2Vucy5sb2MsIHBhcnNlRXhwcihyZXN0KSlcblx0XHRcdGNhc2UgS1dfQ2FzZURvOlxuXHRcdFx0XHRyZXR1cm4gcGFyc2VDYXNlKGZhbHNlLCBmYWxzZSwgcmVzdClcblx0XHRcdGNhc2UgS1dfRGVidWdnZXI6XG5cdFx0XHRcdG5vUmVzdCgpXG5cdFx0XHRcdHJldHVybiBuZXcgU3BlY2lhbERvKHRva2Vucy5sb2MsIFNEX0RlYnVnZ2VyKVxuXHRcdFx0Y2FzZSBLV19FbGxpcHNpczpcblx0XHRcdFx0cmV0dXJuIG5ldyBCYWdFbnRyeU1hbnkodG9rZW5zLmxvYywgcGFyc2VFeHByKHJlc3QpKVxuXHRcdFx0Y2FzZSBLV19Gb3JEbzpcblx0XHRcdFx0cmV0dXJuIHBhcnNlRm9yRG8ocmVzdClcblx0XHRcdGNhc2UgS1dfSWdub3JlOlxuXHRcdFx0XHRyZXR1cm4gcGFyc2VJZ25vcmUocmVzdClcblx0XHRcdGNhc2UgS1dfSWZEbzogY2FzZSBLV19Vbmxlc3NEbzoge1xuXHRcdFx0XHRjb25zdCBbYmVmb3JlLCBibG9ja10gPSBiZWZvcmVBbmRCbG9jayhyZXN0KVxuXHRcdFx0XHRyZXR1cm4gbmV3IENvbmRpdGlvbmFsRG8odG9rZW5zLmxvYyxcblx0XHRcdFx0XHRwYXJzZUV4cHIoYmVmb3JlKSxcblx0XHRcdFx0XHRwYXJzZUJsb2NrRG8oYmxvY2spLFxuXHRcdFx0XHRcdGhlYWQua2luZCA9PT0gS1dfVW5sZXNzRG8pXG5cdFx0XHR9XG5cdFx0XHRjYXNlIEtXX09iakFzc2lnbjpcblx0XHRcdFx0cmV0dXJuIG5ldyBCYWdFbnRyeSh0b2tlbnMubG9jLCBwYXJzZUV4cHIocmVzdCkpXG5cdFx0XHRjYXNlIEtXX1Bhc3M6XG5cdFx0XHRcdG5vUmVzdCgpXG5cdFx0XHRcdHJldHVybiBbXVxuXHRcdFx0Y2FzZSBLV19SZWdpb246XG5cdFx0XHRcdHJldHVybiBwYXJzZUxpbmVzRnJvbUJsb2NrKHRva2Vucylcblx0XHRcdGNhc2UgS1dfU3VwZXJEbzpcblx0XHRcdFx0cmV0dXJuIG5ldyBTdXBlckNhbGxEbyh0b2tlbnMubG9jLCBwYXJzZUV4cHJQYXJ0cyhyZXN0KSlcblx0XHRcdGNhc2UgS1dfU3dpdGNoRG86XG5cdFx0XHRcdHJldHVybiBwYXJzZVN3aXRjaChmYWxzZSwgZmFsc2UsIHJlc3QpXG5cdFx0XHRjYXNlIEtXX1Rocm93OlxuXHRcdFx0XHRyZXR1cm4gbmV3IFRocm93KHRva2Vucy5sb2MsIG9wSWYoIXJlc3QuaXNFbXB0eSgpLCAoKSA9PiBwYXJzZUV4cHIocmVzdCkpKVxuXHRcdFx0Y2FzZSBLV19OYW1lOlxuXHRcdFx0XHRpZiAoaXNLZXl3b3JkKEtXX09iakFzc2lnbiwgcmVzdC5oZWFkKCkpKSB7XG5cdFx0XHRcdFx0Y29uc3QgciA9IHJlc3QudGFpbCgpXG5cdFx0XHRcdFx0Y29uc3QgdmFsID0gci5pc0VtcHR5KCkgPyBuZXcgU3BlY2lhbFZhbCh0b2tlbnMubG9jLCBTVl9OYW1lKSA6IHBhcnNlRXhwcihyKVxuXHRcdFx0XHRcdHJldHVybiBPYmpFbnRyeUNvbXB1dGVkLm5hbWUodG9rZW5zLmxvYywgdmFsKVxuXHRcdFx0XHR9XG5cdFx0XHRcdC8vIGVsc2UgZmFsbCB0aHJvdWdoXG5cdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHQvLyBmYWxsIHRocm91Z2hcblx0XHR9XG5cblx0cmV0dXJuIGlmRWxzZSh0b2tlbnMub3BTcGxpdE9uY2VXaGVyZShpc0xpbmVTcGxpdEtleXdvcmQpLFxuXHRcdCh7YmVmb3JlLCBhdCwgYWZ0ZXJ9KSA9PiBwYXJzZUFzc2lnbkxpa2UoYmVmb3JlLCBhdCwgYWZ0ZXIsIHRva2Vucy5sb2MpLFxuXHRcdCgpID0+IHBhcnNlRXhwcih0b2tlbnMpKVxufVxuXG5leHBvcnQgY29uc3QgcGFyc2VMaW5lT3JMaW5lcyA9IHRva2VucyA9PiB7XG5cdGNvbnN0IF8gPSBwYXJzZUxpbmUodG9rZW5zKVxuXHRyZXR1cm4gXyBpbnN0YW5jZW9mIEFycmF5ID8gXyA6IFtfXVxufVxuXG5jb25zdFxuXHRpc0xpbmVTcGxpdEtleXdvcmQgPSB0b2tlbiA9PiB7XG5cdFx0aWYgKHRva2VuIGluc3RhbmNlb2YgS2V5d29yZClcblx0XHRcdHN3aXRjaCAodG9rZW4ua2luZCkge1xuXHRcdFx0XHRjYXNlIEtXX0Fzc2lnbjogY2FzZSBLV19Bc3NpZ25NdXRhYmxlOiBjYXNlIEtXX0xvY2FsTXV0YXRlOlxuXHRcdFx0XHRjYXNlIEtXX01hcEVudHJ5OiBjYXNlIEtXX09iakFzc2lnbjogY2FzZSBLV19ZaWVsZDogY2FzZSBLV19ZaWVsZFRvOlxuXHRcdFx0XHRcdHJldHVybiB0cnVlXG5cdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlXG5cdFx0XHR9XG5cdFx0ZWxzZVxuXHRcdFx0cmV0dXJuIGZhbHNlXG5cdH0sXG5cblx0cGFyc2VBc3NpZ25MaWtlID0gKGJlZm9yZSwgYXQsIGFmdGVyLCBsb2MpID0+IHtcblx0XHRjb25zdCBraW5kID0gYXQua2luZFxuXHRcdGlmIChraW5kID09PSBLV19NYXBFbnRyeSlcblx0XHRcdHJldHVybiBuZXcgTWFwRW50cnkobG9jLCBwYXJzZUV4cHIoYmVmb3JlKSwgcGFyc2VFeHByKGFmdGVyKSlcblxuXHRcdGlmIChiZWZvcmUuc2l6ZSgpID09PSAxKSB7XG5cdFx0XHRjb25zdCB0b2tlbiA9IGJlZm9yZS5oZWFkKClcblx0XHRcdC8vIGBhLmIgPSBjYCwgYC5iID0gY2AsIGBhLlwiYlwiID0gY2AsIGAuXCJiXCIgPSBjYCwgYGFbYl0gPSBjYFxuXHRcdFx0aWYgKGlzR3JvdXAoR19TcGFjZSwgdG9rZW4pKSB7XG5cdFx0XHRcdGNvbnN0IHNwYWNlZCA9IFNsaWNlLmdyb3VwKHRva2VuKVxuXHRcdFx0XHRjb25zdCBbdmFsdWUsIG9wVHlwZV0gPSBpZkVsc2Uoc3BhY2VkLm9wU3BsaXRPbmNlV2hlcmUoXyA9PiBpc0tleXdvcmQoS1dfVHlwZSwgXykpLFxuXHRcdFx0XHRcdCh7YmVmb3JlLCBhZnRlcn0pID0+IFtiZWZvcmUsIHBhcnNlRXhwcihhZnRlcildLFxuXHRcdFx0XHRcdCgpID0+IFtzcGFjZWQsIG51bGxdKVxuXG5cdFx0XHRcdGNvbnN0IGxhc3QgPSB2YWx1ZS5sYXN0KClcblx0XHRcdFx0Y29uc3Qgb2JqZWN0ID0gb2JqID0+XG5cdFx0XHRcdFx0b2JqLmlzRW1wdHkoKSA/IExvY2FsQWNjZXNzLnRoaXMob2JqLmxvYykgOiBwYXJzZVNwYWNlZChvYmopXG5cblx0XHRcdFx0aWYgKGlzS2V5d29yZChLV19Eb3QsIHZhbHVlLm5leHRUb0xhc3QoKSkpIHtcblx0XHRcdFx0XHRjb25zdCBuYW1lID0gcGFyc2VNZW1iZXJOYW1lKGxhc3QpXG5cdFx0XHRcdFx0Y29uc3Qgc2V0ID0gb2JqZWN0KHZhbHVlLnJ0YWlsKCkucnRhaWwoKSlcblx0XHRcdFx0XHRjb25zdCBraW5kID0gbWVtYmVyU2V0S2luZChhdClcblx0XHRcdFx0XHRyZXR1cm4gbmV3IE1lbWJlclNldChsb2MsIHNldCwgbmFtZSwgb3BUeXBlLCBraW5kLCBwYXJzZUV4cHIoYWZ0ZXIpKVxuXHRcdFx0XHR9IGVsc2UgaWYgKGlzR3JvdXAoR19CcmFja2V0LCBsYXN0KSkge1xuXHRcdFx0XHRcdGNvbnN0IHNldCA9IG9iamVjdCh2YWx1ZS5ydGFpbCgpKVxuXHRcdFx0XHRcdHJldHVybiBwYXJzZVN1YlNldChzZXQsIFNsaWNlLmdyb3VwKGxhc3QpLCBvcFR5cGUsIGF0LCBhZnRlciwgbG9jKVxuXHRcdFx0XHR9XG5cdFx0XHQvLyBgXCIxXCIuIDFgXG5cdFx0XHR9IGVsc2UgaWYgKGlzR3JvdXAoR19RdW90ZSwgdG9rZW4pICYmIGtpbmQgPT09IEtXX09iakFzc2lnbilcblx0XHRcdFx0cmV0dXJuIG5ldyBPYmpFbnRyeUNvbXB1dGVkKGxvYywgcGFyc2VRdW90ZShTbGljZS5ncm91cCh0b2tlbikpLCBwYXJzZUV4cHIoYWZ0ZXIpKVxuXHRcdH1cblxuXHRcdHJldHVybiBraW5kID09PSBLV19Mb2NhbE11dGF0ZSA/XG5cdFx0XHRwYXJzZUxvY2FsTXV0YXRlKGJlZm9yZSwgYWZ0ZXIsIGxvYykgOlxuXHRcdFx0cGFyc2VBc3NpZ24oYmVmb3JlLCBraW5kLCBhZnRlciwgbG9jKVxuXHR9LFxuXG5cdG1lbWJlclNldEtpbmQgPSBhdCA9PiB7XG5cdFx0c3dpdGNoIChhdC5raW5kKSB7XG5cdFx0XHRjYXNlIEtXX0Fzc2lnbjpcblx0XHRcdFx0cmV0dXJuIFNFVF9Jbml0XG5cdFx0XHRjYXNlIEtXX0Fzc2lnbk11dGFibGU6XG5cdFx0XHRcdHJldHVybiBTRVRfSW5pdE11dGFibGVcblx0XHRcdGNhc2UgS1dfTG9jYWxNdXRhdGU6XG5cdFx0XHRcdHJldHVybiBTRVRfTXV0YXRlXG5cdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHR1bmV4cGVjdGVkKGF0KVxuXHRcdH1cblx0fSxcblxuXHRwYXJzZVN1YlNldCA9IChvYmplY3QsIHN1YmJlZCwgb3BUeXBlLCBhdCwgYWZ0ZXIsIGxvYykgPT4ge1xuXHRcdGNvbnN0IHN1YmJlZHMgPSBwYXJzZUV4cHJQYXJ0cyhzdWJiZWQpXG5cdFx0cmV0dXJuIG5ldyBTZXRTdWIobG9jLCBvYmplY3QsIHN1YmJlZHMsIG9wVHlwZSwgbWVtYmVyU2V0S2luZChhdCksIHBhcnNlRXhwcihhZnRlcikpXG5cdH0sXG5cblx0cGFyc2VMb2NhbE11dGF0ZSA9IChsb2NhbHNUb2tlbnMsIHZhbHVlVG9rZW5zLCBsb2MpID0+IHtcblx0XHRjb25zdCBsb2NhbHMgPSBwYXJzZUxvY2FsRGVjbGFyZXNKdXN0TmFtZXMobG9jYWxzVG9rZW5zKVxuXHRcdGNvbnRleHQuY2hlY2sobG9jYWxzLmxlbmd0aCA9PT0gMSwgbG9jLCAnVE9ETzogTG9jYWxEZXN0cnVjdHVyZU11dGF0ZScpXG5cdFx0Y29uc3QgbmFtZSA9IGxvY2Fsc1swXS5uYW1lXG5cdFx0Y29uc3QgdmFsdWUgPSBwYXJzZUV4cHIodmFsdWVUb2tlbnMpXG5cdFx0cmV0dXJuIG5ldyBMb2NhbE11dGF0ZShsb2MsIG5hbWUsIHZhbHVlKVxuXHR9LFxuXG5cdHBhcnNlQXNzaWduID0gKGxvY2Fsc1Rva2Vucywga2luZCwgdmFsdWVUb2tlbnMsIGxvYykgPT4ge1xuXHRcdGNvbnN0IGxvY2FscyA9IHBhcnNlTG9jYWxEZWNsYXJlcyhsb2NhbHNUb2tlbnMpXG5cdFx0Y29uc3QgdmFsdWUgPSBwYXJzZUFzc2lnblZhbHVlKGtpbmQsIHZhbHVlVG9rZW5zKVxuXG5cdFx0Y29uc3QgaXNZaWVsZCA9IGtpbmQgPT09IEtXX1lpZWxkIHx8IGtpbmQgPT09IEtXX1lpZWxkVG9cblx0XHRpZiAoaXNFbXB0eShsb2NhbHMpKSB7XG5cdFx0XHRjb250ZXh0LmNoZWNrKGlzWWllbGQsIGxvY2Fsc1Rva2Vucy5sb2MsICdBc3NpZ25tZW50IHRvIG5vdGhpbmcnKVxuXHRcdFx0cmV0dXJuIHZhbHVlXG5cdFx0fSBlbHNlIHtcblx0XHRcdGlmIChpc1lpZWxkKVxuXHRcdFx0XHRmb3IgKGNvbnN0IF8gb2YgbG9jYWxzKVxuXHRcdFx0XHRcdGNvbnRleHQuY2hlY2soIV8uaXNMYXp5KCksIF8ubG9jLCAnQ2FuIG5vdCB5aWVsZCB0byBsYXp5IHZhcmlhYmxlLicpXG5cblx0XHRcdGNvbnN0IGlzT2JqQXNzaWduID0ga2luZCA9PT0gS1dfT2JqQXNzaWduXG5cblx0XHRcdGlmIChraW5kID09PSBLV19Bc3NpZ25NdXRhYmxlKVxuXHRcdFx0XHRmb3IgKGxldCBfIG9mIGxvY2Fscykge1xuXHRcdFx0XHRcdGNvbnRleHQuY2hlY2soIV8uaXNMYXp5KCksIF8ubG9jLCAnTGF6eSBsb2NhbCBjYW4gbm90IGJlIG11dGFibGUuJylcblx0XHRcdFx0XHRfLmtpbmQgPSBMRF9NdXRhYmxlXG5cdFx0XHRcdH1cblxuXHRcdFx0Y29uc3Qgd3JhcCA9IF8gPT4gaXNPYmpBc3NpZ24gPyBuZXcgT2JqRW50cnlBc3NpZ24obG9jLCBfKSA6IF9cblxuXHRcdFx0aWYgKGxvY2Fscy5sZW5ndGggPT09IDEpIHtcblx0XHRcdFx0Y29uc3QgYXNzaWduZWUgPSBsb2NhbHNbMF1cblx0XHRcdFx0Y29uc3QgYXNzaWduID0gbmV3IEFzc2lnblNpbmdsZShsb2MsIGFzc2lnbmVlLCB2YWx1ZSlcblx0XHRcdFx0cmV0dXJuIHdyYXAoYXNzaWduKVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y29uc3Qga2luZCA9IGxvY2Fsc1swXS5raW5kXG5cdFx0XHRcdGZvciAoY29uc3QgXyBvZiBsb2NhbHMpXG5cdFx0XHRcdFx0Y29udGV4dC5jaGVjayhfLmtpbmQgPT09IGtpbmQsIF8ubG9jLFxuXHRcdFx0XHRcdFx0J0FsbCBsb2NhbHMgb2YgZGVzdHJ1Y3R1cmluZyBhc3NpZ25tZW50IG11c3QgYmUgb2YgdGhlIHNhbWUga2luZC4nKVxuXHRcdFx0XHRyZXR1cm4gd3JhcChuZXcgQXNzaWduRGVzdHJ1Y3R1cmUobG9jLCBsb2NhbHMsIHZhbHVlLCBraW5kKSlcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0cGFyc2VBc3NpZ25WYWx1ZSA9IChraW5kLCB2YWx1ZVRva2VucykgPT4ge1xuXHRcdGNvbnN0IHZhbHVlID0gcGFyc2VFeHByKHZhbHVlVG9rZW5zKVxuXHRcdHN3aXRjaCAoa2luZCkge1xuXHRcdFx0Y2FzZSBLV19ZaWVsZDpcblx0XHRcdFx0cmV0dXJuIG5ldyBZaWVsZCh2YWx1ZS5sb2MsIHZhbHVlKVxuXHRcdFx0Y2FzZSBLV19ZaWVsZFRvOlxuXHRcdFx0XHRyZXR1cm4gbmV3IFlpZWxkVG8odmFsdWUubG9jLCB2YWx1ZSlcblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdHJldHVybiB2YWx1ZVxuXHRcdH1cblx0fSxcblxuXHRwYXJzZUFzc2VydCA9IChuZWdhdGUsIHRva2VucykgPT4ge1xuXHRcdGNoZWNrTm9uRW1wdHkodG9rZW5zLCAoKSA9PiBgRXhwZWN0ZWQgc29tZXRoaW5nIGFmdGVyICR7a2V5d29yZE5hbWUoS1dfQXNzZXJ0KX0uYClcblxuXHRcdGNvbnN0IFtjb25kVG9rZW5zLCBvcFRocm93bl0gPVxuXHRcdFx0aWZFbHNlKHRva2Vucy5vcFNwbGl0T25jZVdoZXJlKF8gPT4gaXNLZXl3b3JkKEtXX1Rocm93LCBfKSksXG5cdFx0XHRcdCh7YmVmb3JlLCBhZnRlcn0pID0+IFtiZWZvcmUsIHBhcnNlRXhwcihhZnRlcildLFxuXHRcdFx0XHQoKSA9PiBbdG9rZW5zLCBudWxsXSlcblxuXHRcdGNvbnN0IHBhcnRzID0gcGFyc2VFeHByUGFydHMoY29uZFRva2Vucylcblx0XHRjb25zdCBjb25kID0gcGFydHMubGVuZ3RoID09PSAxID8gcGFydHNbMF0gOiBuZXcgQ2FsbChjb25kVG9rZW5zLmxvYywgcGFydHNbMF0sIHRhaWwocGFydHMpKVxuXHRcdHJldHVybiBuZXcgQXNzZXJ0KHRva2Vucy5sb2MsIG5lZ2F0ZSwgY29uZCwgb3BUaHJvd24pXG5cdH0sXG5cblx0cGFyc2VJZ25vcmUgPSB0b2tlbnMgPT4ge1xuXHRcdGNvbnN0IGlnbm9yZWQgPSB0b2tlbnMubWFwKF8gPT4ge1xuXHRcdFx0aWYgKGlzS2V5d29yZChLV19Gb2N1cywgXykpXG5cdFx0XHRcdHJldHVybiAnXydcblx0XHRcdGVsc2Uge1xuXHRcdFx0XHRjb250ZXh0LmNoZWNrKF8gaW5zdGFuY2VvZiBOYW1lLCBfLmxvYywgKCkgPT4gYEV4cGVjdGVkIGxvY2FsIG5hbWUsIG5vdCAke199LmApXG5cdFx0XHRcdHJldHVybiBfLm5hbWVcblx0XHRcdH1cblx0XHR9KVxuXHRcdHJldHVybiBuZXcgSWdub3JlKHRva2Vucy5sb2MsIGlnbm9yZWQpXG5cdH0iXSwic291cmNlUm9vdCI6Ii9zcmMifQ==
