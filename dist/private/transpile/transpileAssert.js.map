{"version":3,"sources":["private/transpile/transpileAssert.js"],"names":[],"mappings":"AAAA,CAAC,UAAU,OAAO,EAAE;AAChB,QAAI,OAAO,MAAM,KAAK,QAAQ,IAAI,OAAO,MAAM,CAAC,OAAO,KAAK,QAAQ,EAAE;AAClE,YAAI,CAAC,GAAG,OAAO,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC,AAAC,IAAI,CAAC,KAAK,SAAS,EAAE,MAAM,CAAC,OAAO,GAAG,CAAC,CAAC;KAC9E,MACI,IAAI,OAAO,MAAM,KAAK,UAAU,IAAI,MAAM,CAAC,GAAG,EAAE;AACjD,cAAM,CAAC,CAAC,SAAS,EAAE,SAAS,EAAE,OAAO,EAAE,eAAe,EAAE,UAAU,EAAE,QAAQ,CAAC,EAAE,OAAO,CAAC,CAAC;KAC3F;CACJ,CAAA,CAAE,UAAU,OAAO,EAAE,OAAO,EAAE;AAC3B,gBAAY,CAAC;;AACb,QAAI,IAAI,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC;AAC5B,QAAI,KAAK,GAAG,OAAO,CAAC,eAAe,CAAC,CAAC;AACrC,QAAI,OAAO,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC;AAClC,QAAI,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;AAC/B,aAAS,SAAS,GAAG;AACjB,cAAM,QAAQ,GAAG,MAAM;AACnB,kBAAM,IAAI,GAAG,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;AACvC,mBAAO,IAAI,CAAC,MAAM,GAAG,IAAI,GAAG,IAAI,KAAK,CAAC,eAAe,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;SACpE,CAAC;AACF,eAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,IAAI,IAAI,KAAK,CAAC,WAAW,CAAC,QAAQ,EAAE,EAAE,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,EAAE,MAAM;AAC/F,gBAAI,IAAI,CAAC,SAAS,YAAY,OAAO,CAAC,IAAI,EAAE;AACxC,sBAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC;AAC5B,sBAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;AAC3B,sBAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;AACtC,uBAAO,MAAM,YAAY,OAAO,CAAC,MAAM,GACnC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,GAAG,iBAAiB,GAAG,cAAc,EAAE,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,MAAM,CAAC,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,GACrI,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,GAAG,WAAW,GAAG,QAAQ,EAAE,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,EAAE,GAAG,IAAI,CAAC,CAAC;aACvF,MAEG,OAAO,IAAI,KAAK,CAAC,WAAW,CAAC,QAAQ,EAAE,EAAE,eAAe,CAAC,CAAC;SACjE,CAAC,CAAC;KACN;AACD,UAAM,CAAC,cAAc,CAAC,OAAO,EAAE,YAAY,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;AAC9D,WAAO,CAAC,OAAO,GAAG,SAAS,CAAC;AAC5B,UAAM,eAAe,GAAG,MAAM,CAAC,oBAAoB,CAAC,mBAAmB,CAAC,CAAC;CAC5E,CAAC,CAAC","file":"private/transpile/transpileAssert.js","sourcesContent":["(function (factory) {\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === 'function' && define.amd) {\n        define([\"require\", \"exports\", 'op/Op', 'esast/lib/ast', '../MsAst', './util'], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    var Op_1 = require('op/Op');\n    var ast_1 = require('esast/lib/ast');\n    var MsAst_1 = require('../MsAst');\n    var util_1 = require('./util');\n    function default_1() {\n        const failCond = () => {\n            const cond = util_1.t0(this.condition);\n            return this.negate ? cond : new ast_1.UnaryExpression('!', cond);\n        };\n        return Op_1.caseOp(this.opThrown, _ => new ast_1.IfStatement(failCond(), util_1.doThrow(_)), () => {\n            if (this.condition instanceof MsAst_1.Call) {\n                const call = this.condition;\n                const called = call.called;\n                const args = call.args.map(util_1.t0);\n                return called instanceof MsAst_1.Member ?\n                    util_1.msCall(this.negate ? 'assertNotMember' : 'assertMember', util_1.t0(called.object), util_1.transpileName(called.name), ...args) :\n                    util_1.msCall(this.negate ? 'assertNot' : 'assert', util_1.t0(called), ...args);\n            }\n            else\n                return new ast_1.IfStatement(failCond(), ThrowAssertFail);\n        });\n    }\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = default_1;\n    const ThrowAssertFail = util_1.throwErrorFromString('Assertion failed.');\n});\n"],"sourceRoot":"/source/"}