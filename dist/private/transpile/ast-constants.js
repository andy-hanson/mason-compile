'use strict';

(function (global, factory) {
	if (typeof define === "function" && define.amd) {
		define(['exports', 'esast/dist/ast', 'esast/dist/util', './util'], factory);
	} else if (typeof exports !== "undefined") {
		factory(exports, require('esast/dist/ast'), require('esast/dist/util'), require('./util'));
	} else {
		var mod = {
			exports: {}
		};
		factory(mod.exports, global.ast, global.util, global.util);
		global.astConstants = mod.exports;
	}
})(this, function (exports, _ast, _util, _util2) {
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.SetLexicalThis = exports.LetLexicalThis = exports.DeclareLexicalThis = exports.ExportsDefault = exports.DeclareBuiltObj = exports.DeclareBuiltMap = exports.DeclareBuiltBag = exports.ArraySliceCall = exports.ThrowNoCaseMatch = exports.ThrowAssertFail = exports.This = exports.SymbolIterator = exports.SwitchCaseNoMatch = exports.ReturnFocus = exports.ReturnBuilt = exports.LitZero = exports.LitTrue = exports.LitStrThrow = exports.LitNull = exports.LitEmptyString = exports.LitEmptyArray = exports.IdSuper = exports.IdLoop = exports.IdLexicalThis = exports.IdFocus = exports.IdExtract = exports.IdExports = exports.IdError = exports.IdBuilt = exports.IdArguments = exports.GlobalInfinity = exports.GlobalError = undefined;
	const GlobalError = exports.GlobalError = new _ast.Identifier('Error'),
	      GlobalInfinity = exports.GlobalInfinity = new _ast.Identifier('Infinity'),
	      IdArguments = exports.IdArguments = new _ast.Identifier('arguments'),
	      IdBuilt = exports.IdBuilt = new _ast.Identifier('built'),
	      IdError = exports.IdError = new _ast.Identifier('Error'),
	      IdExports = exports.IdExports = new _ast.Identifier('exports'),
	      IdExtract = exports.IdExtract = new _ast.Identifier('_$'),
	      IdFocus = exports.IdFocus = new _ast.Identifier('_'),
	      IdLexicalThis = exports.IdLexicalThis = new _ast.Identifier('_this'),
	      IdLoop = exports.IdLoop = new _ast.Identifier('loop'),
	      IdSuper = exports.IdSuper = new _ast.Identifier('super'),
	      LitEmptyArray = exports.LitEmptyArray = new _ast.ArrayExpression([]),
	      LitEmptyString = exports.LitEmptyString = new _ast.Literal(''),
	      LitNull = exports.LitNull = new _ast.Literal(null),
	      LitStrThrow = exports.LitStrThrow = new _ast.Literal('An error occurred.'),
	      LitTrue = exports.LitTrue = new _ast.Literal(true),
	      LitZero = exports.LitZero = new _ast.Literal(0),
	      ReturnBuilt = exports.ReturnBuilt = new _ast.ReturnStatement(IdBuilt),
	      ReturnFocus = exports.ReturnFocus = new _ast.ReturnStatement(IdFocus),
	      SwitchCaseNoMatch = exports.SwitchCaseNoMatch = new _ast.SwitchCase(undefined, [(0, _util2.throwErrorFromString)('No branch of `switch` matches.')]),
	      SymbolIterator = exports.SymbolIterator = (0, _util.member)(new _ast.Identifier('Symbol'), 'iterator'),
	      This = exports.This = new _ast.ThisExpression(),
	      ThrowAssertFail = exports.ThrowAssertFail = (0, _util2.throwErrorFromString)('Assertion failed.'),
	      ThrowNoCaseMatch = exports.ThrowNoCaseMatch = (0, _util2.throwErrorFromString)('No branch of `case` matches.'),
	      ArraySliceCall = exports.ArraySliceCall = (0, _util.member)((0, _util.member)(LitEmptyArray, 'slice'), 'call'),
	      DeclareBuiltBag = exports.DeclareBuiltBag = new _ast.VariableDeclaration('let', [new _ast.VariableDeclarator(IdBuilt, LitEmptyArray)]),
	      DeclareBuiltMap = exports.DeclareBuiltMap = new _ast.VariableDeclaration('let', [new _ast.VariableDeclarator(IdBuilt, new _ast.NewExpression((0, _util.member)(new _ast.Identifier('global'), 'Map'), []))]),
	      DeclareBuiltObj = exports.DeclareBuiltObj = new _ast.VariableDeclaration('let', [new _ast.VariableDeclarator(IdBuilt, new _ast.ObjectExpression([]))]),
	      ExportsDefault = exports.ExportsDefault = (0, _util.member)(IdExports, 'default'),
	      DeclareLexicalThis = exports.DeclareLexicalThis = new _ast.VariableDeclaration('let', [new _ast.VariableDeclarator(IdLexicalThis, This)]),
	      LetLexicalThis = exports.LetLexicalThis = new _ast.VariableDeclaration('let', [new _ast.VariableDeclarator(IdLexicalThis)]),
	      SetLexicalThis = exports.SetLexicalThis = new _ast.AssignmentExpression('=', IdLexicalThis, This);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9wcml2YXRlL3RyYW5zcGlsZS9hc3QtY29uc3RhbnRzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7T0FPQyxXQUFXLFdBQVgsV0FBVyxHQUFHLFNBUGdDLFVBQVUsQ0FPM0IsT0FBTyxDQUFDO09BQ3JDLGNBQWMsV0FBZCxjQUFjLEdBQUcsU0FSNkIsVUFBVSxDQVF4QixVQUFVLENBQUM7T0FDM0MsV0FBVyxXQUFYLFdBQVcsR0FBRyxTQVRnQyxVQUFVLENBUzNCLFdBQVcsQ0FBQztPQUN6QyxPQUFPLFdBQVAsT0FBTyxHQUFHLFNBVm9DLFVBQVUsQ0FVL0IsT0FBTyxDQUFDO09BQ2pDLE9BQU8sV0FBUCxPQUFPLEdBQUcsU0FYb0MsVUFBVSxDQVcvQixPQUFPLENBQUM7T0FDakMsU0FBUyxXQUFULFNBQVMsR0FBRyxTQVprQyxVQUFVLENBWTdCLFNBQVMsQ0FBQztPQUNyQyxTQUFTLFdBQVQsU0FBUyxHQUFHLFNBYmtDLFVBQVUsQ0FhN0IsSUFBSSxDQUFDO09BQ2hDLE9BQU8sV0FBUCxPQUFPLEdBQUcsU0Fkb0MsVUFBVSxDQWMvQixHQUFHLENBQUM7T0FDN0IsYUFBYSxXQUFiLGFBQWEsR0FBRyxTQWY4QixVQUFVLENBZXpCLE9BQU8sQ0FBQztPQUN2QyxNQUFNLFdBQU4sTUFBTSxHQUFHLFNBaEJxQyxVQUFVLENBZ0JoQyxNQUFNLENBQUM7T0FDL0IsT0FBTyxXQUFQLE9BQU8sR0FBRyxTQWpCb0MsVUFBVSxDQWlCL0IsT0FBTyxDQUFDO09BQ2pDLGFBQWEsV0FBYixhQUFhLEdBQUcsU0FsQlQsZUFBZSxDQWtCYyxFQUFFLENBQUM7T0FDdkMsY0FBYyxXQUFkLGNBQWMsR0FBRyxTQW5CeUMsT0FBTyxDQW1CcEMsRUFBRSxDQUFDO09BQ2hDLE9BQU8sV0FBUCxPQUFPLEdBQUcsU0FwQmdELE9BQU8sQ0FvQjNDLElBQUksQ0FBQztPQUMzQixXQUFXLFdBQVgsV0FBVyxHQUFHLFNBckI0QyxPQUFPLENBcUJ2QyxvQkFBb0IsQ0FBQztPQUMvQyxPQUFPLFdBQVAsT0FBTyxHQUFHLFNBdEJnRCxPQUFPLENBc0IzQyxJQUFJLENBQUM7T0FDM0IsT0FBTyxXQUFQLE9BQU8sR0FBRyxTQXZCZ0QsT0FBTyxDQXVCM0MsQ0FBQyxDQUFDO09BQ3hCLFdBQVcsV0FBWCxXQUFXLEdBQUcsU0F2QmQsZUFBZSxDQXVCbUIsT0FBTyxDQUFDO09BQzFDLFdBQVcsV0FBWCxXQUFXLEdBQUcsU0F4QmQsZUFBZSxDQXdCbUIsT0FBTyxDQUFDO09BQzFDLGlCQUFpQixXQUFqQixpQkFBaUIsR0FBRyxTQXpCSCxVQUFVLENBeUJRLFNBQVMsRUFBRSxDQUM3QyxXQXZCTSxvQkFBb0IsRUF1QkwsZ0NBQWdDLENBQUMsQ0FBQyxDQUFDO09BQ3pELGNBQWMsV0FBZCxjQUFjLEdBQUcsVUF6QlYsTUFBTSxFQXlCVyxTQTVCc0IsVUFBVSxDQTRCakIsUUFBUSxDQUFDLEVBQUUsVUFBVSxDQUFDO09BQzdELElBQUksV0FBSixJQUFJLEdBQUcsU0E1QnNCLGNBQWMsRUE0QmhCO09BQzNCLGVBQWUsV0FBZixlQUFlLEdBQUcsV0ExQlgsb0JBQW9CLEVBMEJZLG1CQUFtQixDQUFDO09BQzNELGdCQUFnQixXQUFoQixnQkFBZ0IsR0FBRyxXQTNCWixvQkFBb0IsRUEyQmEsOEJBQThCLENBQUM7T0FFdkUsY0FBYyxXQUFkLGNBQWMsR0FBRyxVQTlCVixNQUFNLEVBOEJXLFVBOUJqQixNQUFNLEVBOEJrQixhQUFhLEVBQUUsT0FBTyxDQUFDLEVBQUUsTUFBTSxDQUFDO09BQy9ELGVBQWUsV0FBZixlQUFlLEdBQUcsU0FqQzJCLG1CQUFtQixDQWlDdEIsS0FBSyxFQUM5QyxDQUFDLFNBbENnRSxrQkFBa0IsQ0FrQzNELE9BQU8sRUFBRSxhQUFhLENBQUMsQ0FBQyxDQUFDO09BQ2xELGVBQWUsV0FBZixlQUFlLEdBQUcsU0FuQzJCLG1CQUFtQixDQW1DdEIsS0FBSyxFQUFFLENBQ2hELFNBcENpRSxrQkFBa0IsQ0FvQzVELE9BQU8sRUFDN0IsU0F0Q2lFLGFBQWEsQ0FzQzVELFVBbkNiLE1BQU0sRUFtQ2MsU0F0Q21CLFVBQVUsQ0FzQ2QsUUFBUSxDQUFDLEVBQUUsS0FBSyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO09BQ25FLGVBQWUsV0FBZixlQUFlLEdBQUcsU0F0QzJCLG1CQUFtQixDQXNDdEIsS0FBSyxFQUFFLENBQ2hELFNBdkNpRSxrQkFBa0IsQ0F1QzVELE9BQU8sRUFBRSxTQXhDaUQsZ0JBQWdCLENBd0M1QyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7T0FDNUQsY0FBYyxXQUFkLGNBQWMsR0FBRyxVQXRDVixNQUFNLEVBc0NXLFNBQVMsRUFBRSxTQUFTLENBQUM7T0FFN0Msa0JBQWtCLFdBQWxCLGtCQUFrQixHQUFHLFNBMUN3QixtQkFBbUIsQ0EwQ25CLEtBQUssRUFDakQsQ0FBQyxTQTNDZ0Usa0JBQWtCLENBMkMzRCxhQUFhLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztPQUMvQyxjQUFjLFdBQWQsY0FBYyxHQUFHLFNBNUM0QixtQkFBbUIsQ0E0Q3ZCLEtBQUssRUFBRSxDQUFDLFNBNUNpQixrQkFBa0IsQ0E0Q1osYUFBYSxDQUFDLENBQUMsQ0FBQztPQUN4RixjQUFjLFdBQWQsY0FBYyxHQUFHLFNBOUNPLG9CQUFvQixDQThDRixHQUFHLEVBQUUsYUFBYSxFQUFFLElBQUksQ0FBQyIsImZpbGUiOiJhc3QtY29uc3RhbnRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtBcnJheUV4cHJlc3Npb24sIEFzc2lnbm1lbnRFeHByZXNzaW9uLCBJZGVudGlmaWVyLCBMaXRlcmFsLCBOZXdFeHByZXNzaW9uLCBPYmplY3RFeHByZXNzaW9uLFxuXHRSZXR1cm5TdGF0ZW1lbnQsIFN3aXRjaENhc2UsIFRoaXNFeHByZXNzaW9uLCBWYXJpYWJsZURlY2xhcmF0aW9uLCBWYXJpYWJsZURlY2xhcmF0b3J9XG5cdGZyb20gJ2VzYXN0L2Rpc3QvYXN0J1xuaW1wb3J0IHttZW1iZXJ9IGZyb20gJ2VzYXN0L2Rpc3QvdXRpbCdcbmltcG9ydCB7dGhyb3dFcnJvckZyb21TdHJpbmd9IGZyb20gJy4vdXRpbCdcblxuZXhwb3J0IGNvbnN0XG5cdEdsb2JhbEVycm9yID0gbmV3IElkZW50aWZpZXIoJ0Vycm9yJyksXG5cdEdsb2JhbEluZmluaXR5ID0gbmV3IElkZW50aWZpZXIoJ0luZmluaXR5JyksXG5cdElkQXJndW1lbnRzID0gbmV3IElkZW50aWZpZXIoJ2FyZ3VtZW50cycpLFxuXHRJZEJ1aWx0ID0gbmV3IElkZW50aWZpZXIoJ2J1aWx0JyksXG5cdElkRXJyb3IgPSBuZXcgSWRlbnRpZmllcignRXJyb3InKSxcblx0SWRFeHBvcnRzID0gbmV3IElkZW50aWZpZXIoJ2V4cG9ydHMnKSxcblx0SWRFeHRyYWN0ID0gbmV3IElkZW50aWZpZXIoJ18kJyksXG5cdElkRm9jdXMgPSBuZXcgSWRlbnRpZmllcignXycpLFxuXHRJZExleGljYWxUaGlzID0gbmV3IElkZW50aWZpZXIoJ190aGlzJyksXG5cdElkTG9vcCA9IG5ldyBJZGVudGlmaWVyKCdsb29wJyksXG5cdElkU3VwZXIgPSBuZXcgSWRlbnRpZmllcignc3VwZXInKSxcblx0TGl0RW1wdHlBcnJheSA9IG5ldyBBcnJheUV4cHJlc3Npb24oW10pLFxuXHRMaXRFbXB0eVN0cmluZyA9IG5ldyBMaXRlcmFsKCcnKSxcblx0TGl0TnVsbCA9IG5ldyBMaXRlcmFsKG51bGwpLFxuXHRMaXRTdHJUaHJvdyA9IG5ldyBMaXRlcmFsKCdBbiBlcnJvciBvY2N1cnJlZC4nKSxcblx0TGl0VHJ1ZSA9IG5ldyBMaXRlcmFsKHRydWUpLFxuXHRMaXRaZXJvID0gbmV3IExpdGVyYWwoMCksXG5cdFJldHVybkJ1aWx0ID0gbmV3IFJldHVyblN0YXRlbWVudChJZEJ1aWx0KSxcblx0UmV0dXJuRm9jdXMgPSBuZXcgUmV0dXJuU3RhdGVtZW50KElkRm9jdXMpLFxuXHRTd2l0Y2hDYXNlTm9NYXRjaCA9IG5ldyBTd2l0Y2hDYXNlKHVuZGVmaW5lZCwgW1xuXHRcdHRocm93RXJyb3JGcm9tU3RyaW5nKCdObyBicmFuY2ggb2YgYHN3aXRjaGAgbWF0Y2hlcy4nKV0pLFxuXHRTeW1ib2xJdGVyYXRvciA9IG1lbWJlcihuZXcgSWRlbnRpZmllcignU3ltYm9sJyksICdpdGVyYXRvcicpLFxuXHRUaGlzID0gbmV3IFRoaXNFeHByZXNzaW9uKCksXG5cdFRocm93QXNzZXJ0RmFpbCA9IHRocm93RXJyb3JGcm9tU3RyaW5nKCdBc3NlcnRpb24gZmFpbGVkLicpLFxuXHRUaHJvd05vQ2FzZU1hdGNoID0gdGhyb3dFcnJvckZyb21TdHJpbmcoJ05vIGJyYW5jaCBvZiBgY2FzZWAgbWF0Y2hlcy4nKSxcblxuXHRBcnJheVNsaWNlQ2FsbCA9IG1lbWJlcihtZW1iZXIoTGl0RW1wdHlBcnJheSwgJ3NsaWNlJyksICdjYWxsJyksXG5cdERlY2xhcmVCdWlsdEJhZyA9IG5ldyBWYXJpYWJsZURlY2xhcmF0aW9uKCdsZXQnLFxuXHRcdFtuZXcgVmFyaWFibGVEZWNsYXJhdG9yKElkQnVpbHQsIExpdEVtcHR5QXJyYXkpXSksXG5cdERlY2xhcmVCdWlsdE1hcCA9IG5ldyBWYXJpYWJsZURlY2xhcmF0aW9uKCdsZXQnLCBbXG5cdFx0bmV3IFZhcmlhYmxlRGVjbGFyYXRvcihJZEJ1aWx0LFxuXHRcdFx0bmV3IE5ld0V4cHJlc3Npb24obWVtYmVyKG5ldyBJZGVudGlmaWVyKCdnbG9iYWwnKSwgJ01hcCcpLCBbXSkpXSksXG5cdERlY2xhcmVCdWlsdE9iaiA9IG5ldyBWYXJpYWJsZURlY2xhcmF0aW9uKCdsZXQnLCBbXG5cdFx0bmV3IFZhcmlhYmxlRGVjbGFyYXRvcihJZEJ1aWx0LCBuZXcgT2JqZWN0RXhwcmVzc2lvbihbXSkpXSksXG5cdEV4cG9ydHNEZWZhdWx0ID0gbWVtYmVyKElkRXhwb3J0cywgJ2RlZmF1bHQnKSxcblxuXHREZWNsYXJlTGV4aWNhbFRoaXMgPSBuZXcgVmFyaWFibGVEZWNsYXJhdGlvbignbGV0Jyxcblx0XHRbbmV3IFZhcmlhYmxlRGVjbGFyYXRvcihJZExleGljYWxUaGlzLCBUaGlzKV0pLFxuXHRMZXRMZXhpY2FsVGhpcyA9IG5ldyBWYXJpYWJsZURlY2xhcmF0aW9uKCdsZXQnLCBbbmV3IFZhcmlhYmxlRGVjbGFyYXRvcihJZExleGljYWxUaGlzKV0pLFxuXHRTZXRMZXhpY2FsVGhpcyA9IG5ldyBBc3NpZ25tZW50RXhwcmVzc2lvbignPScsIElkTGV4aWNhbFRoaXMsIFRoaXMpXG4iXX0=