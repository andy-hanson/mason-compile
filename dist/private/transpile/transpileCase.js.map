{"version":3,"sources":["private/transpile/transpileCase.js"],"names":[],"mappings":"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","file":"private/transpile/transpileCase.js","sourcesContent":["(function (factory) {\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === 'function' && define.amd) {\n        define([\"require\", \"exports\", 'esast/lib/Declaration', 'esast/lib/Expression', 'esast/lib/Identifier', 'esast/lib/Statement', 'op/Op', '../ast/Case', './esast-constants', './transpileBlock', './transpileVal', './transpileX', './util', './util2'], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    var Declaration_1 = require('esast/lib/Declaration');\n    var Expression_1 = require('esast/lib/Expression');\n    var Identifier_1 = require('esast/lib/Identifier');\n    var Statement_1 = require('esast/lib/Statement');\n    var Op_1 = require('op/Op');\n    var Case_1 = require('../ast/Case');\n    var esast_constants_1 = require('./esast-constants');\n    var transpileBlock_1 = require('./transpileBlock');\n    var transpileVal_1 = require('./transpileVal');\n    var transpileX_1 = require('./transpileX');\n    var util_1 = require('./util');\n    var util2_1 = require('./util2');\n    function transpileCaseValNoLoc({ opCased, parts, opElse }) {\n        const body = caseBody(parts, opElse);\n        const block = Op_1.caseOp(opCased, _ => [transpileX_1.transpileAssignSingle(_), body], () => [body]);\n        return util_1.blockWrap(new Statement_1.BlockStatement(block));\n    }\n    exports.transpileCaseValNoLoc = transpileCaseValNoLoc;\n    function transpileCaseDoNoLoc({ opCased, parts, opElse }) {\n        const body = caseBody(parts, opElse);\n        return Op_1.caseOp(opCased, _ => new Statement_1.BlockStatement([transpileX_1.transpileAssignSingle(_), body]), () => body);\n    }\n    exports.transpileCaseDoNoLoc = transpileCaseDoNoLoc;\n    function caseBody(parts, opElse) {\n        let acc = Op_1.caseOp(opElse, transpileBlock_1.default, () => ThrowNoCaseMatch);\n        for (let i = parts.length - 1; i >= 0; i = i - 1)\n            acc = transpileCasePart(parts[i], acc);\n        return acc;\n    }\n    function transpileCasePart(_, alternate) {\n        const { test, result } = _;\n        return util_1.loc(_, (() => {\n            if (test instanceof Case_1.Pattern) {\n                const { type, patterned, locals } = test;\n                const decl = util_1.plainLet(IdExtract, util_1.msCall('extract', transpileVal_1.default(type), esast_constants_1.IdFocus, new Expression_1.LiteralNumber(locals.length)));\n                const testExtract = new Expression_1.BinaryExpression('!==', IdExtract, esast_constants_1.LitNull);\n                const extract = new Declaration_1.VariableDeclarationLet(locals.map((_, index) => new Declaration_1.VariableDeclarator(util_1.idForDeclareCached(_), new Expression_1.MemberExpressionComputed(IdExtract, new Expression_1.LiteralNumber(index)))));\n                const res = transpileBlock_1.default(result, extract);\n                return new Statement_1.BlockStatement([decl, new Statement_1.IfStatement(testExtract, res, alternate)]);\n            }\n            else\n                return new Statement_1.IfStatement(transpileVal_1.default(test), transpileBlock_1.default(result), alternate);\n        })());\n    }\n    const IdExtract = new Identifier_1.default('_$');\n    const ThrowNoCaseMatch = util2_1.throwErrorFromString('No branch of `case` matches.');\n});\n"],"sourceRoot":"/source/"}