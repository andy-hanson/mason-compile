import Op from 'op/Op';
import { Class, Val, Except, Switch, TraitDo } from '../MsAst';
import Token from '../Token';
import { Tokens } from './Slice';
export declare let opParseExpr: (_: Tokens) => Op<Val>;
export declare let parseClass: (_: Tokens) => Class;
export declare let parseExcept: (_: Tokens) => Except;
export declare let parseExpr: (_: Tokens) => Val;
export declare let parseExprParts: (_: Tokens) => Array<Val>;
export declare let parseNExprParts: (_: Tokens, n: number, errorCode: string) => Array<Val>;
export declare let parseSingle: (_: Token) => Val;
export declare let parseSpaced: (_: Tokens) => Val;
export declare let parseSwitch: (switchedFromFun: boolean, _: Tokens) => Switch;
export declare let parseTraitDo: (_: Tokens) => TraitDo;
export declare function load(_: any): void;
