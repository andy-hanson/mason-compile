if (typeof define !== 'function') var define = require('amdefine')(module);define(['exports', 'esast/dist/ast', 'esast/dist/util', './util'], function (exports, _esastDistAst, _esastDistUtil, _util) {
	'use strict';

	Object.defineProperty(exports, '__esModule', {
		value: true
	});
	const GlobalError = new _esastDistAst.Identifier('Error'),
	      IdArguments = new _esastDistAst.Identifier('arguments'),
	      IdBuilt = new _esastDistAst.Identifier('built'),
	      IdDefine = new _esastDistAst.Identifier('define'),
	      IdError = _util._IdError,
	      IdExports = new _esastDistAst.Identifier('exports'),
	      IdExtract = new _esastDistAst.Identifier('_$'),
	      IdFocus = new _esastDistAst.Identifier('_'),
	     
	// TODO:ES6 Shouldn't need, just use arrow functions.
	IdLexicalThis = new _esastDistAst.Identifier('_this'),
	      LitEmptyArray = new _esastDistAst.ArrayExpression([]),
	      LitEmptyString = new _esastDistAst.Literal(''),
	      LitNull = new _esastDistAst.Literal(null),
	      LitStrExports = new _esastDistAst.Literal('exports'),
	      LitStrThrow = new _esastDistAst.Literal('An error occurred.'),
	      LitTrue = new _esastDistAst.Literal(true),
	      LitZero = new _esastDistAst.Literal(0),
	      ReturnBuilt = new _esastDistAst.ReturnStatement(IdBuilt),
	      ReturnExports = new _esastDistAst.ReturnStatement(IdExports),
	      ReturnRes = new _esastDistAst.ReturnStatement(new _esastDistAst.Identifier('res')),
	      SwitchCaseNoMatch = new _esastDistAst.SwitchCase(undefined, [(0, _util.throwErrorFromString)('No branch of `switch` matches.')]),
	      SymbolIterator = (0, _esastDistUtil.member)(new _esastDistAst.Identifier('Symbol'), 'iterator'),
	      ThrowAssertFail = (0, _util.throwErrorFromString)('Assertion failed.'),
	      ThrowNoCaseMatch = (0, _util.throwErrorFromString)('No branch of `case` matches.'),
	      UseStrict = new _esastDistAst.ExpressionStatement(new _esastDistAst.Literal('use strict')),
	      ArraySliceCall = (0, _esastDistUtil.member)((0, _esastDistUtil.member)(LitEmptyArray, 'slice'), 'call'),
	     
	// if (typeof define !== 'function') var define = require('amdefine')(module)
	AmdefineHeader = new _esastDistAst.IfStatement(new _esastDistAst.BinaryExpression('!==', new _esastDistAst.UnaryExpression('typeof', IdDefine), new _esastDistAst.Literal('function')), new _esastDistAst.VariableDeclaration('var', [new _esastDistAst.VariableDeclarator(IdDefine, new _esastDistAst.CallExpression(new _esastDistAst.CallExpression(new _esastDistAst.Identifier('require'), [new _esastDistAst.Literal('amdefine')]), [new _esastDistAst.Identifier('module')]))])),
	      DeclareBuiltBag = new _esastDistAst.VariableDeclaration('const', [new _esastDistAst.VariableDeclarator(IdBuilt, LitEmptyArray)]),
	      DeclareBuiltMap = new _esastDistAst.VariableDeclaration('const', [new _esastDistAst.VariableDeclarator(IdBuilt, new _esastDistAst.NewExpression((0, _esastDistUtil.member)(new _esastDistAst.Identifier('global'), 'Map'), []))]),
	      DeclareBuiltObj = new _esastDistAst.VariableDeclaration('const', [new _esastDistAst.VariableDeclarator(IdBuilt, new _esastDistAst.ObjectExpression([]))]),
	      DeclareLexicalThis = new _esastDistAst.VariableDeclaration('const', [new _esastDistAst.VariableDeclarator(IdLexicalThis, new _esastDistAst.ThisExpression())]),
	      ExportsDefault = (0, _esastDistUtil.member)(IdExports, 'default'),
	      ExportsGet = (0, _esastDistUtil.member)(IdExports, '_get');
	exports.GlobalError = GlobalError;
	exports.IdArguments = IdArguments;
	exports.IdBuilt = IdBuilt;
	exports.IdDefine = IdDefine;
	exports.IdError = IdError;
	exports.IdExports = IdExports;
	exports.IdExtract = IdExtract;
	exports.IdFocus = IdFocus;
	exports.IdLexicalThis = IdLexicalThis;
	exports.LitEmptyArray = LitEmptyArray;
	exports.LitEmptyString = LitEmptyString;
	exports.LitNull = LitNull;
	exports.LitStrExports = LitStrExports;
	exports.LitStrThrow = LitStrThrow;
	exports.LitTrue = LitTrue;
	exports.LitZero = LitZero;
	exports.ReturnBuilt = ReturnBuilt;
	exports.ReturnExports = ReturnExports;
	exports.ReturnRes = ReturnRes;
	exports.SwitchCaseNoMatch = SwitchCaseNoMatch;
	exports.SymbolIterator = SymbolIterator;
	exports.ThrowAssertFail = ThrowAssertFail;
	exports.ThrowNoCaseMatch = ThrowNoCaseMatch;
	exports.UseStrict = UseStrict;
	exports.ArraySliceCall = ArraySliceCall;
	exports.AmdefineHeader = AmdefineHeader;
	exports.DeclareBuiltBag = DeclareBuiltBag;
	exports.DeclareBuiltMap = DeclareBuiltMap;
	exports.DeclareBuiltObj = DeclareBuiltObj;
	exports.DeclareLexicalThis = DeclareLexicalThis;
	exports.ExportsDefault = ExportsDefault;
	exports.ExportsGet = ExportsGet;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzdC1jb25zdGFudHMuanMiLCJwcml2YXRlL3RyYW5zcGlsZS9hc3QtY29uc3RhbnRzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7QUNNTyxPQUNOLFdBQVcsR0FBRyxrQkFQa0UsVUFBVSxDQU83RCxPQUFPLENBQUM7T0FDckMsV0FBVyxHQUFHLGtCQVJrRSxVQUFVLENBUTdELFdBQVcsQ0FBQztPQUN6QyxPQUFPLEdBQUcsa0JBVHNFLFVBQVUsQ0FTakUsT0FBTyxDQUFDO09BQ2pDLFFBQVEsR0FBRyxrQkFWcUUsVUFBVSxDQVVoRSxRQUFRLENBQUM7T0FDbkMsT0FBTyxTQVBDLFFBQVEsQUFPRTtPQUNsQixTQUFTLEdBQUcsa0JBWm9FLFVBQVUsQ0FZL0QsU0FBUyxDQUFDO09BQ3JDLFNBQVMsR0FBRyxrQkFib0UsVUFBVSxDQWEvRCxJQUFJLENBQUM7T0FDaEMsT0FBTyxHQUFHLGtCQWRzRSxVQUFVLENBY2pFLEdBQUcsQ0FBQzs7O0FBRTdCLGNBQWEsR0FBRyxrQkFoQmdFLFVBQVUsQ0FnQjNELE9BQU8sQ0FBQztPQUN2QyxhQUFhLEdBQUcsa0JBakJSLGVBQWUsQ0FpQmEsRUFBRSxDQUFDO09BQ3ZDLGNBQWMsR0FBRyxrQkFqQkosT0FBTyxDQWlCUyxFQUFFLENBQUM7T0FDaEMsT0FBTyxHQUFHLGtCQWxCRyxPQUFPLENBa0JFLElBQUksQ0FBQztPQUMzQixhQUFhLEdBQUcsa0JBbkJILE9BQU8sQ0FtQlEsU0FBUyxDQUFDO09BQ3RDLFdBQVcsR0FBRyxrQkFwQkQsT0FBTyxDQW9CTSxvQkFBb0IsQ0FBQztPQUMvQyxPQUFPLEdBQUcsa0JBckJHLE9BQU8sQ0FxQkUsSUFBSSxDQUFDO09BQzNCLE9BQU8sR0FBRyxrQkF0QkcsT0FBTyxDQXNCRSxDQUFDLENBQUM7T0FDeEIsV0FBVyxHQUFHLGtCQXZCeUMsZUFBZSxDQXVCcEMsT0FBTyxDQUFDO09BQzFDLGFBQWEsR0FBRyxrQkF4QnVDLGVBQWUsQ0F3QmxDLFNBQVMsQ0FBQztPQUM5QyxTQUFTLEdBQUcsa0JBekIyQyxlQUFlLENBeUJ0QyxrQkExQmdELFVBQVUsQ0EwQjNDLEtBQUssQ0FBQyxDQUFDO09BQ3RELGlCQUFpQixHQUFHLGtCQTFCb0QsVUFBVSxDQTBCL0MsU0FBUyxFQUFFLENBQzdDLFVBeEJpQixvQkFBb0IsRUF3QmhCLGdDQUFnQyxDQUFDLENBQUUsQ0FBQztPQUMxRCxjQUFjLEdBQUcsbUJBMUJULE1BQU0sRUEwQlUsa0JBN0J3RCxVQUFVLENBNkJuRCxRQUFRLENBQUMsRUFBRSxVQUFVLENBQUM7T0FDN0QsZUFBZSxHQUFHLFVBMUJBLG9CQUFvQixFQTBCQyxtQkFBbUIsQ0FBQztPQUMzRCxnQkFBZ0IsR0FBRyxVQTNCRCxvQkFBb0IsRUEyQkUsOEJBQThCLENBQUM7T0FDdkUsU0FBUyxHQUFHLGtCQWhDK0MsbUJBQW1CLENBZ0MxQyxrQkEvQnZCLE9BQU8sQ0ErQjRCLFlBQVksQ0FBQyxDQUFDO09BRTlELGNBQWMsR0FBRyxtQkEvQlQsTUFBTSxFQStCVSxtQkEvQmhCLE1BQU0sRUErQmlCLGFBQWEsRUFBRSxPQUFPLENBQUMsRUFBRSxNQUFNLENBQUM7OztBQUUvRCxlQUFjLEdBQUcsa0JBbkNqQixXQUFXLENBb0NWLGtCQXJDd0IsZ0JBQWdCLENBcUNuQixLQUFLLEVBQ3pCLGtCQXBDYyxlQUFlLENBb0NULFFBQVEsRUFBRSxRQUFRLENBQUMsRUFDdkMsa0JBdENXLE9BQU8sQ0FzQ04sVUFBVSxDQUFDLENBQUMsRUFDekIsa0JBdENnQyxtQkFBbUIsQ0FzQzNCLEtBQUssRUFBRSxDQUM5QixrQkF2Q29ELGtCQUFrQixDQXVDL0MsUUFBUSxFQUFFLGtCQXpDUSxjQUFjLENBMEN0RCxrQkExQ3dDLGNBQWMsQ0EwQ25DLGtCQTFDMEQsVUFBVSxDQTBDckQsU0FBUyxDQUFDLEVBQUUsQ0FBRSxrQkF6Q3RDLE9BQU8sQ0F5QzJDLFVBQVUsQ0FBQyxDQUFFLENBQUMsRUFDMUUsQ0FBRSxrQkEzQzJFLFVBQVUsQ0EyQ3RFLFFBQVEsQ0FBQyxDQUFFLENBQUMsQ0FBQyxDQUFFLENBQUMsQ0FBQztPQUNyQyxlQUFlLEdBQUcsa0JBMUNlLG1CQUFtQixDQTBDVixPQUFPLEVBQ2hELENBQUUsa0JBM0NtRCxrQkFBa0IsQ0EyQzlDLE9BQU8sRUFBRSxhQUFhLENBQUMsQ0FBRSxDQUFDO09BQ3BELGVBQWUsR0FBRyxrQkE1Q2UsbUJBQW1CLENBNENWLE9BQU8sRUFBRSxDQUNsRCxrQkE3Q3FELGtCQUFrQixDQTZDaEQsT0FBTyxFQUM3QixrQkEvQ29CLGFBQWEsQ0ErQ2YsbUJBN0NaLE1BQU0sRUE2Q2Esa0JBaERxRCxVQUFVLENBZ0RoRCxRQUFRLENBQUMsRUFBRSxLQUFLLENBQUMsRUFBRSxFQUFHLENBQUMsQ0FBQyxDQUFFLENBQUM7T0FDckUsZUFBZSxHQUFHLGtCQS9DZSxtQkFBbUIsQ0ErQ1YsT0FBTyxFQUFFLENBQ2xELGtCQWhEcUQsa0JBQWtCLENBZ0RoRCxPQUFPLEVBQUUsa0JBakRJLGdCQUFnQixDQWlEQyxFQUFHLENBQUMsQ0FBQyxDQUFFLENBQUM7T0FDOUQsa0JBQWtCLEdBQUcsa0JBakRZLG1CQUFtQixDQWlEUCxPQUFPLEVBQ25ELENBQUUsa0JBbERtRCxrQkFBa0IsQ0FrRDlDLGFBQWEsRUFBRSxrQkFsRHpDLGNBQWMsRUFrRCtDLENBQUMsQ0FBRSxDQUFDO09BQ2pFLGNBQWMsR0FBRyxtQkFsRFQsTUFBTSxFQWtEVSxTQUFTLEVBQUUsU0FBUyxDQUFDO09BQzdDLFVBQVUsR0FBRyxtQkFuREwsTUFBTSxFQW1ETSxTQUFTLEVBQUUsTUFBTSxDQUFDLENBQUEiLCJmaWxlIjoicHJpdmF0ZS90cmFuc3BpbGUvYXN0LWNvbnN0YW50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbbnVsbCwiaW1wb3J0IHsgQXJyYXlFeHByZXNzaW9uLCBCaW5hcnlFeHByZXNzaW9uLCBDYWxsRXhwcmVzc2lvbiwgRXhwcmVzc2lvblN0YXRlbWVudCwgSWRlbnRpZmllcixcblx0SWZTdGF0ZW1lbnQsIExpdGVyYWwsIE5ld0V4cHJlc3Npb24sIE9iamVjdEV4cHJlc3Npb24sIFJldHVyblN0YXRlbWVudCwgU3dpdGNoQ2FzZSxcblx0VGhpc0V4cHJlc3Npb24sIFVuYXJ5RXhwcmVzc2lvbiwgVmFyaWFibGVEZWNsYXJhdGlvbiwgVmFyaWFibGVEZWNsYXJhdG9yIH0gZnJvbSAnZXNhc3QvZGlzdC9hc3QnXG5pbXBvcnQgeyBtZW1iZXIgfSBmcm9tICdlc2FzdC9kaXN0L3V0aWwnXG5pbXBvcnQgeyBfSWRFcnJvciwgdGhyb3dFcnJvckZyb21TdHJpbmcgfSBmcm9tICcuL3V0aWwnXG5cbmV4cG9ydCBjb25zdFxuXHRHbG9iYWxFcnJvciA9IG5ldyBJZGVudGlmaWVyKCdFcnJvcicpLFxuXHRJZEFyZ3VtZW50cyA9IG5ldyBJZGVudGlmaWVyKCdhcmd1bWVudHMnKSxcblx0SWRCdWlsdCA9IG5ldyBJZGVudGlmaWVyKCdidWlsdCcpLFxuXHRJZERlZmluZSA9IG5ldyBJZGVudGlmaWVyKCdkZWZpbmUnKSxcblx0SWRFcnJvciA9IF9JZEVycm9yLFxuXHRJZEV4cG9ydHMgPSBuZXcgSWRlbnRpZmllcignZXhwb3J0cycpLFxuXHRJZEV4dHJhY3QgPSBuZXcgSWRlbnRpZmllcignXyQnKSxcblx0SWRGb2N1cyA9IG5ldyBJZGVudGlmaWVyKCdfJyksXG5cdC8vIFRPRE86RVM2IFNob3VsZG4ndCBuZWVkLCBqdXN0IHVzZSBhcnJvdyBmdW5jdGlvbnMuXG5cdElkTGV4aWNhbFRoaXMgPSBuZXcgSWRlbnRpZmllcignX3RoaXMnKSxcblx0TGl0RW1wdHlBcnJheSA9IG5ldyBBcnJheUV4cHJlc3Npb24oW10pLFxuXHRMaXRFbXB0eVN0cmluZyA9IG5ldyBMaXRlcmFsKCcnKSxcblx0TGl0TnVsbCA9IG5ldyBMaXRlcmFsKG51bGwpLFxuXHRMaXRTdHJFeHBvcnRzID0gbmV3IExpdGVyYWwoJ2V4cG9ydHMnKSxcblx0TGl0U3RyVGhyb3cgPSBuZXcgTGl0ZXJhbCgnQW4gZXJyb3Igb2NjdXJyZWQuJyksXG5cdExpdFRydWUgPSBuZXcgTGl0ZXJhbCh0cnVlKSxcblx0TGl0WmVybyA9IG5ldyBMaXRlcmFsKDApLFxuXHRSZXR1cm5CdWlsdCA9IG5ldyBSZXR1cm5TdGF0ZW1lbnQoSWRCdWlsdCksXG5cdFJldHVybkV4cG9ydHMgPSBuZXcgUmV0dXJuU3RhdGVtZW50KElkRXhwb3J0cyksXG5cdFJldHVyblJlcyA9IG5ldyBSZXR1cm5TdGF0ZW1lbnQobmV3IElkZW50aWZpZXIoJ3JlcycpKSxcblx0U3dpdGNoQ2FzZU5vTWF0Y2ggPSBuZXcgU3dpdGNoQ2FzZSh1bmRlZmluZWQsIFtcblx0XHR0aHJvd0Vycm9yRnJvbVN0cmluZygnTm8gYnJhbmNoIG9mIGBzd2l0Y2hgIG1hdGNoZXMuJykgXSksXG5cdFN5bWJvbEl0ZXJhdG9yID0gbWVtYmVyKG5ldyBJZGVudGlmaWVyKCdTeW1ib2wnKSwgJ2l0ZXJhdG9yJyksXG5cdFRocm93QXNzZXJ0RmFpbCA9IHRocm93RXJyb3JGcm9tU3RyaW5nKCdBc3NlcnRpb24gZmFpbGVkLicpLFxuXHRUaHJvd05vQ2FzZU1hdGNoID0gdGhyb3dFcnJvckZyb21TdHJpbmcoJ05vIGJyYW5jaCBvZiBgY2FzZWAgbWF0Y2hlcy4nKSxcblx0VXNlU3RyaWN0ID0gbmV3IEV4cHJlc3Npb25TdGF0ZW1lbnQobmV3IExpdGVyYWwoJ3VzZSBzdHJpY3QnKSksXG5cblx0QXJyYXlTbGljZUNhbGwgPSBtZW1iZXIobWVtYmVyKExpdEVtcHR5QXJyYXksICdzbGljZScpLCAnY2FsbCcpLFxuXHQvLyBpZiAodHlwZW9mIGRlZmluZSAhPT0gJ2Z1bmN0aW9uJykgdmFyIGRlZmluZSA9IHJlcXVpcmUoJ2FtZGVmaW5lJykobW9kdWxlKVxuXHRBbWRlZmluZUhlYWRlciA9IG5ldyBJZlN0YXRlbWVudChcblx0XHRuZXcgQmluYXJ5RXhwcmVzc2lvbignIT09Jyxcblx0XHRcdG5ldyBVbmFyeUV4cHJlc3Npb24oJ3R5cGVvZicsIElkRGVmaW5lKSxcblx0XHRcdG5ldyBMaXRlcmFsKCdmdW5jdGlvbicpKSxcblx0XHRuZXcgVmFyaWFibGVEZWNsYXJhdGlvbigndmFyJywgW1xuXHRcdFx0bmV3IFZhcmlhYmxlRGVjbGFyYXRvcihJZERlZmluZSwgbmV3IENhbGxFeHByZXNzaW9uKFxuXHRcdFx0XHRuZXcgQ2FsbEV4cHJlc3Npb24obmV3IElkZW50aWZpZXIoJ3JlcXVpcmUnKSwgWyBuZXcgTGl0ZXJhbCgnYW1kZWZpbmUnKSBdKSxcblx0XHRcdFx0WyBuZXcgSWRlbnRpZmllcignbW9kdWxlJykgXSkpIF0pKSxcblx0RGVjbGFyZUJ1aWx0QmFnID0gbmV3IFZhcmlhYmxlRGVjbGFyYXRpb24oJ2NvbnN0Jyxcblx0XHRbIG5ldyBWYXJpYWJsZURlY2xhcmF0b3IoSWRCdWlsdCwgTGl0RW1wdHlBcnJheSkgXSksXG5cdERlY2xhcmVCdWlsdE1hcCA9IG5ldyBWYXJpYWJsZURlY2xhcmF0aW9uKCdjb25zdCcsIFtcblx0XHRuZXcgVmFyaWFibGVEZWNsYXJhdG9yKElkQnVpbHQsXG5cdFx0XHRuZXcgTmV3RXhwcmVzc2lvbihtZW1iZXIobmV3IElkZW50aWZpZXIoJ2dsb2JhbCcpLCAnTWFwJyksIFsgXSkpIF0pLFxuXHREZWNsYXJlQnVpbHRPYmogPSBuZXcgVmFyaWFibGVEZWNsYXJhdGlvbignY29uc3QnLCBbXG5cdFx0bmV3IFZhcmlhYmxlRGVjbGFyYXRvcihJZEJ1aWx0LCBuZXcgT2JqZWN0RXhwcmVzc2lvbihbIF0pKSBdKSxcblx0RGVjbGFyZUxleGljYWxUaGlzID0gbmV3IFZhcmlhYmxlRGVjbGFyYXRpb24oJ2NvbnN0Jyxcblx0XHRbIG5ldyBWYXJpYWJsZURlY2xhcmF0b3IoSWRMZXhpY2FsVGhpcywgbmV3IFRoaXNFeHByZXNzaW9uKCkpIF0pLFxuXHRFeHBvcnRzRGVmYXVsdCA9IG1lbWJlcihJZEV4cG9ydHMsICdkZWZhdWx0JyksXG5cdEV4cG9ydHNHZXQgPSBtZW1iZXIoSWRFeHBvcnRzLCAnX2dldCcpXG4iXSwic291cmNlUm9vdCI6Ii9zcmMifQ==