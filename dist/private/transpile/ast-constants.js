if (typeof define !== 'function') var define = require('amdefine')(module);define(['exports', 'esast/dist/ast', 'esast/dist/util', './util'], function (exports, _esastDistAst, _esastDistUtil, _util) {
	'use strict';

	Object.defineProperty(exports, '__esModule', {
		value: true
	});
	const IdArguments = new _esastDistAst.Identifier('arguments'),
	      IdBuilt = new _esastDistAst.Identifier('built'),
	      IdDefine = new _esastDistAst.Identifier('define'),
	      IdError = _util._IdError,
	      IdExports = new _esastDistAst.Identifier('exports'),
	      IdExtract = new _esastDistAst.Identifier('_$'),
	     
	// TODO:ES6 Shouldn't need, just use arrow functions.
	IdLexicalThis = new _esastDistAst.Identifier('_this'),
	      LitEmptyArray = new _esastDistAst.ArrayExpression([]),
	      LitEmptyString = new _esastDistAst.Literal(''),
	      LitNull = new _esastDistAst.Literal(null),
	      LitStrExports = new _esastDistAst.Literal('exports'),
	      LitStrThrow = new _esastDistAst.Literal('An error occurred.'),
	      LitTrue = new _esastDistAst.Literal(true),
	      LitZero = new _esastDistAst.Literal(0),
	      ReturnBuilt = new _esastDistAst.ReturnStatement(IdBuilt),
	      ReturnExports = new _esastDistAst.ReturnStatement(IdExports),
	      ReturnRes = new _esastDistAst.ReturnStatement(new _esastDistAst.Identifier('res')),
	      SwitchCaseNoMatch = new _esastDistAst.SwitchCase(undefined, [(0, _util.throwErrorFromString)('No branch of `switch` matches.')]),
	      SymbolIterator = (0, _esastDistUtil.member)(new _esastDistAst.Identifier('Symbol'), 'iterator'),
	      ThrowAssertFail = (0, _util.throwErrorFromString)('Assertion failed.'),
	      ThrowNoCaseMatch = (0, _util.throwErrorFromString)('No branch of `case` matches.'),
	      UseStrict = new _esastDistAst.ExpressionStatement(new _esastDistAst.Literal('use strict')),
	      ArraySliceCall = (0, _esastDistUtil.member)((0, _esastDistUtil.member)(LitEmptyArray, 'slice'), 'call'),
	     
	// if (typeof define !== 'function') var define = require('amdefine')(module)
	AmdefineHeader = new _esastDistAst.IfStatement(new _esastDistAst.BinaryExpression('!==', new _esastDistAst.UnaryExpression('typeof', IdDefine), new _esastDistAst.Literal('function')), new _esastDistAst.VariableDeclaration('var', [new _esastDistAst.VariableDeclarator(IdDefine, new _esastDistAst.CallExpression(new _esastDistAst.CallExpression(new _esastDistAst.Identifier('require'), [new _esastDistAst.Literal('amdefine')]), [new _esastDistAst.Identifier('module')]))])),
	      DeclareBuiltBag = new _esastDistAst.VariableDeclaration('const', [new _esastDistAst.VariableDeclarator(IdBuilt, LitEmptyArray)]),
	      DeclareBuiltMap = new _esastDistAst.VariableDeclaration('const', [new _esastDistAst.VariableDeclarator(IdBuilt, new _esastDistAst.NewExpression((0, _esastDistUtil.member)(new _esastDistAst.Identifier('global'), 'Map'), []))]),
	      DeclareBuiltObj = new _esastDistAst.VariableDeclaration('const', [new _esastDistAst.VariableDeclarator(IdBuilt, new _esastDistAst.ObjectExpression([]))]),
	      ExportsDefault = (0, _esastDistUtil.member)(IdExports, 'default'),
	      ExportsGet = (0, _esastDistUtil.member)(IdExports, '_get');
	exports.IdArguments = IdArguments;
	exports.IdBuilt = IdBuilt;
	exports.IdDefine = IdDefine;
	exports.IdError = IdError;
	exports.IdExports = IdExports;
	exports.IdExtract = IdExtract;
	exports.IdLexicalThis = IdLexicalThis;
	exports.LitEmptyArray = LitEmptyArray;
	exports.LitEmptyString = LitEmptyString;
	exports.LitNull = LitNull;
	exports.LitStrExports = LitStrExports;
	exports.LitStrThrow = LitStrThrow;
	exports.LitTrue = LitTrue;
	exports.LitZero = LitZero;
	exports.ReturnBuilt = ReturnBuilt;
	exports.ReturnExports = ReturnExports;
	exports.ReturnRes = ReturnRes;
	exports.SwitchCaseNoMatch = SwitchCaseNoMatch;
	exports.SymbolIterator = SymbolIterator;
	exports.ThrowAssertFail = ThrowAssertFail;
	exports.ThrowNoCaseMatch = ThrowNoCaseMatch;
	exports.UseStrict = UseStrict;
	exports.ArraySliceCall = ArraySliceCall;
	exports.AmdefineHeader = AmdefineHeader;
	exports.DeclareBuiltBag = DeclareBuiltBag;
	exports.DeclareBuiltMap = DeclareBuiltMap;
	exports.DeclareBuiltObj = DeclareBuiltObj;
	exports.ExportsDefault = ExportsDefault;
	exports.ExportsGet = ExportsGet;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInByaXZhdGUvdHJhbnNwaWxlL2FzdC1jb25zdGFudHMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBTU8sT0FDTixXQUFXLEdBQUcsa0JBUGtFLFVBQVUsQ0FPN0QsV0FBVyxDQUFDO09BQ3pDLE9BQU8sR0FBRyxrQkFSc0UsVUFBVSxDQVFqRSxPQUFPLENBQUM7T0FDakMsUUFBUSxHQUFHLGtCQVRxRSxVQUFVLENBU2hFLFFBQVEsQ0FBQztPQUNuQyxPQUFPLFNBTkMsUUFBUSxBQU1FO09BQ2xCLFNBQVMsR0FBRyxrQkFYb0UsVUFBVSxDQVcvRCxTQUFTLENBQUM7T0FDckMsU0FBUyxHQUFHLGtCQVpvRSxVQUFVLENBWS9ELElBQUksQ0FBQzs7O0FBRWhDLGNBQWEsR0FBRyxrQkFkZ0UsVUFBVSxDQWMzRCxPQUFPLENBQUM7T0FDdkMsYUFBYSxHQUFHLGtCQWZSLGVBQWUsQ0FlYSxFQUFFLENBQUM7T0FDdkMsY0FBYyxHQUFHLGtCQWZKLE9BQU8sQ0FlUyxFQUFFLENBQUM7T0FDaEMsT0FBTyxHQUFHLGtCQWhCRyxPQUFPLENBZ0JFLElBQUksQ0FBQztPQUMzQixhQUFhLEdBQUcsa0JBakJILE9BQU8sQ0FpQlEsU0FBUyxDQUFDO09BQ3RDLFdBQVcsR0FBRyxrQkFsQkQsT0FBTyxDQWtCTSxvQkFBb0IsQ0FBQztPQUMvQyxPQUFPLEdBQUcsa0JBbkJHLE9BQU8sQ0FtQkUsSUFBSSxDQUFDO09BQzNCLE9BQU8sR0FBRyxrQkFwQkcsT0FBTyxDQW9CRSxDQUFDLENBQUM7T0FDeEIsV0FBVyxHQUFHLGtCQXJCeUMsZUFBZSxDQXFCcEMsT0FBTyxDQUFDO09BQzFDLGFBQWEsR0FBRyxrQkF0QnVDLGVBQWUsQ0FzQmxDLFNBQVMsQ0FBQztPQUM5QyxTQUFTLEdBQUcsa0JBdkIyQyxlQUFlLENBdUJ0QyxrQkF4QmdELFVBQVUsQ0F3QjNDLEtBQUssQ0FBQyxDQUFDO09BQ3RELGlCQUFpQixHQUFHLGtCQXhCb0QsVUFBVSxDQXdCL0MsU0FBUyxFQUFFLENBQzdDLFVBdEJpQixvQkFBb0IsRUFzQmhCLGdDQUFnQyxDQUFDLENBQUUsQ0FBQztPQUMxRCxjQUFjLEdBQUcsbUJBeEJULE1BQU0sRUF3QlUsa0JBM0J3RCxVQUFVLENBMkJuRCxRQUFRLENBQUMsRUFBRSxVQUFVLENBQUM7T0FDN0QsZUFBZSxHQUFHLFVBeEJBLG9CQUFvQixFQXdCQyxtQkFBbUIsQ0FBQztPQUMzRCxnQkFBZ0IsR0FBRyxVQXpCRCxvQkFBb0IsRUF5QkUsOEJBQThCLENBQUM7T0FDdkUsU0FBUyxHQUFHLGtCQTlCK0MsbUJBQW1CLENBOEIxQyxrQkE3QnZCLE9BQU8sQ0E2QjRCLFlBQVksQ0FBQyxDQUFDO09BRTlELGNBQWMsR0FBRyxtQkE3QlQsTUFBTSxFQTZCVSxtQkE3QmhCLE1BQU0sRUE2QmlCLGFBQWEsRUFBRSxPQUFPLENBQUMsRUFBRSxNQUFNLENBQUM7OztBQUUvRCxlQUFjLEdBQUcsa0JBakNqQixXQUFXLENBa0NWLGtCQW5Dd0IsZ0JBQWdCLENBbUNuQixLQUFLLEVBQ3pCLGtCQWxDRixlQUFlLENBa0NPLFFBQVEsRUFBRSxRQUFRLENBQUMsRUFDdkMsa0JBcENXLE9BQU8sQ0FvQ04sVUFBVSxDQUFDLENBQUMsRUFDekIsa0JBcENnQixtQkFBbUIsQ0FvQ1gsS0FBSyxFQUFFLENBQzlCLGtCQXJDb0Msa0JBQWtCLENBcUMvQixRQUFRLEVBQUUsa0JBdkNRLGNBQWMsQ0F3Q3RELGtCQXhDd0MsY0FBYyxDQXdDbkMsa0JBeEMwRCxVQUFVLENBd0NyRCxTQUFTLENBQUMsRUFBRSxDQUFFLGtCQXZDdEMsT0FBTyxDQXVDMkMsVUFBVSxDQUFDLENBQUUsQ0FBQyxFQUMxRSxDQUFFLGtCQXpDMkUsVUFBVSxDQXlDdEUsUUFBUSxDQUFDLENBQUUsQ0FBQyxDQUFDLENBQUUsQ0FBQyxDQUFDO09BQ3JDLGVBQWUsR0FBRyxrQkF4Q0QsbUJBQW1CLENBd0NNLE9BQU8sRUFDaEQsQ0FBRSxrQkF6Q21DLGtCQUFrQixDQXlDOUIsT0FBTyxFQUFFLGFBQWEsQ0FBQyxDQUFFLENBQUM7T0FDcEQsZUFBZSxHQUFHLGtCQTFDRCxtQkFBbUIsQ0EwQ00sT0FBTyxFQUFFLENBQ2xELGtCQTNDcUMsa0JBQWtCLENBMkNoQyxPQUFPLEVBQzdCLGtCQTdDb0IsYUFBYSxDQTZDZixtQkEzQ1osTUFBTSxFQTJDYSxrQkE5Q3FELFVBQVUsQ0E4Q2hELFFBQVEsQ0FBQyxFQUFFLEtBQUssQ0FBQyxFQUFFLEVBQUcsQ0FBQyxDQUFDLENBQUUsQ0FBQztPQUNyRSxlQUFlLEdBQUcsa0JBN0NELG1CQUFtQixDQTZDTSxPQUFPLEVBQUUsQ0FDbEQsa0JBOUNxQyxrQkFBa0IsQ0E4Q2hDLE9BQU8sRUFBRSxrQkEvQ0ksZ0JBQWdCLENBK0NDLEVBQUcsQ0FBQyxDQUFDLENBQUUsQ0FBQztPQUM5RCxjQUFjLEdBQUcsbUJBOUNULE1BQU0sRUE4Q1UsU0FBUyxFQUFFLFNBQVMsQ0FBQztPQUM3QyxVQUFVLEdBQUcsbUJBL0NMLE1BQU0sRUErQ00sU0FBUyxFQUFFLE1BQU0sQ0FBQyxDQUFBIiwiZmlsZSI6InByaXZhdGUvdHJhbnNwaWxlL2FzdC1jb25zdGFudHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcnJheUV4cHJlc3Npb24sIEJpbmFyeUV4cHJlc3Npb24sIENhbGxFeHByZXNzaW9uLCBFeHByZXNzaW9uU3RhdGVtZW50LCBJZGVudGlmaWVyLFxuXHRJZlN0YXRlbWVudCwgTGl0ZXJhbCwgTmV3RXhwcmVzc2lvbiwgT2JqZWN0RXhwcmVzc2lvbiwgUmV0dXJuU3RhdGVtZW50LCBTd2l0Y2hDYXNlLFxuXHRVbmFyeUV4cHJlc3Npb24sIFZhcmlhYmxlRGVjbGFyYXRpb24sIFZhcmlhYmxlRGVjbGFyYXRvciB9IGZyb20gJ2VzYXN0L2Rpc3QvYXN0J1xuaW1wb3J0IHsgbWVtYmVyIH0gZnJvbSAnZXNhc3QvZGlzdC91dGlsJ1xuaW1wb3J0IHsgX0lkRXJyb3IsIHRocm93RXJyb3JGcm9tU3RyaW5nIH0gZnJvbSAnLi91dGlsJ1xuXG5leHBvcnQgY29uc3Rcblx0SWRBcmd1bWVudHMgPSBuZXcgSWRlbnRpZmllcignYXJndW1lbnRzJyksXG5cdElkQnVpbHQgPSBuZXcgSWRlbnRpZmllcignYnVpbHQnKSxcblx0SWREZWZpbmUgPSBuZXcgSWRlbnRpZmllcignZGVmaW5lJyksXG5cdElkRXJyb3IgPSBfSWRFcnJvcixcblx0SWRFeHBvcnRzID0gbmV3IElkZW50aWZpZXIoJ2V4cG9ydHMnKSxcblx0SWRFeHRyYWN0ID0gbmV3IElkZW50aWZpZXIoJ18kJyksXG5cdC8vIFRPRE86RVM2IFNob3VsZG4ndCBuZWVkLCBqdXN0IHVzZSBhcnJvdyBmdW5jdGlvbnMuXG5cdElkTGV4aWNhbFRoaXMgPSBuZXcgSWRlbnRpZmllcignX3RoaXMnKSxcblx0TGl0RW1wdHlBcnJheSA9IG5ldyBBcnJheUV4cHJlc3Npb24oW10pLFxuXHRMaXRFbXB0eVN0cmluZyA9IG5ldyBMaXRlcmFsKCcnKSxcblx0TGl0TnVsbCA9IG5ldyBMaXRlcmFsKG51bGwpLFxuXHRMaXRTdHJFeHBvcnRzID0gbmV3IExpdGVyYWwoJ2V4cG9ydHMnKSxcblx0TGl0U3RyVGhyb3cgPSBuZXcgTGl0ZXJhbCgnQW4gZXJyb3Igb2NjdXJyZWQuJyksXG5cdExpdFRydWUgPSBuZXcgTGl0ZXJhbCh0cnVlKSxcblx0TGl0WmVybyA9IG5ldyBMaXRlcmFsKDApLFxuXHRSZXR1cm5CdWlsdCA9IG5ldyBSZXR1cm5TdGF0ZW1lbnQoSWRCdWlsdCksXG5cdFJldHVybkV4cG9ydHMgPSBuZXcgUmV0dXJuU3RhdGVtZW50KElkRXhwb3J0cyksXG5cdFJldHVyblJlcyA9IG5ldyBSZXR1cm5TdGF0ZW1lbnQobmV3IElkZW50aWZpZXIoJ3JlcycpKSxcblx0U3dpdGNoQ2FzZU5vTWF0Y2ggPSBuZXcgU3dpdGNoQ2FzZSh1bmRlZmluZWQsIFtcblx0XHR0aHJvd0Vycm9yRnJvbVN0cmluZygnTm8gYnJhbmNoIG9mIGBzd2l0Y2hgIG1hdGNoZXMuJykgXSksXG5cdFN5bWJvbEl0ZXJhdG9yID0gbWVtYmVyKG5ldyBJZGVudGlmaWVyKCdTeW1ib2wnKSwgJ2l0ZXJhdG9yJyksXG5cdFRocm93QXNzZXJ0RmFpbCA9IHRocm93RXJyb3JGcm9tU3RyaW5nKCdBc3NlcnRpb24gZmFpbGVkLicpLFxuXHRUaHJvd05vQ2FzZU1hdGNoID0gdGhyb3dFcnJvckZyb21TdHJpbmcoJ05vIGJyYW5jaCBvZiBgY2FzZWAgbWF0Y2hlcy4nKSxcblx0VXNlU3RyaWN0ID0gbmV3IEV4cHJlc3Npb25TdGF0ZW1lbnQobmV3IExpdGVyYWwoJ3VzZSBzdHJpY3QnKSksXG5cblx0QXJyYXlTbGljZUNhbGwgPSBtZW1iZXIobWVtYmVyKExpdEVtcHR5QXJyYXksICdzbGljZScpLCAnY2FsbCcpLFxuXHQvLyBpZiAodHlwZW9mIGRlZmluZSAhPT0gJ2Z1bmN0aW9uJykgdmFyIGRlZmluZSA9IHJlcXVpcmUoJ2FtZGVmaW5lJykobW9kdWxlKVxuXHRBbWRlZmluZUhlYWRlciA9IG5ldyBJZlN0YXRlbWVudChcblx0XHRuZXcgQmluYXJ5RXhwcmVzc2lvbignIT09Jyxcblx0XHRcdG5ldyBVbmFyeUV4cHJlc3Npb24oJ3R5cGVvZicsIElkRGVmaW5lKSxcblx0XHRcdG5ldyBMaXRlcmFsKCdmdW5jdGlvbicpKSxcblx0XHRuZXcgVmFyaWFibGVEZWNsYXJhdGlvbigndmFyJywgW1xuXHRcdFx0bmV3IFZhcmlhYmxlRGVjbGFyYXRvcihJZERlZmluZSwgbmV3IENhbGxFeHByZXNzaW9uKFxuXHRcdFx0XHRuZXcgQ2FsbEV4cHJlc3Npb24obmV3IElkZW50aWZpZXIoJ3JlcXVpcmUnKSwgWyBuZXcgTGl0ZXJhbCgnYW1kZWZpbmUnKSBdKSxcblx0XHRcdFx0WyBuZXcgSWRlbnRpZmllcignbW9kdWxlJykgXSkpIF0pKSxcblx0RGVjbGFyZUJ1aWx0QmFnID0gbmV3IFZhcmlhYmxlRGVjbGFyYXRpb24oJ2NvbnN0Jyxcblx0XHRbIG5ldyBWYXJpYWJsZURlY2xhcmF0b3IoSWRCdWlsdCwgTGl0RW1wdHlBcnJheSkgXSksXG5cdERlY2xhcmVCdWlsdE1hcCA9IG5ldyBWYXJpYWJsZURlY2xhcmF0aW9uKCdjb25zdCcsIFtcblx0XHRuZXcgVmFyaWFibGVEZWNsYXJhdG9yKElkQnVpbHQsXG5cdFx0XHRuZXcgTmV3RXhwcmVzc2lvbihtZW1iZXIobmV3IElkZW50aWZpZXIoJ2dsb2JhbCcpLCAnTWFwJyksIFsgXSkpIF0pLFxuXHREZWNsYXJlQnVpbHRPYmogPSBuZXcgVmFyaWFibGVEZWNsYXJhdGlvbignY29uc3QnLCBbXG5cdFx0bmV3IFZhcmlhYmxlRGVjbGFyYXRvcihJZEJ1aWx0LCBuZXcgT2JqZWN0RXhwcmVzc2lvbihbIF0pKSBdKSxcblx0RXhwb3J0c0RlZmF1bHQgPSBtZW1iZXIoSWRFeHBvcnRzLCAnZGVmYXVsdCcpLFxuXHRFeHBvcnRzR2V0ID0gbWVtYmVyKElkRXhwb3J0cywgJ19nZXQnKVxuIl0sInNvdXJjZVJvb3QiOiIvc3JjIn0=