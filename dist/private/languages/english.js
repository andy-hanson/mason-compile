'use strict';

(function (global, factory) {
	if (typeof define === "function" && define.amd) {
		define(['exports', '../../CompileError', '../lex/chars', '../Token', '../util'], factory);
	} else if (typeof exports !== "undefined") {
		factory(exports, require('../../CompileError'), require('../lex/chars'), require('../Token'), require('../util'));
	} else {
		var mod = {
			exports: {}
		};
		factory(mod.exports, global.CompileError, global.chars, global.Token, global.util);
		global.english = mod.exports;
	}
})(this, function (exports, _CompileError, _chars, _Token, _util) {
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.default = {
		// Lex:

		badInterpolation: `${ (0, _CompileError.code)('#') } must be followed by ${ (0, _CompileError.code)('(') }, ${ (0, _CompileError.code)('#') }, or a name.`,
		badSpacedIndent: indent => `Indentation spaces must be a multiple of ${ indent }.`,
		emptyBlock: 'Empty block.',
		extraSpace: 'Unnecessary space.',
		mismatchedGroupClose: (actual, expected) => `Trying to close ${ (0, _Token.showGroupKind)(actual) }, but last opened ${ (0, _Token.showGroupKind)(expected) }.`,
		noLeadingSpace: 'Line begins in a space',
		nonLeadingTab: 'Tab may only be used to indent',
		noNewlineInInterpolation: 'Quote interpolation cannot contain newline.',
		reservedChar: char => `Reserved character ${ (0, _chars.showChar)(char) }.`,
		suggestSimpleQuote: name => `Quoted text could be a simple quote ${ (0, _CompileError.code)(`'${ name }`) }.`,
		tooMuchIndent: 'Line is indented more than once.',
		tooMuchIndentQuote: 'Indented quote must have exactly one more indent than previous line.',
		trailingDocComment: `Doc comment must go on its own line. Did you mean ${ (0, _CompileError.code)('||') }?`,
		trailingSpace: 'Line ends in a space.',
		unclosedQuote: 'Unclosed quote.',

		// Parse:

		assignNothing: 'Assignment to nothing.',
		asToken: `Expected only 1 token after ${ (0, _Token.showKeyword)(_Token.Keywords.As) }.`,
		caseFocusIsImplicit: 'Can\'t make focus — is implicitly provided as first argument.',
		caseSwitchNeedsParts: `Must have at least 1 non-${ (0, _Token.showKeyword)(_Token.Keywords.Else) } test.`,
		condArguments: `${ (0, _Token.showKeyword)(_Token.Keywords.Cond) } takes exactly 3 arguments.`,
		conditionalArguments: kind => `${ (0, _Token.showKeyword)(kind) } with no block takes exactly 2 arguments.`,
		delArgument: `${ (0, _Token.showKeyword)(_Token.Keywords.Del) } takes only one argument.`,
		destructureAllLazy: 'All locals of destructuring assignment must all lazy or all non-lazy.',
		expectedAfterAssert: `Expected something after ${ (0, _Token.showKeyword)(_Token.Keywords.Assert) }.`,
		expectedAfterColon: `Expected something after ${ (0, _Token.showKeyword)(_Token.Keywords.Colon) }.`,
		expectedBlock: 'Expected an indented block.',
		expectedExpression: 'Expected an expression, got nothing.',
		expectedFuncKind: token => `Expected function kind, got ${ token }.`,
		expectedImportModuleName: 'Expected a module name to import.',
		expectedKeyword: keyword => `Expected ${ (0, _Token.showKeyword)(keyword) }`,
		expectedMethodSplit: 'Expected a function keyword somewhere.',
		expectedOneLocal: 'Expected only one local declaration.',
		expectedLocalName: token => `Expected a local name, not ${ token }.`,
		expectedName: token => `Expected a name, not ${ token }`,
		extraParens: `Unnecessary ${ (0, _Token.showGroup)(_Token.Groups.Parenthesis) }`,
		implicitFunctionDot: `Function ${ (0, _chars.showChar)(_chars.Chars.Dot) } is implicit for methods.`,
		infiniteRange: `Use ${ (0, _Token.showKeyword)(_Token.Keywords.Dot3) } for infinite ranges.`,
		invalidImportModule: 'Not a valid module name.',
		noImportFocus: `${ (0, _Token.showKeyword)(_Token.Keywords.Focus) } not allowed as import name.`,
		noSpecialKeyword: kind => `${ (0, _Token.showKeyword)(kind) } is not allowed here.`,
		nothingAfterFinally: `Nothing may come after ${ (0, _Token.showKeyword)(_Token.Keywords.Finally) }.`,
		parensOutsideCall: `Use ${ (0, _CompileError.code)('(a b)') }, not ${ (0, _CompileError.code)('a(b)') }.`,
		reservedWord: token => `Reserved word ${ token }.`,
		switchArgIsImplicit: 'Value to switch on is `_`, the function\'s implicit argument.',
		tokenAfterSuper: `Expected ${ (0, _Token.showKeyword)(_Token.Keywords.Dot) } or ${ (0, _CompileError.code)('()') } after ${ (0, _Token.showKeyword)(_Token.Keywords.Super) }`,
		todoForPattern: 'TODO: pattern in for',
		todoMutateDestructure: 'TODO: LocalDestructureMutate',
		unexpected: token => `Unexpected ${ token }.`,
		unexpectedAfter: token => `Did not expect anything after ${ token }.`,
		unexpectedAfterImportDo: `This is an ${ (0, _Token.showKeyword)(_Token.Keywords.ImportDo) }, so you can't import any values.`,
		unexpectedAfterKind: kind => `Did not expect anything between ${ (0, _Token.showKeyword)(kind) } and block.`,
		unexpectedAfterMethod: `Did not expect anything between ${ (0, _Token.showKeyword)(_Token.Keywords.Method) } and function.`,

		// Verify:

		ambiguousSK: 'Can\'t tell if this is a statement. Some parts are statements but others are values.',
		ambiguousForSK: `Can't tell if ${ (0, _Token.showKeyword)(_Token.Keywords.For) } is a statement. ` + `Some ${ (0, _Token.showKeyword)(_Token.Keywords.Break) }s have a value, others don't.`,
		badRegExp: source => {
			try {
				/* eslint-disable no-new */
				new RegExp(source);
				// This should only be called for bad regexp...
				(0, _util.assert)(false);
			} catch (err) {
				return err.message;
			}
		},
		blockNeedsContent: 'Value block must have some content.',
		breakCantHaveValue: `${ (0, _Token.showKeyword)(_Token.Keywords.Break) } with value needs ${ (0, _Token.showKeyword)(_Token.Keywords.For) } to be in expression position.`,
		breakNeedsValue: `${ (0, _Token.showKeyword)(_Token.Keywords.For) } in expression position must ${ (0, _Token.showKeyword)(_Token.Keywords.Break) } with a value.`,
		breakValInForBag: `${ (0, _Token.showKeyword)(_Token.Keywords.Break) } in ${ (0, _Token.showKeyword)(_Token.Keywords.ForBag) } may not have value.`,
		cantDetermineName: 'Expression must be placed in a position where name can be determined.',
		cantInferBlockKind: 'Block has mixed bag/map/obj entries — can not infer type.',
		doFuncCantHaveType: 'Function with return type must return something.',
		duplicateImport: (name, prevLoc) => `${ (0, _CompileError.code)(name) } already imported at ${ prevLoc }`,
		duplicateKey: key => `Duplicate key ${ key }`,
		duplicateLocal: name => `A local ${ (0, _CompileError.code)(name) } already exists and can't be shadowed.`,
		elseRequiresCatch: `${ (0, _Token.showKeyword)(_Token.Keywords.Else) } must come after a ${ (0, _Token.showKeyword)(_Token.Keywords.Catch) }.`,
		exportName: 'Module export must have a constant name.',
		forAsyncNeedsAsync: `${ (0, _Token.showKeyword)(_Token.Keywords.ForAsync) } as statement must be inside an async function.`,
		logicNeedsArgs: 'Logic expression needs at least 2 arguments.',
		misplacedAwait: `Cannot ${ (0, _Token.showKeyword)(_Token.Keywords.Await) } outside of async function.`,
		misplacedBreak: 'Not in a loop.',
		misplacedYield: kind => `Cannot ${ (0, _Token.showKeyword)(kind) } outside of generator function.`,
		missingLocal: name => `No such local ${ (0, _CompileError.code)(name) }.`,
		noLazyCatch: 'Caught error can not be lazy.',
		noLazyIteratee: 'Iteration element can not be lazy.',
		overriddenBuiltin: (name, builtinPath) => `Local ${ (0, _CompileError.code)(name) } overrides builtin from ${ (0, _CompileError.code)(builtinPath) }.`,
		statementAsValue: 'This can only be used as a statement, but appears in expression context.',
		superForbidden: `Class has no superclass, so ${ (0, _Token.showKeyword)(_Token.Keywords.Super) } is not allowed.`,
		superMustBeStatement: `${ (0, _Token.showKeyword)(_Token.Keywords.Super) } in constructor must appear as a statement.'`,
		superNeeded: `Constructor must contain ${ (0, _Token.showKeyword)(_Token.Keywords.Super) }`,
		superNeedsMethod: `${ (0, _Token.showKeyword)(_Token.Keywords.Super) } must be in a method.`,
		unusedLocal: name => `Unused local variable ${ (0, _CompileError.code)(name) }.`,
		uselessExcept: `${ (0, _Token.showKeyword)(_Token.Keywords.Except) } must have ${ (0, _Token.showKeyword)(_Token.Keywords.Catch) } or ${ (0, _Token.showKeyword)(_Token.Keywords.Finally) }.`,
		valueAsStatement: 'Value appears in statement context, so it does nothing.'
	};
});
//# sourceMappingURL=data:application/json;base64,