{"version":3,"sources":["private/parse/parseExpr.js"],"names":[],"mappings":"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","file":"private/parse/parseExpr.js","sourcesContent":["(function (factory) {\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === 'function' && define.amd) {\n        define([\"require\", \"exports\", 'op/Op', 'esast/lib/Loc', '../context', '../MsAst', '../Token', '../util', './checks', './parse*', './parseBlock', './parseCase', './parseDel', './parseFor', './parseFun', './parseMethod', './parseTrait', './parseLocalDeclares', './Slice'], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    var Op_1 = require('op/Op');\n    var Loc_1 = require('esast/lib/Loc');\n    var context_1 = require('../context');\n    var MsAst_1 = require('../MsAst');\n    var Token_1 = require('../Token');\n    var util_1 = require('../util');\n    var checks_1 = require('./checks');\n    var parse_1 = require('./parse*');\n    var parseBlock_1 = require('./parseBlock');\n    var parseCase_1 = require('./parseCase');\n    var parseDel_1 = require('./parseDel');\n    var parseFor_1 = require('./parseFor');\n    var parseFun_1 = require('./parseFun');\n    var parseMethod_1 = require('./parseMethod');\n    var parseTrait_1 = require('./parseTrait');\n    var parseLocalDeclares_1 = require('./parseLocalDeclares');\n    var Slice_1 = require('./Slice');\n    function parseExpr(tokens) {\n        return Op_1.caseOp(tokens.opSplitMany(_ => Token_1.isKeyword(92, _)), _ => parseObjSimple(tokens.loc, _), () => parseExprPlain(tokens));\n    }\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = parseExpr;\n    function opParseExpr(tokens) {\n        return Op_1.opIf(!tokens.isEmpty(), () => parseExpr(tokens));\n    }\n    exports.opParseExpr = opParseExpr;\n    function parseExprParts(tokens) {\n        return Op_1.caseOp(tokens.opSplitOnce(isSplitKeyword), ({ before, at, after }) => util_1.cat(before.map(parse_1.parseSingle), keywordExpr(at, after)), () => {\n            const last = tokens.last();\n            if (last instanceof Token_1.GroupParenthesis) {\n                const h = Slice_1.Tokens.of(last).head();\n                if (isSplitKeyword(h))\n                    context_1.warn(h.loc, _ => _.extraParens);\n            }\n            return tokens.map(parse_1.parseSingle);\n        });\n    }\n    exports.parseExprParts = parseExprParts;\n    function parseNExprParts(tokens, n, message) {\n        const parts = parseExprParts(tokens);\n        context_1.check(parts.length === n, tokens.loc, message);\n        return parts;\n    }\n    exports.parseNExprParts = parseNExprParts;\n    function parseObjSimple(loc, splits) {\n        const first = splits[0].before;\n        checks_1.checkNonEmpty(first, _ => _.unexpected(splits[0].at));\n        const tokensCaller = first.rtail();\n        const pairs = [];\n        for (let i = 0; i < splits.length - 1; i = i + 1) {\n            const nameToken = splits[i].before.last();\n            const name = parseName(nameToken);\n            const tokensValue = i === splits.length - 2 ?\n                splits[i + 1].before :\n                splits[i + 1].before.rtail();\n            const value = parseExprPlain(tokensValue);\n            const loc = new Loc_1.default(nameToken.loc.start, tokensValue.loc.end);\n            pairs.push(new MsAst_1.ObjPair(loc, name, value));\n        }\n        const val = new MsAst_1.ObjSimple(loc, pairs);\n        if (tokensCaller.isEmpty())\n            return val;\n        else {\n            const parts = parseExprParts(tokensCaller);\n            return new MsAst_1.Call(loc, util_1.head(parts), util_1.cat(util_1.tail(parts), val));\n        }\n    }\n    function parseName(token) {\n        if (token instanceof Token_1.Name)\n            return token.name;\n        else\n            throw context_1.fail(token.loc, _ => _.expectedName(token));\n    }\n    function keywordExpr(at, after) {\n        switch (at.kind) {\n            case 36:\n            case 94: {\n                const kind = at.kind === 36 ? 0 : 1;\n                return new MsAst_1.Logic(at.loc, kind, parseExprParts(after));\n            }\n            case 40:\n                return new MsAst_1.Await(at.loc, parseExprPlain(after));\n            case 43:\n                return parseCase_1.default(false, after);\n            case 46:\n                return parse_1.parseClass(after);\n            case 45:\n                return parseCond(after);\n            case 50:\n                return parseDel_1.default(after);\n            case 56:\n                return parse_1.parseExcept(after);\n            case 61:\n                return parseFor_1.parseFor(after);\n            case 62:\n                return parseFor_1.parseForAsync(after);\n            case 63:\n                return parseFor_1.parseForBag(after);\n            case 65:\n            case 66:\n            case 67:\n            case 68:\n            case 69:\n            case 70:\n            case 71:\n            case 72:\n            case 73:\n            case 74:\n            case 75:\n            case 76:\n                return parseFun_1.default(at.kind, after);\n            case 78:\n            case 110:\n                return parseConditional(at.kind, after);\n            case 105:\n                return parseTrait_1.default(after);\n            case 86:\n                return parseMethod_1.default(after);\n            case 89: {\n                const parts = parseExprParts(after);\n                return new MsAst_1.New(at.loc, util_1.head(parts), util_1.tail(parts));\n            }\n            case 90:\n                return new MsAst_1.Not(at.loc, parseExprPlain(after));\n            case 96:\n                return parsePipe(after);\n            case 99:\n                return new MsAst_1.SuperCall(at.loc, parseExprParts(after));\n            case 101:\n                return parse_1.parseSwitch(false, after);\n            case 111:\n                return parseWith(after);\n            case 112:\n                return new MsAst_1.Yield(at.loc, Op_1.opIf(!after.isEmpty(), () => parseExprPlain(after)));\n            case 113:\n                return new MsAst_1.YieldTo(at.loc, parseExprPlain(after));\n            default:\n                throw new Error(String(at.kind));\n        }\n    }\n    const exprSplitKeywords = new Set([\n        36, 40, 43, 46, 45, 50,\n        56, 61, 62, 63, 65, 66,\n        67, 68, 69, 70,\n        71, 72, 73, 74,\n        75, 76, 78, 86, 89,\n        90, 94, 96, 99, 101, 105,\n        110, 111, 112, 113\n    ]);\n    function isSplitKeyword(_) {\n        return Token_1.isAnyKeyword(exprSplitKeywords, _);\n    }\n    function parseExprPlain(tokens) {\n        checks_1.checkNonEmpty(tokens, _ => _.expectedExpression);\n        const parts = parseExprParts(tokens);\n        if (parts.length === 1) {\n            if (tokens.head() instanceof Token_1.GroupParenthesis && !(util_1.head(parts) instanceof MsAst_1.ObjSimple))\n                context_1.warn(tokens.loc, _ => _.extraParens);\n            return util_1.head(parts);\n        }\n        else\n            return new MsAst_1.Call(tokens.loc, util_1.head(parts), util_1.tail(parts));\n    }\n    function parseCond(tokens) {\n        const [cond, then, _else] = parseNExprParts(tokens, 3, _ => _.argsCond);\n        return new MsAst_1.Cond(tokens.loc, cond, then, _else);\n    }\n    function parseConditional(kind, tokens) {\n        const [before, opBlock] = parseBlock_1.beforeAndOpBlock(tokens);\n        const [condition, result] = Op_1.caseOp(opBlock, _ => [parseExprPlain(before), parseBlock_1.default(_)], () => parseNExprParts(before, 2, _ => _.argsConditional(kind)));\n        return new MsAst_1.Conditional(tokens.loc, condition, result, kind === 110);\n    }\n    function parsePipe(tokens) {\n        const [before, block] = parseBlock_1.beforeAndBlock(tokens);\n        return new MsAst_1.Pipe(tokens.loc, parseExpr(before), block.mapSlices(parseExpr));\n    }\n    function parseWith(tokens) {\n        const [before, block] = parseBlock_1.beforeAndBlock(tokens);\n        const [val, declare] = Op_1.caseOp(before.opSplitOnce(_ => Token_1.isKeyword(37, _)), ({ before, after }) => {\n            context_1.check(after.size() === 1, after.loc, _ => _.asToken);\n            return [parseExprPlain(before), parseLocalDeclares_1.parseLocalDeclare(after.head())];\n        }, () => [parseExprPlain(before), MsAst_1.LocalDeclare.focus(tokens.loc)]);\n        return new MsAst_1.With(tokens.loc, declare, val, parseBlock_1.default(block));\n    }\n});\n"],"sourceRoot":"/source/"}