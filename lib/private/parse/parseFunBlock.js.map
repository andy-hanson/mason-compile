{"version":3,"sources":["private/parse/parseFunBlock.js"],"names":[],"mappings":"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","file":"private/parse/parseFunBlock.js","sourcesContent":["(function (factory) {\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === 'function' && define.amd) {\n        define([\"require\", \"exports\", '../ast/Block', '../ast/Fun', '../ast/locals', '../ast/Method', '../token/Group', '../token/Keyword', '../util', './checks', './parseBlock', './parseCase', './parseLocalDeclares', './parsePipe', './parseSpaced', './parseSwitch', './Slice', './tryTakeComment'], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    const Block_1 = require('../ast/Block');\n    const Fun_1 = require('../ast/Fun');\n    const locals_1 = require('../ast/locals');\n    const Method_1 = require('../ast/Method');\n    const Group_1 = require('../token/Group');\n    const Keyword_1 = require('../token/Keyword');\n    const util_1 = require('../util');\n    const checks_1 = require('./checks');\n    const parseBlock_1 = require('./parseBlock');\n    const parseCase_1 = require('./parseCase');\n    const parseLocalDeclares_1 = require('./parseLocalDeclares');\n    const parsePipe_1 = require('./parsePipe');\n    const parseSpaced_1 = require('./parseSpaced');\n    const parseSwitch_1 = require('./parseSwitch');\n    const Slice_1 = require('./Slice');\n    const tryTakeComment_1 = require('./tryTakeComment');\n    function parseFunBlock(keywordKind, tokens) {\n        const [isThisFun, isDo, kind] = funKind(keywordKind);\n        const [opReturnType, rest] = tryTakeReturnType(tokens);\n        const { args, opRestArg, block } = funArgsAndBlock(rest, !isDo);\n        return new Fun_1.FunBlock(tokens.loc, args, opRestArg, block, { kind: kind, isThisFun: isThisFun, isDo: isDo, opReturnType: opReturnType });\n    }\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = parseFunBlock;\n    function parseMethodValue(keywordKind, tokens) {\n        const [isThisFun, isDo, kind] = funKind(keywordKind);\n        const [opReturnType, rest] = tryTakeReturnType(tokens);\n        const [before, blockLines] = parseBlock_1.beforeAndBlock(rest);\n        const [opComment, restLines] = tryTakeComment_1.default(blockLines);\n        if (restLines.size() === 1) {\n            const h = restLines.headSlice();\n            if (h.size() === 1 && Keyword_1.isKeyword(84, h.head())) {\n                const { args, opRestArg } = parseFunLocals(before);\n                return new Method_1.FunAbstract(tokens.loc, args, opRestArg, opReturnType, opComment);\n            }\n        }\n        const { args, opRestArg, block } = funArgsAndBlock(rest, !isDo);\n        return new Fun_1.FunBlock(tokens.loc, args, opRestArg, block, { kind: kind, isThisFun: isThisFun, isDo: isDo, opReturnType: opReturnType });\n    }\n    exports.parseMethodValue = parseMethodValue;\n    function funArgsAndBlock(tokens, isVal, includeMemberArgs = false) {\n        checks_1.checkNonEmpty(tokens, _ => _.expectedBlock);\n        const h = tokens.head();\n        if (Keyword_1.isAnyKeyword(funFocusKeywords, h)) {\n            const args = [locals_1.LocalDeclare.focus(h.loc)];\n            const [before, block] = parseBlock_1.beforeAndBlock(tokens.tail());\n            checks_1.checkEmpty(before, _ => _.funFocusArgIsImplicit(h.kind));\n            const parser = (() => {\n                switch (h.kind) {\n                    case 93:\n                        return parseCase_1.parseCaseFun;\n                    case 158:\n                        return parsePipe_1.parsePipeFun;\n                    case 163:\n                        return parseSwitch_1.parseSwitchFun;\n                    default:\n                        throw new Error(String(h.kind));\n                }\n            })();\n            const expr = parser(tokens.loc, block);\n            return { args: args, opRestArg: null, memberArgs: [], block: new Block_1.default(tokens.loc, null, [expr]) };\n        }\n        else {\n            const [before, blockLines] = parseBlock_1.beforeAndBlock(tokens);\n            const { args, opRestArg, memberArgs } = parseFunLocals(before, includeMemberArgs);\n            const block = parseBlock_1.default(blockLines);\n            return { args: args, opRestArg: opRestArg, memberArgs: memberArgs, block: block };\n        }\n    }\n    exports.funArgsAndBlock = funArgsAndBlock;\n    const funFocusKeywords = new Set([93, 158, 163]);\n    function funKind(keywordKind) {\n        switch (keywordKind) {\n            case 115:\n                return [false, false, 0];\n            case 116:\n                return [false, true, 0];\n            case 117:\n                return [true, false, 0];\n            case 118:\n                return [true, true, 0];\n            case 119:\n                return [false, false, 1];\n            case 120:\n                return [false, true, 1];\n            case 121:\n                return [true, false, 1];\n            case 122:\n                return [true, true, 1];\n            case 123:\n                return [false, false, 2];\n            case 124:\n                return [false, true, 2];\n            case 125:\n                return [true, false, 2];\n            case 126:\n                return [true, true, 2];\n            default:\n                throw new Error(String(keywordKind));\n        }\n    }\n    function tryTakeReturnType(tokens) {\n        if (!tokens.isEmpty()) {\n            const h = tokens.head();\n            if (h instanceof Group_1.GroupSpace && Keyword_1.isKeyword(97, util_1.head(h.subTokens)))\n                return [parseSpaced_1.default(Slice_1.Tokens.of(h).tail()), tokens.tail()];\n        }\n        return [null, tokens];\n    }\n    function parseFunLocals(tokens, includeMemberArgs = false) {\n        if (tokens.isEmpty())\n            return { args: [], memberArgs: [], opRestArg: null };\n        else {\n            let rest = tokens, opRestArg = null;\n            const l = tokens.last();\n            if (l instanceof Group_1.GroupSpace) {\n                const g = Slice_1.Tokens.of(l);\n                if (Keyword_1.isKeyword(104, g.head())) {\n                    rest = tokens.rtail();\n                    opRestArg = parseLocalDeclares_1.parseLocalDeclareFromSpaced(g.tail());\n                }\n            }\n            if (includeMemberArgs) {\n                const { declares: args, memberArgs } = parseLocalDeclares_1.parseLocalDeclaresAndMemberArgs(rest);\n                return { args: args, memberArgs: memberArgs, opRestArg: opRestArg };\n            }\n            else\n                return { args: parseLocalDeclares_1.default(rest), memberArgs: [], opRestArg: opRestArg };\n        }\n    }\n});\n"],"sourceRoot":"/source/"}