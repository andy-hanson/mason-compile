{"version":3,"sources":["private/lex/chars.js","private/lex/chars.ts"],"names":[],"mappings":"AAAA,CAAC,UAAU,OAAV,EAAmB;AAChB,QAAI,OAAO,MAAP,KAAkB,QAAlB,IAA8B,OAAO,OAAO,OAAP,KAAmB,QAA1B,EAAoC;AAClE,YAAI,IAAI,QAAQ,OAAR,EAAiB,OAAjB,CAAJ,CAD8D,IAC3B,MAAM,SAAN,EAAiB,OAAO,OAAP,GAAiB,CAAjB,CAArB;KADvC,MAGK,IAAI,OAAO,MAAP,KAAkB,UAAlB,IAAgC,OAAO,GAAP,EAAY;AACjD,eAAO,CAAC,SAAD,EAAY,SAAZ,CAAP,EAA+B,OAA/B,EADiD;KAAhD;CAJR,CAAD,CAOG,UAAU,OAAV,EAAmB,OAAnB,EAA4B;AAC3B,iBAD2B;;ACL/B,aAAA,QAAA,CAAkB,KAAlB,EAAwD;YAAvB,+DAAkB,qBAAK;;AACvD,YAAI,MAAM,gBAAN,CADmD;AAEvD,aAAK,IAAI,IAAI,CAAJ,EAAO,IAAI,MAAM,MAAN,EAAc,IAAI,IAAI,CAAJ,EACrC,MAAM,CAAA,GAAG,GAAH,EAAM,KAAN,GAAc,MAAM,UAAN,CAAiB,CAAjB,CAAd,EAAiC,EAAjC,CAAN,CADD;AAEA,cAAM,CAAA,GAAG,GAAH,EAAM,QAAN,GAAiB,CAAC,MAAD,EAAO,kBAAxB,GAA6C,MAA7C,EAAmD,GAAnD,CAAN,CAJuD;AAKvD,eAAa,SAAS,IAAT,EAAe,GAAf,CAAb,CALuD;KAAxD;AASC,YAAA,OAAA,GAAU,SAAS,YAAT,CAAV,EACA,QAAA,aAAA,GAAgB,SAAS,IAAT,CAAhB,EACA,QAAA,YAAA,GAAe,SAAS,UAAT,CAAf,EACA,QAAA,UAAA,GAAa,SAAS,kBAAT,CAAb,CDP8B;ACU/B,UAAM,qBAAqB,SAArB,CDVyB;ACWlB,YAAA,eAAA,GAAkB,SAAS,CAAA,mBAAA,GAAsB,kBAAtB,EAAwC,CAAjD,EAAqD,IAArD,CAAlB,CDXkB;CAA5B,CAPH","file":"private/lex/chars.js","sourcesContent":["(function (factory) {\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === 'function' && define.amd) {\n        define([\"require\", \"exports\"], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    function charPred(chars, negate = false) {\n        let src = 'switch(ch) {\\n';\n        for (let i = 0; i < chars.length; i = i + 1)\n            src = `${src}case ${chars.charCodeAt(i)}: `;\n        src = `${src} return ${!negate}\\ndefault: return ${negate}\\n}`;\n        return Function('ch', src);\n    }\n    exports.isDigit = charPred('0123456789'), exports.isDigitBinary = charPred('01'), exports.isDigitOctal = charPred('01234567'), exports.isDigitHex = charPred('0123456789abcdef');\n    const reservedCharacters = '#%^\\\\;,';\n    exports.isNameCharacter = charPred(`\\`&()[]{}|:'\". \\n\\t${reservedCharacters}`, true);\n});\n","import Char from 'typescript-char/Char'\n\nfunction charPred(chars: string, negate: boolean = false): (_: Char) => boolean {\n\tlet src = 'switch(ch) {\\n'\n\tfor (let i = 0; i < chars.length; i = i + 1)\n\t\tsrc = `${src}case ${chars.charCodeAt(i)}: `\n\tsrc = `${src} return ${!negate}\\ndefault: return ${negate}\\n}`\n\treturn <any> Function('ch', src)\n}\n\nexport const\n\tisDigit = charPred('0123456789'),\n\tisDigitBinary = charPred('01'),\n\tisDigitOctal = charPred('01234567'),\n\tisDigitHex = charPred('0123456789abcdef')\n\n// Anything not explicitly reserved is a valid name character.\nconst reservedCharacters = '#%^\\\\;,'\nexport const isNameCharacter = charPred(`\\`&()[]{}|:'\". \\n\\t${reservedCharacters}`, true)\n"],"sourceRoot":"/source/"}