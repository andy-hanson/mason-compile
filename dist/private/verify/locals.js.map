{"version":3,"sources":["private/verify/locals.js","private/verify/locals.ts"],"names":[],"mappings":"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","file":"private/verify/locals.js","sourcesContent":["(function (factory) {\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === 'function' && define.amd) {\n        define([\"require\", \"exports\", '../context', '../util', './context', './verifyLocalDeclare'], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    var context_1 = require('../context');\n    var util_1 = require('../util');\n    var context_2 = require('./context');\n    var verifyLocalDeclare_1 = require('./verifyLocalDeclare');\n    function deleteLocal(localDeclare) {\n        context_2.locals.delete(localDeclare.name);\n    }\n    exports.deleteLocal = deleteLocal;\n    function setLocal(localDeclare) {\n        context_2.locals.set(localDeclare.name, localDeclare);\n    }\n    exports.setLocal = setLocal;\n    function accessLocal(access, name) {\n        const declare = getLocalDeclare(name, access.loc);\n        setDeclareAccessed(declare, access);\n    }\n    exports.accessLocal = accessLocal;\n    function setDeclareAccessed(declare, access) {\n        context_2.results.localDeclareToAccesses.get(declare).push(access);\n    }\n    exports.setDeclareAccessed = setDeclareAccessed;\n    function registerLocal(localDeclare) {\n        context_2.results.localDeclareToAccesses.set(localDeclare, []);\n    }\n    exports.registerLocal = registerLocal;\n    function registerAndPlusLocal(localDeclare, action) {\n        registerLocal(localDeclare);\n        plusLocal(localDeclare, action);\n    }\n    exports.registerAndPlusLocal = registerAndPlusLocal;\n    function plusLocal(addedLocal, action) {\n        const shadowed = context_2.locals.get(addedLocal.name);\n        context_2.locals.set(addedLocal.name, addedLocal);\n        action();\n        if (shadowed === undefined)\n            deleteLocal(addedLocal);\n        else\n            setLocal(shadowed);\n    }\n    exports.plusLocal = plusLocal;\n    function plusLocals(addedLocals, action) {\n        const shadowedLocals = [];\n        for (const _ of addedLocals) {\n            const shadowed = context_2.locals.get(_.name);\n            if (shadowed !== undefined)\n                shadowedLocals.push(shadowed);\n            setLocal(_);\n        }\n        action();\n        addedLocals.forEach(deleteLocal);\n        shadowedLocals.forEach(setLocal);\n    }\n    exports.plusLocals = plusLocals;\n    function verifyAndPlusLocal(addedLocal, action) {\n        verifyLocalDeclare_1.verifyLocalDeclare(addedLocal);\n        plusLocal(addedLocal, action);\n    }\n    exports.verifyAndPlusLocal = verifyAndPlusLocal;\n    function verifyAndPlusLocals(addedLocals, action) {\n        addedLocals.forEach(verifyLocalDeclare_1.verifyLocalDeclare);\n        const names = new Set();\n        for (const { name, loc } of addedLocals) {\n            context_1.check(!names.has(name), loc, _ => _.duplicateLocal(name));\n            names.add(name);\n        }\n        plusLocals(addedLocals, action);\n    }\n    exports.verifyAndPlusLocals = verifyAndPlusLocals;\n    function withBlockLocals(action) {\n        const oldPendingBlockLocals = context_2.pendingBlockLocals;\n        context_2.setPendingBlockLocals([]);\n        plusLocals(oldPendingBlockLocals, action);\n        context_2.setPendingBlockLocals(oldPendingBlockLocals);\n    }\n    exports.withBlockLocals = withBlockLocals;\n    function getLocalDeclare(name, accessLoc) {\n        const declare = context_2.locals.get(name);\n        if (declare === undefined)\n            throw missingLocalFail(accessLoc, name);\n        return declare;\n    }\n    function missingLocalFail(loc, name) {\n        return context_1.fail(loc, _ => _.missingLocal(name));\n    }\n    exports.missingLocalFail = missingLocalFail;\n    function warnUnusedLocals() {\n        for (const [local, accesses] of context_2.results.localDeclareToAccesses)\n            if (util_1.isEmpty(accesses) && local.name !== 'built' && !context_2.okToNotUse.has(local))\n                context_1.warn(local.loc, _ => _.unusedLocal(local.name));\n    }\n    exports.warnUnusedLocals = warnUnusedLocals;\n});\n","import Loc from 'esast/lib/Loc'\nimport Op from 'op/Op'\nimport CompileError from '../../CompileError'\nimport {check, fail, warn} from '../context'\nimport MsAst, {LocalAccess, LocalDeclare} from '../MsAst'\nimport {isEmpty} from '../util'\nimport {locals, okToNotUse, results, pendingBlockLocals, setPendingBlockLocals} from './context'\nimport {verifyLocalDeclare} from './verifyLocalDeclare'\n\nexport function deleteLocal(localDeclare: LocalDeclare): void {\n\tlocals.delete(localDeclare.name)\n}\n\nexport function setLocal(localDeclare: LocalDeclare): void {\n\tlocals.set(localDeclare.name, localDeclare)\n}\n\nexport function accessLocal(access: MsAst, name: string): void {\n\tconst declare = getLocalDeclare(name, access.loc)\n\tsetDeclareAccessed(declare, access)\n}\n\nexport function setDeclareAccessed(declare: LocalDeclare, access: MsAst): void {\n\tresults.localDeclareToAccesses.get(declare).push(access)\n}\n\nexport function registerLocal(localDeclare: LocalDeclare): void {\n\tresults.localDeclareToAccesses.set(localDeclare, [])\n}\n\nexport function registerAndPlusLocal(localDeclare: LocalDeclare, action: () => void): void {\n\tregisterLocal(localDeclare)\n\tplusLocal(localDeclare, action)\n}\n\nexport function plusLocal(addedLocal: LocalDeclare, action: () => void): void {\n\tconst shadowed = locals.get(addedLocal.name)\n\tlocals.set(addedLocal.name, addedLocal)\n\taction()\n\tif (shadowed === undefined)\n\t\tdeleteLocal(addedLocal)\n\telse\n\t\tsetLocal(shadowed)\n}\n\n// Should have verified that addedLocals all have different names.\nexport function plusLocals(addedLocals: Array<LocalDeclare>, action: () => void): void {\n\tconst shadowedLocals: Array<LocalDeclare> = []\n\tfor (const _ of addedLocals) {\n\t\tconst shadowed = locals.get(_.name)\n\t\tif (shadowed !== undefined)\n\t\t\tshadowedLocals.push(shadowed)\n\t\tsetLocal(_)\n\t}\n\n\taction()\n\n\taddedLocals.forEach(deleteLocal)\n\tshadowedLocals.forEach(setLocal)\n}\n\nexport function verifyAndPlusLocal(addedLocal: LocalDeclare, action: () => void): void {\n\tverifyLocalDeclare(addedLocal)\n\tplusLocal(addedLocal, action)\n}\n\nexport function verifyAndPlusLocals(addedLocals: Array<LocalDeclare>, action: () => void): void {\n\taddedLocals.forEach(verifyLocalDeclare)\n\tconst names = new Set()\n\tfor (const {name, loc} of addedLocals) {\n\t\tcheck(!names.has(name), loc, _ => _.duplicateLocal(name))\n\t\tnames.add(name)\n\t}\n\tplusLocals(addedLocals, action)\n}\n\nexport function withBlockLocals(action: () => void): void {\n\tconst oldPendingBlockLocals = pendingBlockLocals\n\tsetPendingBlockLocals([])\n\tplusLocals(oldPendingBlockLocals, action)\n\tsetPendingBlockLocals(oldPendingBlockLocals)\n}\n\nfunction getLocalDeclare(name: string, accessLoc: Loc): LocalDeclare {\n\tconst declare = locals.get(name)\n\tif (declare === undefined)\n\t\tthrow missingLocalFail(accessLoc, name)\n\treturn declare\n}\n\nexport function missingLocalFail(loc: Loc, name: string): CompileError {\n\treturn fail(loc, _ => _.missingLocal(name))\n}\n\nexport function warnUnusedLocals(): void {\n\tfor (const [local, accesses] of results.localDeclareToAccesses)\n\t\tif (isEmpty(accesses) && local.name !== 'built' && !okToNotUse.has(local))\n\t\t\twarn(local.loc, _ => _.unusedLocal(local.name))\n}\n"],"sourceRoot":"/source/"}