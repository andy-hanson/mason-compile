{"version":3,"sources":["private/languages/english.js","private/languages/english.ts"],"names":[],"mappings":"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","file":"private/languages/english.js","sourcesContent":["(function (factory) {\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === 'function' && define.amd) {\n        define([\"require\", \"exports\", '../../CompileError', '../lex/chars', '../token/Keyword', '../util'], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    var CompileError_1 = require('../../CompileError');\n    var chars_1 = require('../lex/chars');\n    var Keyword_1 = require('../token/Keyword');\n    var util_1 = require('../util');\n    const english = {\n        badInterpolation: `${CompileError_1.code('#')} must be followed by ${CompileError_1.code('(')}, ${CompileError_1.code('#')}, or a name.`,\n        badSpacedIndent: (indent) => `Indentation spaces must be a multiple of ${indent}.`,\n        emptyBlock: 'Empty block.',\n        extraSpace: 'Unnecessary space.',\n        mismatchedGroupClose: (actual, expected) => `Trying to close ${actual.prototype.showType()}, but last opened ${expected.showType()}.`,\n        noLeadingSpace: 'Line begins in a space',\n        nonLeadingTab: 'Tab may only be used to indent',\n        noNewlineInInterpolation: 'Quote interpolation cannot contain newline.',\n        reservedChar: (char) => `Reserved character ${chars_1.showChar(char)}.`,\n        suggestSimpleQuote: (name) => `Quoted text could be a simple quote ${CompileError_1.code(`'${name}`)}.`,\n        tooMuchIndent: 'Line is indented more than once.',\n        tooMuchIndentQuote: 'Indented quote must have exactly one more indent than previous line.',\n        trailingDocComment: `Doc comment must go on its own line. Did you mean ${CompileError_1.code('||')}?`,\n        trailingSpace: 'Line ends in a space.',\n        unclosedQuote: 'Unclosed quote.',\n        argsCond: `${Keyword_1.showKeyword(87)} takes exactly 3 arguments.`,\n        argsConditional: (kind) => `${Keyword_1.showKeyword(kind)} with no block takes exactly 2 arguments.`,\n        argsDel: `${Keyword_1.showKeyword(92)} takes only one argument.`,\n        argsTraitDo: `${Keyword_1.showKeyword(149)} takes 2 arguments: implementor and trait.`,\n        assignNothing: 'Assignment to nothing.',\n        asToken: `Expected only 1 token after ${Keyword_1.showKeyword(79)}.`,\n        caseFocusIsImplicit: 'Can\\'t make focus â€” is implicitly provided as first argument.',\n        caseSwitchNeedsParts: `Must have at least 1 non-${Keyword_1.showKeyword(97)} test.`,\n        destructureAllLazy: 'All locals of destructuring assignment must all lazy or all non-lazy.',\n        expectedAfterAssert: `Expected something after ${Keyword_1.showKeyword(80)}.`,\n        expectedAfterColon: `Expected something after ${Keyword_1.showKeyword(89)}.`,\n        expectedBlock: 'Expected an indented block.',\n        expectedExpression: 'Expected an expression, got nothing.',\n        expectedFuncKind: (token) => `Expected function kind, got ${token}.`,\n        expectedImportModuleName: 'Expected a module name to import.',\n        expectedKeyword: (keyword) => `Expected ${Keyword_1.showKeyword(keyword)}`,\n        expectedMethodSplit: 'Expected a function keyword somewhere.',\n        expectedOneLocal: 'Expected only one local declaration.',\n        expectedLocalName: (token) => `Expected a local name, not ${token}.`,\n        expectedName: (token) => `Expected a name, not ${token}`,\n        extraParens: `Unnecessary ${CompileError_1.code('()')}`,\n        implicitFunctionDot: `Function ${chars_1.showChar(46)} is implicit for methods.`,\n        infiniteRange: `Use ${Keyword_1.showKeyword(96)} for infinite ranges.`,\n        invalidImportModule: 'Not a valid module name.',\n        noImportFocus: `${Keyword_1.showKeyword(102)} not allowed as import name.`,\n        noMyOverride: `Method can't be both ${Keyword_1.showKeyword(129)} and ${Keyword_1.showKeyword(136)}.`,\n        noSpecialKeyword: (kind) => `${Keyword_1.showKeyword(kind)} is not allowed here.`,\n        nothingAfterFinally: `Nothing may come after ${Keyword_1.showKeyword(101)}.`,\n        parensOutsideCall: `Use ${CompileError_1.code('(a b)')}, not ${CompileError_1.code('a(b)')}.`,\n        reservedWord: (token) => `Reserved word ${token}.`,\n        switchArgIsImplicit: 'Value to switch on is `_`, the function\\'s implicit argument.',\n        tokenAfterSuper: `Expected ${Keyword_1.showKeyword(94)} or ${CompileError_1.code('()')} after ${Keyword_1.showKeyword(142)}`,\n        todoForPattern: 'TODO: pattern in for',\n        todoLazyField: 'TODO: lazy fields',\n        todoMutateDestructure: 'TODO: LocalDestructureMutate',\n        unexpected: (token) => `Unexpected ${token}.`,\n        unexpectedAfter: (token) => `Did not expect anything after ${token}.`,\n        unexpectedAfterImportDo: `This is an ${Keyword_1.showKeyword(123)}, so you can't import any values.`,\n        unexpectedAfterKind: (kind) => `Did not expect anything between ${Keyword_1.showKeyword(kind)} and block.`,\n        unexpectedAfterMethod: `Did not expect anything between ${Keyword_1.showKeyword(128)} and function.`,\n        ambiguousSK: 'Can\\'t tell if this is a statement. Some parts are statements but others are values.',\n        ambiguousForSK: `Can't tell if ${Keyword_1.showKeyword(103)} is a statement. ` +\n            `Some ${Keyword_1.showKeyword(83)}s have a value, others don't.`,\n        argsLogic: 'Logic expression needs at least 2 arguments.',\n        badRegExp: (source) => {\n            try {\n                new RegExp(source);\n                util_1.assert(false);\n                return '';\n            }\n            catch (err) {\n                return err.message;\n            }\n        },\n        blockNeedsContent: 'Value block must have some content.',\n        breakCantHaveValue: `${Keyword_1.showKeyword(83)} with value needs ${Keyword_1.showKeyword(103)} to be in expression position.`,\n        breakNeedsValue: `${Keyword_1.showKeyword(103)} in expression position must ${Keyword_1.showKeyword(83)} with a value.`,\n        breakValInForBag: `${Keyword_1.showKeyword(83)} in ${Keyword_1.showKeyword(105)} may not have value.`,\n        cantDetermineName: 'Expression must be placed in a position where name can be determined.',\n        cantInferBlockKind: 'Block has mixed bag/map/obj entries â€” can not infer type.',\n        doFuncCantHaveType: 'Function with return type must return something.',\n        duplicateImport: (name, prevLoc) => `${CompileError_1.code(name)} already imported at ${prevLoc}`,\n        duplicateKey: (key) => `Duplicate key ${key}`,\n        duplicateLocal: (name) => `A local ${CompileError_1.code(name)} already exists and can't be shadowed.`,\n        elseRequiresCatch: `${Keyword_1.showKeyword(97)} must come after a ${Keyword_1.showKeyword(86)}.`,\n        exportName: 'Module export must have a constant name.',\n        forAsyncNeedsAsync: `${Keyword_1.showKeyword(104)} as statement must be inside an async function.`,\n        misplacedAwait: `Cannot ${Keyword_1.showKeyword(82)} outside of async function.`,\n        misplacedBreak: 'Not in a loop.',\n        misplacedSpreadDo: `Can not spread here. Did you forget the space after ${Keyword_1.showKeyword(96)}?`,\n        misplacedSpreadVal: `Can only spread in call, ${Keyword_1.showKeyword(131)}, or ${CompileError_1.code('[]')}.`,\n        misplacedYield: (kind) => `Cannot ${Keyword_1.showKeyword(kind)} outside of generator function.`,\n        missingLocal: (name) => `No such local ${CompileError_1.code(name)}.`,\n        noLazyCatch: 'Caught error can not be lazy.',\n        noLazyIteratee: 'Iteration element can not be lazy.',\n        overriddenBuiltin: (name, builtinPath) => `Local ${CompileError_1.code(name)} overrides builtin from ${CompileError_1.code(builtinPath)}.`,\n        statementAsValue: 'This can only be used as a statement, but appears in expression context.',\n        superForbidden: `Class has no superclass, so ${Keyword_1.showKeyword(142)} is not allowed.`,\n        superMustBeStatement: `${Keyword_1.showKeyword(142)} in constructor must appear as a statement.'`,\n        superNeeded: `Constructor must contain ${Keyword_1.showKeyword(142)}`,\n        superNeedsMethod: `${Keyword_1.showKeyword(142)} must be in a method.`,\n        unusedLocal: (name) => `Unused local variable ${CompileError_1.code(name)}.`,\n        uselessExcept: `${Keyword_1.showKeyword(98)} must have ${Keyword_1.showKeyword(86)} or ${Keyword_1.showKeyword(101)}.`,\n        valueAsStatement: 'Value appears in statement context, so it does nothing.'\n    };\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = english;\n});\n","import Loc from 'esast/lib/Loc'\nimport Char from 'typescript-char/Char'\nimport {code} from '../../CompileError'\nimport {showChar} from '../lex/chars'\nimport Token from '../token/Token'\nimport Group, {GroupType} from '../token/Group'\nimport {Keywords, showKeyword as kw} from '../token/Keyword'\nimport {assert} from '../util'\nimport Language from './Language'\n\nconst english: Language = {\n\t// Lex:\n\n\tbadInterpolation:\n\t\t`${code('#')} must be followed by ${code('(')}, ${code('#')}, or a name.`,\n\tbadSpacedIndent: (indent: number): string =>\n\t\t`Indentation spaces must be a multiple of ${indent}.`,\n\temptyBlock:\n\t\t'Empty block.',\n\textraSpace:\n\t\t'Unnecessary space.',\n\tmismatchedGroupClose: (actual: GroupType, expected: Group<Token>): string =>\n\t\t`Trying to close ${actual.prototype.showType()}, but last opened ${expected.showType()}.`,\n\tnoLeadingSpace:\n\t\t'Line begins in a space',\n\tnonLeadingTab:\n\t\t'Tab may only be used to indent',\n\tnoNewlineInInterpolation:\n\t\t'Quote interpolation cannot contain newline.',\n\treservedChar: (char: Char): string =>\n\t\t`Reserved character ${showChar(char)}.`,\n\tsuggestSimpleQuote: (name: string): string =>\n\t\t`Quoted text could be a simple quote ${code(`'${name}`)}.`,\n\ttooMuchIndent:\n\t\t'Line is indented more than once.',\n\ttooMuchIndentQuote:\n\t\t'Indented quote must have exactly one more indent than previous line.',\n\ttrailingDocComment:\n\t\t`Doc comment must go on its own line. Did you mean ${code('||')}?`,\n\ttrailingSpace:\n\t\t'Line ends in a space.',\n\tunclosedQuote:\n\t\t'Unclosed quote.',\n\n\t// Parse:\n\n\targsCond:\n\t\t`${kw(Keywords.Cond)} takes exactly 3 arguments.`,\n\targsConditional: (kind: Keywords): string =>\n\t\t`${kw(kind)} with no block takes exactly 2 arguments.`,\n\targsDel:\n\t\t`${kw(Keywords.Del)} takes only one argument.`,\n\targsTraitDo:\n\t\t`${kw(Keywords.TraitDo)} takes 2 arguments: implementor and trait.`,\n\tassignNothing:\n\t\t'Assignment to nothing.',\n\tasToken:\n\t\t`Expected only 1 token after ${kw(Keywords.As)}.`,\n\tcaseFocusIsImplicit:\n\t\t'Can\\'t make focus â€” is implicitly provided as first argument.',\n\tcaseSwitchNeedsParts:\n\t\t`Must have at least 1 non-${kw(Keywords.Else)} test.`,\n\tdestructureAllLazy:\n\t\t'All locals of destructuring assignment must all lazy or all non-lazy.',\n\texpectedAfterAssert:\n\t\t`Expected something after ${kw(Keywords.Assert)}.`,\n\texpectedAfterColon:\n\t\t`Expected something after ${kw(Keywords.Colon)}.`,\n\texpectedBlock:\n\t\t'Expected an indented block.',\n\texpectedExpression:\n\t\t'Expected an expression, got nothing.',\n\texpectedFuncKind: (token: Token): string =>\n\t\t`Expected function kind, got ${token}.`,\n\texpectedImportModuleName:\n\t\t'Expected a module name to import.',\n\texpectedKeyword: (keyword: Keywords): string =>\n\t\t`Expected ${kw(keyword)}`,\n\texpectedMethodSplit:\n\t\t'Expected a function keyword somewhere.',\n\texpectedOneLocal:\n\t\t'Expected only one local declaration.',\n\texpectedLocalName: (token: Token): string =>\n\t\t`Expected a local name, not ${token}.`,\n\texpectedName: (token: Token): string =>\n\t\t`Expected a name, not ${token}`,\n\textraParens:\n\t\t`Unnecessary ${code('()')}`,\n\timplicitFunctionDot:\n\t\t`Function ${showChar(Char.Period)} is implicit for methods.`,\n\tinfiniteRange:\n\t\t`Use ${kw(Keywords.Dot3)} for infinite ranges.`,\n\tinvalidImportModule:\n\t\t'Not a valid module name.',\n\tnoImportFocus:\n\t\t`${kw(Keywords.Focus)} not allowed as import name.`,\n\tnoMyOverride:\n\t\t`Method can't be both ${kw(Keywords.My)} and ${kw(Keywords.Override)}.`,\n\tnoSpecialKeyword: (kind: Keywords): string =>\n\t\t`${kw(kind)} is not allowed here.`,\n\tnothingAfterFinally:\n\t\t`Nothing may come after ${kw(Keywords.Finally)}.`,\n\tparensOutsideCall:\n\t\t`Use ${code('(a b)')}, not ${code('a(b)')}.`,\n\treservedWord: (token: Token): string =>\n\t\t`Reserved word ${token}.`,\n\tswitchArgIsImplicit:\n\t\t'Value to switch on is `_`, the function\\'s implicit argument.',\n\ttokenAfterSuper:\n\t\t`Expected ${kw(Keywords.Dot)} or ${code('()')} after ${kw(Keywords.Super)}`,\n\ttodoForPattern:\n\t\t'TODO: pattern in for',\n\ttodoLazyField:\n\t\t'TODO: lazy fields',\n\ttodoMutateDestructure:\n\t\t'TODO: LocalDestructureMutate',\n\tunexpected: (token: Token): string =>\n\t\t`Unexpected ${token}.`,\n\tunexpectedAfter: (token: Token): string =>\n\t\t`Did not expect anything after ${token}.`,\n\tunexpectedAfterImportDo:\n\t\t`This is an ${kw(Keywords.ImportDo)}, so you can't import any values.`,\n\tunexpectedAfterKind: (kind: Keywords): string =>\n\t\t`Did not expect anything between ${kw(kind)} and block.`,\n\tunexpectedAfterMethod:\n\t\t`Did not expect anything between ${kw(Keywords.Method)} and function.`,\n\n\t// Verify:\n\n\tambiguousSK:\n\t\t'Can\\'t tell if this is a statement. Some parts are statements but others are values.',\n\tambiguousForSK:\n\t\t`Can't tell if ${kw(Keywords.For)} is a statement. ` +\n\t\t`Some ${kw(Keywords.Break)}s have a value, others don't.`,\n\targsLogic:\n\t\t'Logic expression needs at least 2 arguments.',\n\tbadRegExp: (source: string): string => {\n\t\ttry {\n\t\t\t/* eslint-disable no-new */\n\t\t\tnew RegExp(source)\n\t\t\t// This should only be called for bad regexp...\n\t\t\tassert(false)\n\t\t\treturn ''\n\t\t} catch (err) {\n\t\t\treturn err.message\n\t\t}\n\t},\n\tblockNeedsContent:\n\t\t'Value block must have some content.',\n\tbreakCantHaveValue:\n\t\t`${kw(Keywords.Break)} with value needs ${kw(Keywords.For)} to be in expression position.`,\n\tbreakNeedsValue:\n\t\t`${kw(Keywords.For)} in expression position must ${kw(Keywords.Break)} with a value.`,\n\tbreakValInForBag:\n\t\t`${kw(Keywords.Break)} in ${kw(Keywords.ForBag)} may not have value.`,\n\tcantDetermineName:\n\t\t'Expression must be placed in a position where name can be determined.',\n\tcantInferBlockKind:\n\t\t'Block has mixed bag/map/obj entries â€” can not infer type.',\n\tdoFuncCantHaveType:\n\t\t'Function with return type must return something.',\n\tduplicateImport: (name: string, prevLoc: Loc): string =>\n\t\t`${code(name)} already imported at ${prevLoc}`,\n\tduplicateKey: (key: string): string =>\n\t\t`Duplicate key ${key}`,\n\tduplicateLocal: (name: string): string =>\n\t\t`A local ${code(name)} already exists and can't be shadowed.`,\n\telseRequiresCatch:\n\t\t`${kw(Keywords.Else)} must come after a ${kw(Keywords.Catch)}.`,\n\texportName:\n\t\t'Module export must have a constant name.',\n\tforAsyncNeedsAsync:\n\t\t`${kw(Keywords.ForAsync)} as statement must be inside an async function.`,\n\tmisplacedAwait:\n\t\t`Cannot ${kw(Keywords.Await)} outside of async function.`,\n\tmisplacedBreak:\n\t\t'Not in a loop.',\n\tmisplacedSpreadDo:\n\t\t`Can not spread here. Did you forget the space after ${kw(Keywords.Dot3)}?`,\n\tmisplacedSpreadVal:\n\t\t`Can only spread in call, ${kw(Keywords.New)}, or ${code('[]')}.`,\n\tmisplacedYield: (kind: Keywords): string =>\n\t\t`Cannot ${kw(kind)} outside of generator function.`,\n\tmissingLocal: (name: string): string =>\n\t\t`No such local ${code(name)}.`,\n\tnoLazyCatch:\n\t\t'Caught error can not be lazy.',\n\tnoLazyIteratee:\n\t\t'Iteration element can not be lazy.',\n\toverriddenBuiltin: (name: string, builtinPath: string): string =>\n\t\t`Local ${code(name)} overrides builtin from ${code(builtinPath)}.`,\n\tstatementAsValue:\n\t\t'This can only be used as a statement, but appears in expression context.',\n\tsuperForbidden:\n\t\t`Class has no superclass, so ${kw(Keywords.Super)} is not allowed.`,\n\tsuperMustBeStatement:\n\t\t`${kw(Keywords.Super)} in constructor must appear as a statement.'`,\n\tsuperNeeded:\n\t\t`Constructor must contain ${kw(Keywords.Super)}`,\n\tsuperNeedsMethod:\n\t\t`${kw(Keywords.Super)} must be in a method.`,\n\tunusedLocal: (name: string): string =>\n\t\t`Unused local variable ${code(name)}.`,\n\tuselessExcept:\n\t\t`${kw(Keywords.Except)} must have ${kw(Keywords.Catch)} or ${kw(Keywords.Finally)}.`,\n\tvalueAsStatement:\n\t\t'Value appears in statement context, so it does nothing.'\n}\nexport default english\n"],"sourceRoot":"/source/"}