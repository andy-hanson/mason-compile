if (typeof define !== 'function') var define = require('amdefine')(module);define(['exports', 'esast/dist/ast', 'esast/dist/util', './util'], function (exports, _esastDistAst, _esastDistUtil, _util) {
	'use strict';

	Object.defineProperty(exports, '__esModule', {
		value: true
	});
	const GlobalError = new _esastDistAst.Identifier('Error'),
	      IdArguments = new _esastDistAst.Identifier('arguments'),
	      IdBuilt = new _esastDistAst.Identifier('built'),
	      IdConstructor = new _esastDistAst.Identifier('constructor'),
	      IdDefine = new _esastDistAst.Identifier('define'),
	      IdError = _util._IdError,
	      IdExports = new _esastDistAst.Identifier('exports'),
	      IdExtract = new _esastDistAst.Identifier('_$'),
	      IdFocus = new _esastDistAst.Identifier('_'),
	     
	// TODO:ES6 Shouldn't need, just use arrow functions.
	IdLexicalThis = new _esastDistAst.Identifier('_this'),
	      IdSuper = new _esastDistAst.Identifier('super'),
	      LitEmptyArray = new _esastDistAst.ArrayExpression([]),
	      LitEmptyString = new _esastDistAst.Literal(''),
	      LitNull = new _esastDistAst.Literal(null),
	      LitStrExports = new _esastDistAst.Literal('exports'),
	      LitStrThrow = new _esastDistAst.Literal('An error occurred.'),
	      LitTrue = new _esastDistAst.Literal(true),
	      LitZero = new _esastDistAst.Literal(0),
	      ReturnBuilt = new _esastDistAst.ReturnStatement(IdBuilt),
	      ReturnExports = new _esastDistAst.ReturnStatement(IdExports),
	      ReturnRes = new _esastDistAst.ReturnStatement(new _esastDistAst.Identifier('res')),
	      SwitchCaseNoMatch = new _esastDistAst.SwitchCase(undefined, [(0, _util.throwErrorFromString)('No branch of `switch` matches.')]),
	      SymbolIterator = (0, _esastDistUtil.member)(new _esastDistAst.Identifier('Symbol'), 'iterator'),
	      ThrowAssertFail = (0, _util.throwErrorFromString)('Assertion failed.'),
	      ThrowNoCaseMatch = (0, _util.throwErrorFromString)('No branch of `case` matches.'),
	      UseStrict = new _esastDistAst.ExpressionStatement(new _esastDistAst.Literal('use strict')),
	      ArraySliceCall = (0, _esastDistUtil.member)((0, _esastDistUtil.member)(LitEmptyArray, 'slice'), 'call'),
	     
	// if (typeof define !== 'function') var define = require('amdefine')(module)
	AmdefineHeader = new _esastDistAst.IfStatement(new _esastDistAst.BinaryExpression('!==', new _esastDistAst.UnaryExpression('typeof', IdDefine), new _esastDistAst.Literal('function')), new _esastDistAst.VariableDeclaration('var', [new _esastDistAst.VariableDeclarator(IdDefine, new _esastDistAst.CallExpression(new _esastDistAst.CallExpression(new _esastDistAst.Identifier('require'), [new _esastDistAst.Literal('amdefine')]), [new _esastDistAst.Identifier('module')]))])),
	      DeclareBuiltBag = new _esastDistAst.VariableDeclaration('const', [new _esastDistAst.VariableDeclarator(IdBuilt, LitEmptyArray)]),
	      DeclareBuiltMap = new _esastDistAst.VariableDeclaration('const', [new _esastDistAst.VariableDeclarator(IdBuilt, new _esastDistAst.NewExpression((0, _esastDistUtil.member)(new _esastDistAst.Identifier('global'), 'Map'), []))]),
	      DeclareBuiltObj = new _esastDistAst.VariableDeclaration('const', [new _esastDistAst.VariableDeclarator(IdBuilt, new _esastDistAst.ObjectExpression([]))]),
	      DeclareLexicalThis = new _esastDistAst.VariableDeclaration('const', [new _esastDistAst.VariableDeclarator(IdLexicalThis, new _esastDistAst.ThisExpression())]),
	      ExportsDefault = (0, _esastDistUtil.member)(IdExports, 'default'),
	      ExportsGet = (0, _esastDistUtil.member)(IdExports, '_get');
	exports.GlobalError = GlobalError;
	exports.IdArguments = IdArguments;
	exports.IdBuilt = IdBuilt;
	exports.IdConstructor = IdConstructor;
	exports.IdDefine = IdDefine;
	exports.IdError = IdError;
	exports.IdExports = IdExports;
	exports.IdExtract = IdExtract;
	exports.IdFocus = IdFocus;
	exports.IdLexicalThis = IdLexicalThis;
	exports.IdSuper = IdSuper;
	exports.LitEmptyArray = LitEmptyArray;
	exports.LitEmptyString = LitEmptyString;
	exports.LitNull = LitNull;
	exports.LitStrExports = LitStrExports;
	exports.LitStrThrow = LitStrThrow;
	exports.LitTrue = LitTrue;
	exports.LitZero = LitZero;
	exports.ReturnBuilt = ReturnBuilt;
	exports.ReturnExports = ReturnExports;
	exports.ReturnRes = ReturnRes;
	exports.SwitchCaseNoMatch = SwitchCaseNoMatch;
	exports.SymbolIterator = SymbolIterator;
	exports.ThrowAssertFail = ThrowAssertFail;
	exports.ThrowNoCaseMatch = ThrowNoCaseMatch;
	exports.UseStrict = UseStrict;
	exports.ArraySliceCall = ArraySliceCall;
	exports.AmdefineHeader = AmdefineHeader;
	exports.DeclareBuiltBag = DeclareBuiltBag;
	exports.DeclareBuiltMap = DeclareBuiltMap;
	exports.DeclareBuiltObj = DeclareBuiltObj;
	exports.DeclareLexicalThis = DeclareLexicalThis;
	exports.ExportsDefault = ExportsDefault;
	exports.ExportsGet = ExportsGet;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzdC1jb25zdGFudHMuanMiLCJwcml2YXRlL3RyYW5zcGlsZS9hc3QtY29uc3RhbnRzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7QUNNTyxPQUNOLFdBQVcsR0FBRyxrQkFQaUUsVUFBVSxDQU81RCxPQUFPLENBQUM7T0FDckMsV0FBVyxHQUFHLGtCQVJpRSxVQUFVLENBUTVELFdBQVcsQ0FBQztPQUN6QyxPQUFPLEdBQUcsa0JBVHFFLFVBQVUsQ0FTaEUsT0FBTyxDQUFDO09BQ2pDLGFBQWEsR0FBRyxrQkFWK0QsVUFBVSxDQVUxRCxhQUFhLENBQUM7T0FDN0MsUUFBUSxHQUFHLGtCQVhvRSxVQUFVLENBVy9ELFFBQVEsQ0FBQztPQUNuQyxPQUFPLFNBUkEsUUFBUSxBQVFHO09BQ2xCLFNBQVMsR0FBRyxrQkFibUUsVUFBVSxDQWE5RCxTQUFTLENBQUM7T0FDckMsU0FBUyxHQUFHLGtCQWRtRSxVQUFVLENBYzlELElBQUksQ0FBQztPQUNoQyxPQUFPLEdBQUcsa0JBZnFFLFVBQVUsQ0FlaEUsR0FBRyxDQUFDOzs7QUFFN0IsY0FBYSxHQUFHLGtCQWpCK0QsVUFBVSxDQWlCMUQsT0FBTyxDQUFDO09BQ3ZDLE9BQU8sR0FBRyxrQkFsQnFFLFVBQVUsQ0FrQmhFLE9BQU8sQ0FBQztPQUNqQyxhQUFhLEdBQUcsa0JBbkJULGVBQWUsQ0FtQmMsRUFBRSxDQUFDO09BQ3ZDLGNBQWMsR0FBRyxrQkFuQkosT0FBTyxDQW1CUyxFQUFFLENBQUM7T0FDaEMsT0FBTyxHQUFHLGtCQXBCRyxPQUFPLENBb0JFLElBQUksQ0FBQztPQUMzQixhQUFhLEdBQUcsa0JBckJILE9BQU8sQ0FxQlEsU0FBUyxDQUFDO09BQ3RDLFdBQVcsR0FBRyxrQkF0QkQsT0FBTyxDQXNCTSxvQkFBb0IsQ0FBQztPQUMvQyxPQUFPLEdBQUcsa0JBdkJHLE9BQU8sQ0F1QkUsSUFBSSxDQUFDO09BQzNCLE9BQU8sR0FBRyxrQkF4QkcsT0FBTyxDQXdCRSxDQUFDLENBQUM7T0FDeEIsV0FBVyxHQUFHLGtCQXpCeUMsZUFBZSxDQXlCcEMsT0FBTyxDQUFDO09BQzFDLGFBQWEsR0FBRyxrQkExQnVDLGVBQWUsQ0EwQmxDLFNBQVMsQ0FBQztPQUM5QyxTQUFTLEdBQUcsa0JBM0IyQyxlQUFlLENBMkJ0QyxrQkE1QitDLFVBQVUsQ0E0QjFDLEtBQUssQ0FBQyxDQUFDO09BQ3RELGlCQUFpQixHQUFHLGtCQTVCb0QsVUFBVSxDQTRCL0MsU0FBUyxFQUFFLENBQzdDLFVBMUJnQixvQkFBb0IsRUEwQmYsZ0NBQWdDLENBQUMsQ0FBQyxDQUFDO09BQ3pELGNBQWMsR0FBRyxtQkE1QlYsTUFBTSxFQTRCVyxrQkEvQnVELFVBQVUsQ0ErQmxELFFBQVEsQ0FBQyxFQUFFLFVBQVUsQ0FBQztPQUM3RCxlQUFlLEdBQUcsVUE1QkQsb0JBQW9CLEVBNEJFLG1CQUFtQixDQUFDO09BQzNELGdCQUFnQixHQUFHLFVBN0JGLG9CQUFvQixFQTZCRyw4QkFBOEIsQ0FBQztPQUN2RSxTQUFTLEdBQUcsa0JBbEM4QyxtQkFBbUIsQ0FrQ3pDLGtCQWpDdkIsT0FBTyxDQWlDNEIsWUFBWSxDQUFDLENBQUM7T0FFOUQsY0FBYyxHQUFHLG1CQWpDVixNQUFNLEVBaUNXLG1CQWpDakIsTUFBTSxFQWlDa0IsYUFBYSxFQUFFLE9BQU8sQ0FBQyxFQUFFLE1BQU0sQ0FBQzs7O0FBRS9ELGVBQWMsR0FBRyxrQkFyQ2pCLFdBQVcsQ0FzQ1Ysa0JBdkN1QixnQkFBZ0IsQ0F1Q2xCLEtBQUssRUFDekIsa0JBdENjLGVBQWUsQ0FzQ1QsUUFBUSxFQUFFLFFBQVEsQ0FBQyxFQUN2QyxrQkF4Q1csT0FBTyxDQXdDTixVQUFVLENBQUMsQ0FBQyxFQUN6QixrQkF4Q2dDLG1CQUFtQixDQXdDM0IsS0FBSyxFQUFFLENBQzlCLGtCQXpDb0Qsa0JBQWtCLENBeUMvQyxRQUFRLEVBQUUsa0JBM0NPLGNBQWMsQ0E0Q3JELGtCQTVDdUMsY0FBYyxDQTRDbEMsa0JBNUN5RCxVQUFVLENBNENwRCxTQUFTLENBQUMsRUFBRSxDQUFDLGtCQTNDckMsT0FBTyxDQTJDMEMsVUFBVSxDQUFDLENBQUMsQ0FBQyxFQUN4RSxDQUFDLGtCQTdDMkUsVUFBVSxDQTZDdEUsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO09BQ2xDLGVBQWUsR0FBRyxrQkE1Q2UsbUJBQW1CLENBNENWLE9BQU8sRUFDaEQsQ0FBQyxrQkE3Q29ELGtCQUFrQixDQTZDL0MsT0FBTyxFQUFFLGFBQWEsQ0FBQyxDQUFDLENBQUM7T0FDbEQsZUFBZSxHQUFHLGtCQTlDZSxtQkFBbUIsQ0E4Q1YsT0FBTyxFQUFFLENBQ2xELGtCQS9DcUQsa0JBQWtCLENBK0NoRCxPQUFPLEVBQzdCLGtCQWpEb0IsYUFBYSxDQWlEZixtQkEvQ2IsTUFBTSxFQStDYyxrQkFsRG9ELFVBQVUsQ0FrRC9DLFFBQVEsQ0FBQyxFQUFFLEtBQUssQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztPQUNuRSxlQUFlLEdBQUcsa0JBakRlLG1CQUFtQixDQWlEVixPQUFPLEVBQUUsQ0FDbEQsa0JBbERxRCxrQkFBa0IsQ0FrRGhELE9BQU8sRUFBRSxrQkFuREksZ0JBQWdCLENBbURDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztPQUM1RCxrQkFBa0IsR0FBRyxrQkFuRFksbUJBQW1CLENBbURQLE9BQU8sRUFDbkQsQ0FBQyxrQkFwRG9ELGtCQUFrQixDQW9EL0MsYUFBYSxFQUFFLGtCQXBEeEMsY0FBYyxFQW9EOEMsQ0FBQyxDQUFDLENBQUM7T0FDL0QsY0FBYyxHQUFHLG1CQXBEVixNQUFNLEVBb0RXLFNBQVMsRUFBRSxTQUFTLENBQUM7T0FDN0MsVUFBVSxHQUFHLG1CQXJETixNQUFNLEVBcURPLFNBQVMsRUFBRSxNQUFNLENBQUMsQ0FBQSIsImZpbGUiOiJwcml2YXRlL3RyYW5zcGlsZS9hc3QtY29uc3RhbnRzLmpzIiwic291cmNlc0NvbnRlbnQiOltudWxsLCJpbXBvcnQge0FycmF5RXhwcmVzc2lvbiwgQmluYXJ5RXhwcmVzc2lvbiwgQ2FsbEV4cHJlc3Npb24sIEV4cHJlc3Npb25TdGF0ZW1lbnQsIElkZW50aWZpZXIsXG5cdElmU3RhdGVtZW50LCBMaXRlcmFsLCBOZXdFeHByZXNzaW9uLCBPYmplY3RFeHByZXNzaW9uLCBSZXR1cm5TdGF0ZW1lbnQsIFN3aXRjaENhc2UsXG5cdFRoaXNFeHByZXNzaW9uLCBVbmFyeUV4cHJlc3Npb24sIFZhcmlhYmxlRGVjbGFyYXRpb24sIFZhcmlhYmxlRGVjbGFyYXRvcn0gZnJvbSAnZXNhc3QvZGlzdC9hc3QnXG5pbXBvcnQge21lbWJlcn0gZnJvbSAnZXNhc3QvZGlzdC91dGlsJ1xuaW1wb3J0IHtfSWRFcnJvciwgdGhyb3dFcnJvckZyb21TdHJpbmd9IGZyb20gJy4vdXRpbCdcblxuZXhwb3J0IGNvbnN0XG5cdEdsb2JhbEVycm9yID0gbmV3IElkZW50aWZpZXIoJ0Vycm9yJyksXG5cdElkQXJndW1lbnRzID0gbmV3IElkZW50aWZpZXIoJ2FyZ3VtZW50cycpLFxuXHRJZEJ1aWx0ID0gbmV3IElkZW50aWZpZXIoJ2J1aWx0JyksXG5cdElkQ29uc3RydWN0b3IgPSBuZXcgSWRlbnRpZmllcignY29uc3RydWN0b3InKSxcblx0SWREZWZpbmUgPSBuZXcgSWRlbnRpZmllcignZGVmaW5lJyksXG5cdElkRXJyb3IgPSBfSWRFcnJvcixcblx0SWRFeHBvcnRzID0gbmV3IElkZW50aWZpZXIoJ2V4cG9ydHMnKSxcblx0SWRFeHRyYWN0ID0gbmV3IElkZW50aWZpZXIoJ18kJyksXG5cdElkRm9jdXMgPSBuZXcgSWRlbnRpZmllcignXycpLFxuXHQvLyBUT0RPOkVTNiBTaG91bGRuJ3QgbmVlZCwganVzdCB1c2UgYXJyb3cgZnVuY3Rpb25zLlxuXHRJZExleGljYWxUaGlzID0gbmV3IElkZW50aWZpZXIoJ190aGlzJyksXG5cdElkU3VwZXIgPSBuZXcgSWRlbnRpZmllcignc3VwZXInKSxcblx0TGl0RW1wdHlBcnJheSA9IG5ldyBBcnJheUV4cHJlc3Npb24oW10pLFxuXHRMaXRFbXB0eVN0cmluZyA9IG5ldyBMaXRlcmFsKCcnKSxcblx0TGl0TnVsbCA9IG5ldyBMaXRlcmFsKG51bGwpLFxuXHRMaXRTdHJFeHBvcnRzID0gbmV3IExpdGVyYWwoJ2V4cG9ydHMnKSxcblx0TGl0U3RyVGhyb3cgPSBuZXcgTGl0ZXJhbCgnQW4gZXJyb3Igb2NjdXJyZWQuJyksXG5cdExpdFRydWUgPSBuZXcgTGl0ZXJhbCh0cnVlKSxcblx0TGl0WmVybyA9IG5ldyBMaXRlcmFsKDApLFxuXHRSZXR1cm5CdWlsdCA9IG5ldyBSZXR1cm5TdGF0ZW1lbnQoSWRCdWlsdCksXG5cdFJldHVybkV4cG9ydHMgPSBuZXcgUmV0dXJuU3RhdGVtZW50KElkRXhwb3J0cyksXG5cdFJldHVyblJlcyA9IG5ldyBSZXR1cm5TdGF0ZW1lbnQobmV3IElkZW50aWZpZXIoJ3JlcycpKSxcblx0U3dpdGNoQ2FzZU5vTWF0Y2ggPSBuZXcgU3dpdGNoQ2FzZSh1bmRlZmluZWQsIFtcblx0XHR0aHJvd0Vycm9yRnJvbVN0cmluZygnTm8gYnJhbmNoIG9mIGBzd2l0Y2hgIG1hdGNoZXMuJyldKSxcblx0U3ltYm9sSXRlcmF0b3IgPSBtZW1iZXIobmV3IElkZW50aWZpZXIoJ1N5bWJvbCcpLCAnaXRlcmF0b3InKSxcblx0VGhyb3dBc3NlcnRGYWlsID0gdGhyb3dFcnJvckZyb21TdHJpbmcoJ0Fzc2VydGlvbiBmYWlsZWQuJyksXG5cdFRocm93Tm9DYXNlTWF0Y2ggPSB0aHJvd0Vycm9yRnJvbVN0cmluZygnTm8gYnJhbmNoIG9mIGBjYXNlYCBtYXRjaGVzLicpLFxuXHRVc2VTdHJpY3QgPSBuZXcgRXhwcmVzc2lvblN0YXRlbWVudChuZXcgTGl0ZXJhbCgndXNlIHN0cmljdCcpKSxcblxuXHRBcnJheVNsaWNlQ2FsbCA9IG1lbWJlcihtZW1iZXIoTGl0RW1wdHlBcnJheSwgJ3NsaWNlJyksICdjYWxsJyksXG5cdC8vIGlmICh0eXBlb2YgZGVmaW5lICE9PSAnZnVuY3Rpb24nKSB2YXIgZGVmaW5lID0gcmVxdWlyZSgnYW1kZWZpbmUnKShtb2R1bGUpXG5cdEFtZGVmaW5lSGVhZGVyID0gbmV3IElmU3RhdGVtZW50KFxuXHRcdG5ldyBCaW5hcnlFeHByZXNzaW9uKCchPT0nLFxuXHRcdFx0bmV3IFVuYXJ5RXhwcmVzc2lvbigndHlwZW9mJywgSWREZWZpbmUpLFxuXHRcdFx0bmV3IExpdGVyYWwoJ2Z1bmN0aW9uJykpLFxuXHRcdG5ldyBWYXJpYWJsZURlY2xhcmF0aW9uKCd2YXInLCBbXG5cdFx0XHRuZXcgVmFyaWFibGVEZWNsYXJhdG9yKElkRGVmaW5lLCBuZXcgQ2FsbEV4cHJlc3Npb24oXG5cdFx0XHRcdG5ldyBDYWxsRXhwcmVzc2lvbihuZXcgSWRlbnRpZmllcigncmVxdWlyZScpLCBbbmV3IExpdGVyYWwoJ2FtZGVmaW5lJyldKSxcblx0XHRcdFx0W25ldyBJZGVudGlmaWVyKCdtb2R1bGUnKV0pKV0pKSxcblx0RGVjbGFyZUJ1aWx0QmFnID0gbmV3IFZhcmlhYmxlRGVjbGFyYXRpb24oJ2NvbnN0Jyxcblx0XHRbbmV3IFZhcmlhYmxlRGVjbGFyYXRvcihJZEJ1aWx0LCBMaXRFbXB0eUFycmF5KV0pLFxuXHREZWNsYXJlQnVpbHRNYXAgPSBuZXcgVmFyaWFibGVEZWNsYXJhdGlvbignY29uc3QnLCBbXG5cdFx0bmV3IFZhcmlhYmxlRGVjbGFyYXRvcihJZEJ1aWx0LFxuXHRcdFx0bmV3IE5ld0V4cHJlc3Npb24obWVtYmVyKG5ldyBJZGVudGlmaWVyKCdnbG9iYWwnKSwgJ01hcCcpLCBbXSkpXSksXG5cdERlY2xhcmVCdWlsdE9iaiA9IG5ldyBWYXJpYWJsZURlY2xhcmF0aW9uKCdjb25zdCcsIFtcblx0XHRuZXcgVmFyaWFibGVEZWNsYXJhdG9yKElkQnVpbHQsIG5ldyBPYmplY3RFeHByZXNzaW9uKFtdKSldKSxcblx0RGVjbGFyZUxleGljYWxUaGlzID0gbmV3IFZhcmlhYmxlRGVjbGFyYXRpb24oJ2NvbnN0Jyxcblx0XHRbbmV3IFZhcmlhYmxlRGVjbGFyYXRvcihJZExleGljYWxUaGlzLCBuZXcgVGhpc0V4cHJlc3Npb24oKSldKSxcblx0RXhwb3J0c0RlZmF1bHQgPSBtZW1iZXIoSWRFeHBvcnRzLCAnZGVmYXVsdCcpLFxuXHRFeHBvcnRzR2V0ID0gbWVtYmVyKElkRXhwb3J0cywgJ19nZXQnKVxuIl0sInNvdXJjZVJvb3QiOiIvc3JjIn0=
