{"version":3,"sources":["private/lex/chars.js","private/lex/chars.ts"],"names":[],"mappings":"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","file":"private/lex/chars.js","sourcesContent":["(function (factory) {\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === 'function' && define.amd) {\n        define([\"require\", \"exports\", '../../CompileError'], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    var CompileError_1 = require('../../CompileError');\n    (function (Char) {\n        Char[Char[\"Ampersand\"] = c('&')] = \"Ampersand\";\n        Char[Char[\"Backslash\"] = c('\\\\')] = \"Backslash\";\n        Char[Char[\"Backtick\"] = c('`')] = \"Backtick\";\n        Char[Char[\"Bang\"] = c('!')] = \"Bang\";\n        Char[Char[\"Bar\"] = c('|')] = \"Bar\";\n        Char[Char[\"Caret\"] = c('^')] = \"Caret\";\n        Char[Char[\"Cash\"] = c('$')] = \"Cash\";\n        Char[Char[\"CloseBrace\"] = c('}')] = \"CloseBrace\";\n        Char[Char[\"CloseBracket\"] = c(']')] = \"CloseBracket\";\n        Char[Char[\"CloseParenthesis\"] = c(')')] = \"CloseParenthesis\";\n        Char[Char[\"Colon\"] = c(':')] = \"Colon\";\n        Char[Char[\"Comma\"] = c('),')] = \"Comma\";\n        Char[Char[\"Dot\"] = c('.')] = \"Dot\";\n        Char[Char[\"Equal\"] = c('=')] = \"Equal\";\n        Char[Char[\"G\"] = c('g')] = \"G\";\n        Char[Char[\"Hash\"] = c('#')] = \"Hash\";\n        Char[Char[\"Hyphen\"] = c('-')] = \"Hyphen\";\n        Char[Char[\"I\"] = c('i')] = \"I\";\n        Char[Char[\"LetterB\"] = c('b')] = \"LetterB\";\n        Char[Char[\"LetterO\"] = c('o')] = \"LetterO\";\n        Char[Char[\"LetterX\"] = c('x')] = \"LetterX\";\n        Char[Char[\"M\"] = c('m')] = \"M\";\n        Char[Char[\"N0\"] = c('0')] = \"N0\";\n        Char[Char[\"N1\"] = c('1')] = \"N1\";\n        Char[Char[\"N2\"] = c('2')] = \"N2\";\n        Char[Char[\"N3\"] = c('3')] = \"N3\";\n        Char[Char[\"N4\"] = c('4')] = \"N4\";\n        Char[Char[\"N5\"] = c('5')] = \"N5\";\n        Char[Char[\"N6\"] = c('6')] = \"N6\";\n        Char[Char[\"N7\"] = c('7')] = \"N7\";\n        Char[Char[\"N8\"] = c('8')] = \"N8\";\n        Char[Char[\"N9\"] = c('9')] = \"N9\";\n        Char[Char[\"Newline\"] = c('\\n')] = \"Newline\";\n        Char[Char[\"Null\"] = c('\\0')] = \"Null\";\n        Char[Char[\"OpenBrace\"] = c('{')] = \"OpenBrace\";\n        Char[Char[\"OpenBracket\"] = c('[')] = \"OpenBracket\";\n        Char[Char[\"OpenParenthesis\"] = c('(')] = \"OpenParenthesis\";\n        Char[Char[\"Percent\"] = c('%')] = \"Percent\";\n        Char[Char[\"Quote\"] = c('\"')] = \"Quote\";\n        Char[Char[\"Semicolon\"] = c(';')] = \"Semicolon\";\n        Char[Char[\"Space\"] = c(' ')] = \"Space\";\n        Char[Char[\"Star\"] = c('*')] = \"Star\";\n        Char[Char[\"Tab\"] = c('\\t')] = \"Tab\";\n        Char[Char[\"Tick\"] = c('\\'')] = \"Tick\";\n        Char[Char[\"Tilde\"] = c('~')] = \"Tilde\";\n        Char[Char[\"Y\"] = c('y')] = \"Y\";\n    })(exports.Char || (exports.Char = {}));\n    var Char = exports.Char;\n    function c(char) {\n        return char.charCodeAt(0);\n    }\n    function showChar(char) {\n        return CompileError_1.code(String.fromCharCode(char));\n    }\n    exports.showChar = showChar;\n    function charPred(chars, negate = false) {\n        let src = 'switch(ch) {\\n';\n        for (let i = 0; i < chars.length; i = i + 1)\n            src = `${src}case ${chars.charCodeAt(i)}: `;\n        src = `${src} return ${!negate}\\ndefault: return ${negate}\\n}`;\n        return Function('ch', src);\n    }\n    exports.isDigit = charPred('0123456789'), exports.isDigitBinary = charPred('01'), exports.isDigitOctal = charPred('01234567'), exports.isDigitHex = charPred('0123456789abcdef');\n    const reservedCharacters = '#%^\\\\;,';\n    exports.isNameCharacter = charPred(`\\`&()[]{}|:'\". \\n\\t${reservedCharacters}`, true);\n});\n","import {code} from '../../CompileError'\n\nexport enum Char {\n\tAmpersand = c('&'),\n\tBackslash = c('\\\\'),\n\tBacktick = c('`'),\n\tBang = c('!'),\n\tBar = c('|'),\n\tCaret = c('^'),\n\tCash = c('$'),\n\tCloseBrace = c('}'),\n\tCloseBracket = c(']'),\n\tCloseParenthesis = c(')'),\n\tColon = c(':'),\n\tComma = c('),'),\n\tDot = c('.'),\n\tEqual = c('='),\n\tG = c('g'),\n\tHash = c('#'),\n\tHyphen = c('-'),\n\tI = c('i'),\n\tLetterB = c('b'),\n\tLetterO = c('o'),\n\tLetterX = c('x'),\n\tM = c('m'),\n\tN0 = c('0'),\n\tN1 = c('1'),\n\tN2 = c('2'),\n\tN3 = c('3'),\n\tN4 = c('4'),\n\tN5 = c('5'),\n\tN6 = c('6'),\n\tN7 = c('7'),\n\tN8 = c('8'),\n\tN9 = c('9'),\n\tNewline = c('\\n'),\n\tNull = c('\\0'),\n\tOpenBrace = c('{'),\n\tOpenBracket = c('['),\n\tOpenParenthesis = c('('),\n\tPercent = c('%'),\n\tQuote = c('\"'),\n\tSemicolon = c(';'),\n\tSpace = c(' '),\n\tStar = c('*'),\n\tTab = c('\\t'),\n\tTick = c('\\''),\n\tTilde = c('~'),\n\tY = c('y')\n}\nfunction c(char: string): number {\n\treturn char.charCodeAt(0)\n}\n\nexport function showChar(char: Char) {\n\treturn code(String.fromCharCode(char))\n}\n\nfunction charPred(chars: string, negate: boolean = false): (_: Char) => boolean {\n\tlet src = 'switch(ch) {\\n'\n\tfor (let i = 0; i < chars.length; i = i + 1)\n\t\tsrc = `${src}case ${chars.charCodeAt(i)}: `\n\tsrc = `${src} return ${!negate}\\ndefault: return ${negate}\\n}`\n\treturn <any> Function('ch', src)\n}\n\nexport const\n\tisDigit = charPred('0123456789'),\n\tisDigitBinary = charPred('01'),\n\tisDigitOctal = charPred('01234567'),\n\tisDigitHex = charPred('0123456789abcdef')\n\n// Anything not explicitly reserved is a valid name character.\nconst reservedCharacters = '#%^\\\\;,'\nexport const isNameCharacter = charPred(`\\`&()[]{}|:'\". \\n\\t${reservedCharacters}`, true)\n"],"sourceRoot":"/source/"}