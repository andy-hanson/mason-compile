{"version":3,"sources":["private/ast/errors.js","private/ast/errors.ts"],"names":[],"mappings":"AAAA,CAAC,UAAU,OAAO,EAAE;AAChB,QAAI,OAAO,MAAM,KAAK,QAAQ,IAAI,OAAO,MAAM,CAAC,OAAO,KAAK,QAAQ,EAAE;AAClE,YAAI,CAAC,GAAG,OAAO,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC,AAAC,IAAI,CAAC,KAAK,SAAS,EAAE,MAAM,CAAC,OAAO,GAAG,CAAC,CAAC;KAC9E,MACI,IAAI,OAAO,MAAM,KAAK,UAAU,IAAI,MAAM,CAAC,GAAG,EAAE;AACjD,cAAM,CAAC,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,eAAe,EAAE,UAAU,CAAC,EAAE,OAAO,CAAC,CAAC;KACnF;CACJ,CAAA,CAAE,UAAU,OAAO,EAAE,OAAO,EAAE;AAC3B,gBAAY,CAAC;;ACNjB,QAAA,MAAA,GAAA,OAAA,CAA0B,SAC1B,CAAC,CADkC;AAEnC,QAAA,aAAA,GAAA,OAAA,CAAmC,eACnC,CAAC,CADiD;AAElD,QAAA,OAAA,GAAA,OAAA,CAAkB,UAGlB,CAAC,CAH2B;AAG5B,UAAA,KAAA,SAA2B,aAAA,CAAA,MAAM,CAAA;AAChC,mBAAA,CAAY,GAAQ,EAAS,QAAiB,EAAA;AAC7C,iBAAA,CAAM,GAAG,CAAC,CAAA;AADkB,gBAAA,CAAA,QAAQ,GAAR,QAAQ,CAAS;SAE7C;KACD;AAJY,WAAA,CAAA,KAAK,GAAA,KAIjB,CAAA;AAGD,UAAA,MAAA,SAA4B,aAAA,CAAA,MAAM,CAAA;AACjC,mBAAA,CAAY,GAAQ,EAEZ,MAAe,EAEf,SAAc,EACd,QAAiB,EAAA;AACxB,iBAAA,CAAM,GAAG,CAAC,CAAA;AAJH,gBAAA,CAAA,MAAM,GAAN,MAAM,CAAS;AAEf,gBAAA,CAAA,SAAS,GAAT,SAAS,CAAK;AACd,gBAAA,CAAA,QAAQ,GAAR,QAAQ,CAAS;SAExB;KACD;AATY,WAAA,CAAA,MAAM,GAAA,MASlB,CAAA;AAaD,UAAA,MAAA,SAA4B,aAAA,CAAA,OAAO,CAAA;AAGlC,mBAAA,CACC,GAAQ,EACR,IAAW,EAEJ,YAA0B,EAE1B,UAAqB,EACrB,MAAiB,EACjB,SAAoB,EAAA;AAC3B,iBAAA,CAAM,GAAG,CAAC,CAAA;AALH,gBAAA,CAAA,YAAY,GAAZ,YAAY,CAAc;AAE1B,gBAAA,CAAA,UAAU,GAAV,UAAU,CAAW;AACrB,gBAAA,CAAA,MAAM,GAAN,MAAM,CAAW;AACjB,gBAAA,CAAA,SAAS,GAAT,SAAS,CAAW;AAE3B,gBAAI,CAAC,GAAG,GAAG,IAAI,CAAA;SACf;AAED,YAAI,UAAU,GAAA;AACb,mBAAO,MAAA,CAAA,GAAG,CAAC,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,UAAU,CAAC,CAAA;SAC9C;KACD;AAnBY,WAAA,CAAA,MAAM,GAAA,MAmBlB,CAAA;AAMD,UAAA,KAAA,SAA2B,OAAA,CAAA,OAAK,CAAA;AAC/B,mBAAA,CAAY,GAAQ,EAAS,MAAoB,EAAS,KAAY,EAAA;AACrE,iBAAA,CAAM,GAAG,CAAC,CAAA;AADkB,gBAAA,CAAA,MAAM,GAAN,MAAM,CAAc;AAAS,gBAAA,CAAA,KAAK,GAAL,KAAK,CAAO;AAErE,kBAAA,CAAA,MAAM,CAAC,CAAE,MAAM,CAAC,MAAM,AAAC,CAAC,CAAA;SACxB;KACD;AALY,WAAA,CAAA,KAAK,GAAA,KAKjB,CAAA;CDjBA,CAAC,CAAC","file":"private/ast/errors.js","sourcesContent":["(function (factory) {\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === 'function' && define.amd) {\n        define([\"require\", \"exports\", '../util', './LineContent', '../MsAst'], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    var util_1 = require('../util');\n    var LineContent_1 = require('./LineContent');\n    var MsAst_1 = require('../MsAst');\n    class Throw extends LineContent_1.DoOnly {\n        constructor(loc, opThrown) {\n            super(loc);\n            this.opThrown = opThrown;\n        }\n    }\n    exports.Throw = Throw;\n    class Assert extends LineContent_1.DoOnly {\n        constructor(loc, negate, condition, opThrown) {\n            super(loc);\n            this.negate = negate;\n            this.condition = condition;\n            this.opThrown = opThrown;\n        }\n    }\n    exports.Assert = Assert;\n    class Except extends LineContent_1.ValOrDo {\n        constructor(loc, _try, typedCatches, opCatchAll, opElse, opFinally) {\n            super(loc);\n            this.typedCatches = typedCatches;\n            this.opCatchAll = opCatchAll;\n            this.opElse = opElse;\n            this.opFinally = opFinally;\n            this.try = _try;\n        }\n        get allCatches() {\n            return util_1.cat(this.typedCatches, this.opCatchAll);\n        }\n    }\n    exports.Except = Except;\n    class Catch extends MsAst_1.default {\n        constructor(loc, caught, block) {\n            super(loc);\n            this.caught = caught;\n            this.block = block;\n            util_1.assert(!(caught.isLazy));\n        }\n    }\n    exports.Catch = Catch;\n});\n","import Loc from 'esast/lib/Loc'\nimport Op from 'op/Op'\nimport {assert, cat} from '../util'\nimport Block from './Block'\nimport {DoOnly, Val, ValOrDo} from './LineContent'\nimport {LocalDeclare} from './locals'\nimport MsAst from '../MsAst'\n\n/** `throw! {opThrown}` */\nexport class Throw extends DoOnly {\n\tconstructor(loc: Loc, public opThrown: Op<Val>) {\n\t\tsuper(loc)\n\t}\n}\n\n/** `assert!/forbid! {condition} throw! {opThrown}` */\nexport class Assert extends DoOnly {\n\tconstructor(loc: Loc,\n\t\t/** If true, this is a `forbid!`. */\n\t\tpublic negate: boolean,\n\t\t/** Compiled specially if a [[Call]]. */\n\t\tpublic condition: Val,\n\t\tpublic opThrown: Op<Val>) {\n\t\tsuper(loc)\n\t}\n}\n\n/**\n```except\n\ttry\n\t\t{try}\n\tcatch\n\t\t{opCatch}\n\telse\n\t\t{opElse}\n\tfinally\n\t\t{opFinally}```\n*/\nexport class Except extends ValOrDo {\n\ttry: Block\n\n\tconstructor(\n\t\tloc: Loc,\n\t\t_try: Block,\n\t\t/** These all have types for their LocalDeclares. */\n\t\tpublic typedCatches: Array<Catch>,\n\t\t/** opCatchAll.caught should have no type. */\n\t\tpublic opCatchAll: Op<Catch>,\n\t\tpublic opElse: Op<Block>,\n\t\tpublic opFinally: Op<Block>) {\n\t\tsuper(loc)\n\t\tthis.try = _try\n\t}\n\n\tget allCatches(): Array<Catch> {\n\t\treturn cat(this.typedCatches, this.opCatchAll)\n\t}\n}\n\n/**\n```catch {caught}\n\t{block}```\n*/\nexport class Catch extends MsAst {\n\tconstructor(loc: Loc, public caught: LocalDeclare, public block: Block) {\n\t\tsuper(loc)\n\t\tassert(!(caught.isLazy))\n\t}\n}\n"],"sourceRoot":"/source/"}