{"version":3,"sources":["private/parse/parseMethodSplit.js"],"names":[],"mappings":"AAAA,CAAC,UAAU,OAAO,EAAE;AAChB,QAAI,OAAO,MAAM,KAAK,QAAQ,IAAI,OAAO,MAAM,CAAC,OAAO,KAAK,QAAQ,EAAE;AAClE,YAAI,CAAC,GAAG,OAAO,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC,AAAC,IAAI,CAAC,KAAK,SAAS,EAAE,MAAM,CAAC,OAAO,GAAG,CAAC,CAAC;KAC9E,MACI,IAAI,OAAO,MAAM,KAAK,UAAU,IAAI,MAAM,CAAC,GAAG,EAAE;AACjD,cAAM,CAAC,CAAC,SAAS,EAAE,SAAS,EAAE,OAAO,EAAE,YAAY,EAAE,UAAU,CAAC,EAAE,OAAO,CAAC,CAAC;KAC9E;CACJ,CAAA,CAAE,UAAU,OAAO,EAAE,OAAO,EAAE;AAC3B,gBAAY,CAAC;;AACb,QAAI,IAAI,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC;AAC5B,QAAI,SAAS,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC;AACtC,QAAI,OAAO,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC;AAClC,aAAS,gBAAgB,CAAC,MAAM,EAAE;AAC9B,eAAO,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,IAAI,OAAO,CAAC,YAAY,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC,EAAE;gBAAG,MAAM,QAAN,MAAM;gBAAE,EAAE,QAAF,EAAE;gBAAE,KAAK,QAAL,KAAK;mBAAQ,EAAE,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,aAAa,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,KAAK,EAAE;SAAC,EAAE,MAAM;AAAE,kBAAM,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,CAAC,mBAAmB,CAAC,CAAC;SAAE,CAAC,CAAC;KACtP;AACD,UAAM,CAAC,cAAc,CAAC,OAAO,EAAE,YAAY,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;AAC9D,WAAO,CAAC,OAAO,GAAG,gBAAgB,CAAC;AACnC,aAAS,aAAa,CAAC,YAAY,EAAE;AACjC,gBAAQ,YAAY,CAAC,IAAI;AACrB,iBAAK,EAAE;AACH,uBAAO,EAAE,CAAC;AAAA,AACd,iBAAK,EAAE;AACH,uBAAO,EAAE,CAAC;AAAA,AACd,iBAAK,EAAE;AACH,uBAAO,EAAE,CAAC;AAAA,AACd,iBAAK,EAAE;AACH,uBAAO,EAAE,CAAC;AAAA,AACd,iBAAK,EAAE;AACH,uBAAO,EAAE,CAAC;AAAA,AACd,iBAAK,EAAE;AACH,uBAAO,EAAE,CAAC;AAAA,AACd,iBAAK,EAAE,CAAC;AACR,iBAAK,EAAE,CAAC;AACR,iBAAK,EAAE,CAAC;AACR,iBAAK,EAAE,CAAC;AACR,iBAAK,EAAE,CAAC;AACR,iBAAK,EAAE;AACH,sBAAM,SAAS,CAAC,IAAI,CAAC,YAAY,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,CAAC,mBAAmB,CAAC,CAAC;AAAA,AACvE;AACI,sBAAM,SAAS,CAAC,IAAI,CAAC,YAAY,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,CAAC,gBAAgB,CAAC,YAAY,CAAC,CAAC,CAAC;AAAA,SACrF;KACJ;AACD,UAAM,WAAW,GAAG,IAAI,GAAG,CAAC,CACxB,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EACd,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EACd,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CACjB,CAAC,CAAC;CACN,CAAC,CAAC","file":"private/parse/parseMethodSplit.js","sourcesContent":["(function (factory) {\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === 'function' && define.amd) {\n        define([\"require\", \"exports\", 'op/Op', '../context', '../Token'], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    var Op_1 = require('op/Op');\n    var context_1 = require('../context');\n    var Token_1 = require('../Token');\n    function parseMethodSplit(tokens) {\n        return Op_1.caseOp(tokens.opSplitOnce(_ => Token_1.isAnyKeyword(funKeywords, _)), ({ before, at, after }) => ({ before: before, kind: methodFunKind(at), after: after }), () => { throw context_1.fail(tokens.loc, _ => _.expectedMethodSplit); });\n    }\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = parseMethodSplit;\n    function methodFunKind(funKindToken) {\n        switch (funKindToken.kind) {\n            case 65:\n                return 67;\n            case 66:\n                return 68;\n            case 69:\n                return 71;\n            case 70:\n                return 72;\n            case 73:\n                return 75;\n            case 74:\n                return 76;\n            case 67:\n            case 68:\n            case 71:\n            case 72:\n            case 75:\n            case 76:\n                throw context_1.fail(funKindToken.loc, _ => _.implicitFunctionDot);\n            default:\n                throw context_1.fail(funKindToken.loc, _ => _.expectedFuncKind(funKindToken));\n        }\n    }\n    const funKeywords = new Set([\n        65, 66, 67, 68,\n        69, 70, 71, 72,\n        73, 74, 75, 76\n    ]);\n});\n"],"sourceRoot":"/source/"}