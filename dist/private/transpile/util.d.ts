import { VariableDeclarator, VariableDeclarationLet } from 'esast/lib/Declaration';
import Expression, { MemberExpression } from 'esast/lib/Expression';
import { ArrowFunctionExpression } from 'esast/lib/Function';
import Identifier from 'esast/lib/Identifier';
import Node from 'esast/lib/Node';
import Statement, { BlockStatement, ThrowStatement } from 'esast/lib/Statement';
import Op from 'op/Op';
import Block from '../ast/Block';
import { Do, Val } from '../ast/LineContent';
import { LocalDeclare } from '../ast/locals';
import MemberName from '../ast/MemberName';
import MsAst from '../ast/MsAst';
export declare function loc<A extends Node>(expr: MsAst, node: A): A;
export declare function tLines(exprs: Array<Do>): Array<Statement>;
export declare function accessLocalDeclare(localDeclare: LocalDeclare): Expression;
export declare function makeDeclare(localDeclare: LocalDeclare, val: Expression): VariableDeclarationLet;
export declare function idForDeclareCached(localDeclare: LocalDeclare): Identifier;
export declare function opTypeCheckForLocalDeclare(localDeclare: LocalDeclare): Op<Statement>;
export declare function makeDeclarator(assignee: LocalDeclare, value: Expression, valueIsAlreadyLazy: boolean): VariableDeclarator;
export declare function maybeWrapInCheckInstance(ast: Expression, opType: Op<Val>, name: string): Expression;
export declare function doThrow(thrown: Val): ThrowStatement;
export declare function memberStringOrVal(object: Expression, memberName: MemberName): MemberExpression;
export declare function lazyWrap(value: Expression): Expression;
export declare function msCall(name: string, ...args: Array<Expression>): Expression;
export declare function msMember(name: string): Expression;
export declare function makeDestructureDeclarators(assignees: Array<LocalDeclare>, isLazy: boolean, value: Expression, isModule: boolean): Array<VariableDeclarator>;
export declare function blockWrap(block: BlockStatement): Expression;
export declare function blockWrapStatement(statement: Statement): Expression;
export declare function callFocusFun(value: Expression, calledOn: Expression): Expression;
export declare function blockWrapIfBlock(value: Block | Val): Expression;
export declare function focusFun(value: Expression): ArrowFunctionExpression;
export declare function plainLet(identifier: Identifier, value: Expression): VariableDeclarationLet;
