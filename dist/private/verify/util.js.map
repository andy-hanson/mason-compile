{"version":3,"sources":["private/verify/util.js","private/verify/util.ts"],"names":[],"mappings":"AAAA,CAAC,UAAU,OAAO,EAAE;AAChB,QAAI,OAAO,MAAM,KAAK,QAAQ,IAAI,OAAO,MAAM,CAAC,OAAO,KAAK,QAAQ,EAAE;AAClE,YAAI,CAAC,GAAG,OAAO,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC,AAAC,IAAI,CAAC,KAAK,SAAS,EAAE,MAAM,CAAC,OAAO,GAAG,CAAC,CAAC;KAC9E,MACI,IAAI,OAAO,MAAM,KAAK,UAAU,IAAI,MAAM,CAAC,GAAG,EAAE;AACjD,cAAM,CAAC,CAAC,SAAS,EAAE,SAAS,EAAE,aAAa,EAAE,YAAY,EAAE,WAAW,EAAE,aAAa,CAAC,EAAE,OAAO,CAAC,CAAC;KACpG;CACJ,CAAA,CAAE,UAAU,OAAO,EAAE,OAAO,EAAE;AAC3B,gBAAY,CAAC;;ACPjB,QAAA,MAAA,GAAA,OAAA,CAAqB,aACrB,CAAC,CADiC;AAMlC,QAAA,SAAA,GAAA,OAAA,CAAoB,YACpB,CAAC,CAD+B;AAEhC,QAAA,SAAA,GAAA,OAAA,CAAwC,WACxC,CAAC,CADkD;AAEnD,QAAA,WAAA,GAAA,OAAA,CAAsB,aAGtB,CAAC,CAHkC;AAGnC,aAAA,eAAA,CAAgC,YAA0B,EAAA;AACzD,iBAAA,CAAA,UAAU,CAAC,GAAG,CAAC,YAAY,CAAC,CAAA;KAC5B;AAFe,WAAA,CAAA,eAAe,GAAA,eAE9B,CAAA;AAMD,aAAA,sBAAA,CAAuC,YAA0B,EAAA;AAChE,YAAI,YAAY,CAAC,IAAI,KAAK,GAAG,EAC5B,eAAe,CAAC,YAAY,CAAC,CAAA;KAC9B;AAHe,WAAA,CAAA,sBAAsB,GAAA,sBAGrC,CAAA;AAGD,aAAA,qBAAA,CAAsC,IAAyB,EAAA;AAC9D,aAAK,MAAM,CAAC,IAAI,IAAI,EAGnB,IAAI,CAAC,YAAY,MAAA,CAAA,MAAM,EACtB,YAAY,CAAC,CAAC,CAAC,CAAA,KAEf,WAAA,CAAA,OAAS,CAAC,CAAC,CAAC,CAAA;KACd;AARe,WAAA,CAAA,qBAAqB,GAAA,qBAQpC,CAAA;AAED,aAAA,YAAA,OAAwC;YAAjB,QAAQ,QAAR,QAAQ;;AAE9B,mBAAA,CAAA,OAAS,CAAC,QAAQ,CAAC,CAAA;KACnB;AAID,aAAA,gBAAA,CAAiC,CAAa,EAAA;AAC7C,YAAI,OAAO,CAAC,KAAK,QAAQ,EACxB,WAAA,CAAA,OAAS,CAAC,CAAC,CAAC,CAAA;KACb;AAHe,WAAA,CAAA,gBAAgB,GAAA,gBAG/B,CAAA;AAED,aAAA,OAAA,CAAwB,IAAW,EAAA;AAClC,iBAAA,CAAA,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,EAAE,SAAA,CAAA,IAAI,CAAC,CAAA;KAC7B;AAFe,WAAA,CAAA,OAAO,GAAA,OAEtB,CAAA;AAED,aAAA,aAAA,CAA8B,YAA0B,EAAE,YAAqC,EAAA;AAC9F,iBAAA,CAAA,KAAK,CAAC,CAAC,YAAY,CAAC,MAAM,EAAE,YAAY,CAAC,GAAG,EAAE,YAAY,CAAC,CAAA;KAC3D;AAFe,WAAA,CAAA,aAAa,GAAA,aAE5B,CAAA;CDVA,CAAC,CAAC","file":"private/verify/util.js","sourcesContent":["(function (factory) {\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === 'function' && define.amd) {\n        define([\"require\", \"exports\", '../ast/Call', '../context', './context', './verifyVal'], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    var Call_1 = require('../ast/Call');\n    var context_1 = require('../context');\n    var context_2 = require('./context');\n    var verifyVal_1 = require('./verifyVal');\n    function makeUseOptional(localDeclare) {\n        context_2.okToNotUse.add(localDeclare);\n    }\n    exports.makeUseOptional = makeUseOptional;\n    function makeUseOptionalIfFocus(localDeclare) {\n        if (localDeclare.name === '_')\n            makeUseOptional(localDeclare);\n    }\n    exports.makeUseOptionalIfFocus = makeUseOptionalIfFocus;\n    function verifyEachValOrSpread(asts) {\n        for (const _ of asts)\n            if (_ instanceof Call_1.Spread)\n                verifySpread(_);\n            else\n                verifyVal_1.default(_);\n    }\n    exports.verifyEachValOrSpread = verifyEachValOrSpread;\n    function verifySpread({ spreaded }) {\n        verifyVal_1.default(spreaded);\n    }\n    function verifyMemberName(_) {\n        if (typeof _ !== 'string')\n            verifyVal_1.default(_);\n    }\n    exports.verifyMemberName = verifyMemberName;\n    function setName(expr) {\n        context_2.results.names.set(expr, context_2.name);\n    }\n    exports.setName = setName;\n    function verifyNotLazy(localDeclare, errorMessage) {\n        context_1.check(!localDeclare.isLazy, localDeclare.loc, errorMessage);\n    }\n    exports.verifyNotLazy = verifyNotLazy;\n});\n","import Op, {nonNull} from 'op/Op'\nimport {Spread} from '../ast/Call'\nimport {Val} from '../ast/LineContent'\nimport {LocalDeclare} from '../ast/locals'\nimport MemberName from '../ast/MemberName'\nimport MsAst from '../ast/MsAst'\nimport Named from '../ast/Named'\nimport {check} from '../context'\nimport Language from '../languages/Language'\nimport {name, okToNotUse, results} from './context'\nimport SK from './SK'\nimport verifyVal from './verifyVal'\n\n/** Mark a LocalDeclare as OK to not use. */\nexport function makeUseOptional(localDeclare: LocalDeclare): void {\n\tokToNotUse.add(localDeclare)\n}\n\n/**\nFor Asts that use the focus by default, make it OK to not use the variable when it's the focus.\n(If the user specified a name, they intended to use it.)\n*/\nexport function makeUseOptionalIfFocus(localDeclare: LocalDeclare): void {\n\tif (localDeclare.name === '_')\n\t\tmakeUseOptional(localDeclare)\n}\n\n/** Verify values, accepting Spreads. */\nexport function verifyEachValOrSpread(asts: Array<Val | Spread>): void {\n\tfor (const _ of asts)\n\t\t// `null` signifies to Spread that we recognize it\n\t\t// todo: just have special function for verify spread\n\t\tif (_ instanceof Spread)\n\t\t\tverifySpread(_)\n\t\telse\n\t\t\tverifyVal(_)\n}\n//move?\nfunction verifySpread({spreaded}: Spread): void {\n\t//check(sk === null, this.loc, _ => sk === SK.Val ? _.misplacedSpreadVal : _.misplacedSpreadDo)\n\tverifyVal(spreaded)\n}\n\n/** Verify if it's not a string. */\n//move\nexport function verifyMemberName(_: MemberName): void {\n\tif (typeof _ !== 'string')\n\t\tverifyVal(_)\n}\n\nexport function setName(expr: Named): void {\n\tresults.names.set(expr, name)\n}\n\nexport function verifyNotLazy(localDeclare: LocalDeclare, errorMessage: (_: Language) => string): void {\n\tcheck(!localDeclare.isLazy, localDeclare.loc, errorMessage)\n}\n"],"sourceRoot":"/source/"}