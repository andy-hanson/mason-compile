{"version":3,"sources":["private/lex/lexPlain.js"],"names":[],"mappings":"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","file":"private/lex/lexPlain.js","sourcesContent":["(function (factory) {\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === 'function' && define.amd) {\n        define([\"require\", \"exports\", 'esast/lib/Loc', '../context', '../token/Group', '../token/Keyword', '../token/Token', '../util', './chars', './groupContext', './lexName', './lexQuote', './sourceContext'], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    var Loc_1 = require('esast/lib/Loc');\n    var context_1 = require('../context');\n    var Group_1 = require('../token/Group');\n    var Keyword_1 = require('../token/Keyword');\n    var Token_1 = require('../token/Token');\n    var util_1 = require('../util');\n    var chars_1 = require('./chars');\n    var groupContext_1 = require('./groupContext');\n    var lexName_1 = require('./lexName');\n    var lexQuote_1 = require('./lexQuote');\n    var sourceContext_1 = require('./sourceContext');\n    function lexPlain(isInQuote) {\n        let indent = 0;\n        let startColumn;\n        function startPos() {\n            return new Loc_1.Pos(sourceContext_1.line, startColumn);\n        }\n        function loc() {\n            return new Loc_1.default(startPos(), sourceContext_1.pos());\n        }\n        function keyword(kind) {\n            groupContext_1.addToCurrentGroup(new Keyword_1.default(loc(), kind));\n        }\n        function funKeyword(kind) {\n            keyword(kind);\n            groupContext_1.space(loc());\n        }\n        function eatAndAddNumber() {\n            const startIndex = sourceContext_1.index - 1;\n            sourceContext_1.tryEat(45);\n            if (sourceContext_1.peek(-1) === 48) {\n                const p = sourceContext_1.peek();\n                switch (p) {\n                    case 66:\n                    case 79:\n                    case 88: {\n                        sourceContext_1.skip();\n                        const isDigitSpecial = p === 66 ?\n                            chars_1.isDigitBinary :\n                            p === 79 ?\n                                chars_1.isDigitOctal :\n                                chars_1.isDigitHex;\n                        sourceContext_1.skipWhile(isDigitSpecial);\n                        break;\n                    }\n                    case 46:\n                        if (chars_1.isDigit(sourceContext_1.peek(1))) {\n                            sourceContext_1.skip();\n                            sourceContext_1.skipWhile(chars_1.isDigit);\n                        }\n                        break;\n                    default:\n                }\n            }\n            else {\n                sourceContext_1.skipWhile(chars_1.isDigit);\n                if (sourceContext_1.peek() === 46 && chars_1.isDigit(sourceContext_1.peek(1))) {\n                    sourceContext_1.skip();\n                    sourceContext_1.skipWhile(chars_1.isDigit);\n                }\n            }\n            const str = sourceContext_1.sourceString.slice(startIndex, sourceContext_1.index);\n            groupContext_1.addToCurrentGroup(new Token_1.NumberToken(loc(), str));\n        }\n        function eatIndent() {\n            const optIndent = context_1.compileOptions.indent;\n            if (typeof optIndent === 'number') {\n                const spaces = sourceContext_1.skipWhileEquals(32);\n                context_1.check(spaces % optIndent === 0, sourceContext_1.pos, _ => _.badSpacedIndent(optIndent));\n                return spaces / optIndent;\n            }\n            else {\n                const indent = sourceContext_1.skipWhileEquals(9);\n                context_1.check(sourceContext_1.peek() !== 32, sourceContext_1.pos, _ => _.noLeadingSpace);\n                return indent;\n            }\n        }\n        function handleName() {\n            lexName_1.default(startPos(), false);\n        }\n        while (true) {\n            startColumn = sourceContext_1.column;\n            const characterEaten = sourceContext_1.eat();\n            switch (characterEaten) {\n                case 0:\n                    return;\n                case 96:\n                case 34:\n                    lexQuote_1.default(indent, characterEaten === 96);\n                    break;\n                case 40:\n                    if (sourceContext_1.tryEat(41))\n                        groupContext_1.addToCurrentGroup(new Group_1.GroupParenthesis(loc(), []));\n                    else\n                        groupContext_1.openParenthesis(loc());\n                    break;\n                case 91:\n                    if (sourceContext_1.tryEat(93))\n                        groupContext_1.addToCurrentGroup(new Group_1.GroupBracket(loc(), []));\n                    else {\n                        groupContext_1.openGroup(startPos(), Group_1.GroupBracket);\n                        groupContext_1.openGroup(sourceContext_1.pos(), Group_1.GroupSpace);\n                    }\n                    break;\n                case 41:\n                    if (groupContext_1.closeInterpolationOrParenthesis(loc())) {\n                        util_1.assert(isInQuote);\n                        return;\n                    }\n                    break;\n                case 93:\n                    groupContext_1.closeGroup(startPos(), Group_1.GroupSpace);\n                    groupContext_1.closeGroup(sourceContext_1.pos(), Group_1.GroupBracket);\n                    break;\n                case 32:\n                    groupContext_1.space(loc());\n                    break;\n                case 10: {\n                    context_1.check(!isInQuote, loc, _ => _.noNewlineInInterpolation);\n                    if (sourceContext_1.peek(-2) === 32)\n                        context_1.warn(sourceContext_1.pos(), _ => _.trailingSpace);\n                    sourceContext_1.skipNewlines();\n                    const oldIndent = indent;\n                    indent = eatIndent();\n                    if (indent > oldIndent) {\n                        context_1.check(indent === oldIndent + 1, loc, _ => _.tooMuchIndent);\n                        const l = loc();\n                        if (util_1.isEmpty(groupContext_1.curGroup.subTokens) ||\n                            !Keyword_1.isKeyword(126, util_1.last(groupContext_1.curGroup.subTokens))) {\n                            if (groupContext_1.curGroup instanceof Group_1.GroupSpace)\n                                groupContext_1.closeSpaceOKIfEmpty(l.start);\n                            groupContext_1.openGroup(l.end, Group_1.GroupSpace);\n                        }\n                        groupContext_1.openGroup(l.start, Group_1.GroupBlock);\n                        groupContext_1.openLine(l.end);\n                    }\n                    else {\n                        const l = loc();\n                        for (let i = indent; i < oldIndent; i = i + 1)\n                            groupContext_1.closeGroupsForDedent(l.start);\n                        groupContext_1.closeLine(l.start);\n                        groupContext_1.openLine(l.end);\n                    }\n                    break;\n                }\n                case 9:\n                    throw context_1.fail(loc(), _ => _.nonLeadingTab);\n                case 33:\n                    if (sourceContext_1.tryEat(124))\n                        funKeyword(109);\n                    else\n                        handleName();\n                    break;\n                case 36:\n                    if (sourceContext_1.tryEat2(33, 124))\n                        funKeyword(113);\n                    else if (sourceContext_1.tryEat(124))\n                        funKeyword(112);\n                    else\n                        handleName();\n                    break;\n                case 42:\n                    if (sourceContext_1.tryEat2(33, 124))\n                        funKeyword(117);\n                    else if (sourceContext_1.tryEat(124))\n                        funKeyword(116);\n                    else\n                        handleName();\n                    break;\n                case 124:\n                    if (sourceContext_1.tryEat(32) || sourceContext_1.tryEat(9)) {\n                        const text = sourceContext_1.eatRestOfLine();\n                        groupContext_1.closeSpaceOKIfEmpty(startPos());\n                        context_1.check(groupContext_1.curGroup instanceof Group_1.GroupLine && groupContext_1.curGroup.subTokens.length === 0, loc, _ => _.trailingDocComment);\n                        groupContext_1.addToCurrentGroup(new Token_1.DocComment(loc(), text));\n                    }\n                    else if (sourceContext_1.tryEat(124))\n                        sourceContext_1.skipRestOfLine();\n                    else\n                        funKeyword(108);\n                    break;\n                case 45:\n                    if (chars_1.isDigit(sourceContext_1.peek()))\n                        eatAndAddNumber();\n                    else\n                        handleName();\n                    break;\n                case 48:\n                case 49:\n                case 50:\n                case 51:\n                case 52:\n                case 53:\n                case 54:\n                case 55:\n                case 56:\n                case 57:\n                    eatAndAddNumber();\n                    break;\n                case 46: {\n                    if (sourceContext_1.peek() === 32 || sourceContext_1.peek() === 10) {\n                        groupContext_1.closeSpaceOKIfEmpty(startPos());\n                        keyword(135);\n                    }\n                    else if (sourceContext_1.tryEat(124))\n                        funKeyword(110);\n                    else if (sourceContext_1.tryEat2(33, 124))\n                        funKeyword(111);\n                    else if (sourceContext_1.tryEat2(42, 124))\n                        funKeyword(118);\n                    else if (sourceContext_1.tryEat3(42, 33, 124))\n                        funKeyword(119);\n                    else if (sourceContext_1.tryEat(46))\n                        if (sourceContext_1.tryEat(46))\n                            keyword(97);\n                        else\n                            keyword(96);\n                    else\n                        keyword(95);\n                    break;\n                }\n                case 58:\n                    if (sourceContext_1.tryEat(61))\n                        keyword(127);\n                    else\n                        keyword(90);\n                    break;\n                case 39:\n                    keyword(146);\n                    break;\n                case 126:\n                    keyword(126);\n                    break;\n                case 38:\n                    keyword(78);\n                    break;\n                case 92:\n                case 94:\n                case 125:\n                case 44:\n                case 35:\n                case 123:\n                case 37:\n                case 59:\n                    throw context_1.fail(loc(), _ => _.reservedChar(characterEaten));\n                default:\n                    handleName();\n            }\n        }\n    }\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = lexPlain;\n});\n"],"sourceRoot":"/source/"}